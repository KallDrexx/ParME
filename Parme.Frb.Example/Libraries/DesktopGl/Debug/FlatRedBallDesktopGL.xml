<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FlatRedBallDesktopGL</name>
    </assembly>
    <members>
        <member name="T:FlatRedBall.AI.LineOfSight.IViewer">
            <summary>
            A viiewer in a VisibilityGrid.  This typically is a unit which removes fog of war around it.
            </summary>
        </member>
        <member name="P:FlatRedBall.AI.LineOfSight.IViewer.WorldViewRadius">
            <summary>
            The distance in world units that this IViewer can see.
            </summary>
        </member>
        <member name="T:FlatRedBall.AI.LineOfSight.VisibilityGrid">
            <summary>
            Represents a 2D grid of cells which identify what can be seen given a list of IViewers. 
            This supports line of sight.
            </summary>
        </member>
        <member name="M:FlatRedBall.AI.LineOfSight.VisibilityGrid.#ctor(System.Single,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Instantiates a new VisibilityGrid.
            </summary>
            <param name="xSeed">The absolute x coordinate seed value.</param>
            <param name="ySeed">The absolute y coordinate seed value.</param>
            <param name="gridSpacing">The amount of distance in world coordinates between rows and columns.</param>
            <param name="numberOfXTiles">Number of tiles wide (on the X axis)</param>
            <param name="numberOfYTiles">Number of tiles heigh (on the Y axis)</param>
        </member>
        <member name="M:FlatRedBall.AI.LineOfSight.VisibilityGrid.Activity">
            <summary>
            Checks if any viewers have changed since last Update, and if so it updates the grid.
            </summary>
            <returns>Whether anything has changed.</returns>
        </member>
        <member name="M:FlatRedBall.AI.LineOfSight.VisibilityGrid.Destroy">
            <summary>
            Destroys the VisibilityGrid - specifically disposing its internal fog texture.
            </summary>
        </member>
        <member name="M:FlatRedBall.AI.LineOfSight.VisibilityGrid.AddViewer(FlatRedBall.AI.LineOfSight.IViewer)">
            <summary>
            Adds an IViewer to this grid.
            </summary>
            <param name="viewerToAdd">The viewer to add.</param>
        </member>
        <member name="M:FlatRedBall.AI.LineOfSight.VisibilityGrid.BleedDirectlyVisibleToWalls">
            <summary>
            Makes walls visible if they are adjacent to visible non-walls.
            </summary>
        </member>
        <member name="M:FlatRedBall.AI.LineOfSight.VisibilityGrid.BlockWorld(System.Single,System.Single)">
            <summary>
            Adds a block (or wall) at a given world location.
            </summary>
            <param name="worldX">The world coordinate X.</param>
            <param name="worldY">The world coordinate Y.</param>
        </member>
        <member name="M:FlatRedBall.AI.LineOfSight.VisibilityGrid.UnBlockWorld(System.Single,System.Single)">
            <summary>
            Unblocks a tile that was previously marked as a world blocker
            </summary>
            <param name="X">The X coordinate of the tile</param>
            <param name="Y">The Y coordinate of the tile</param>
        </member>
        <member name="M:FlatRedBall.AI.LineOfSight.VisibilityGrid.ClearBlockedTiles">
            <summary>
            Clears all blocked tiles.
            </summary>
        </member>
        <member name="M:FlatRedBall.AI.LineOfSight.VisibilityGrid.IsPositionInDirectView(FlatRedBall.AI.LineOfSight.IViewer,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Returns whether a given world position is in view of a given viewer.
            </summary>
            <param name="viewer">The viewer to check visibility for.</param>
            <param name="targetPosition">The world coordinates.</param>
            <returns>Whether in view.</returns>
        </member>
        <member name="M:FlatRedBall.AI.LineOfSight.VisibilityGrid.IsRevealedWorld(System.Single,System.Single)">
            <summary>
            Returns whether a given world coordinate is relealed.
            </summary>
            <param name="worldX">The world x coordinate.</param>
            <param name="worldY">The world y coordinate.</param>
            <returns>Whether the world coordinate is revealed or not.</returns>
        </member>
        <member name="M:FlatRedBall.AI.LineOfSight.VisibilityGrid.IsRevealed(System.Int32,System.Int32)">
            <summary>
            Returns whether a given X and Y index is revealed.
            </summary>
            <param name="xIndex">The x index</param>
            <param name="yIndex">The y index</param>
            <returns>Whether the location specified by the x/y index is revealed.</returns>
        </member>
        <member name="M:FlatRedBall.AI.LineOfSight.VisibilityGrid.MakeAllHidden">
            <summary>
            Hides the entire grid (makes it not revealed).
            </summary>
        </member>
        <member name="M:FlatRedBall.AI.LineOfSight.VisibilityGrid.MakeAllRevealed">
            <summary>
            Reveals the entire grid.
            </summary>
        </member>
        <member name="M:FlatRedBall.AI.LineOfSight.VisibilityGrid.RemoveViewer(FlatRedBall.AI.LineOfSight.IViewer)">
            <summary>
            Removes a viewer.
            </summary>
            <param name="viewerToRemove">The argument IViewer to remove.</param>
        </member>
        <member name="M:FlatRedBall.AI.LineOfSight.VisibilityGrid.RevealCircleWorld(System.Single,System.Single,System.Single)">
            <summary>
            Reveals a circle around the given world coordinate using a given radius
            </summary>
            <param name="worldX">The world coordinate X</param>
            <param name="worldY">The world coordinate Y</param>
            <param name="worldRadius">The radius in world units</param>
        </member>
        <member name="T:FlatRedBall.AI.Pathfinding.Link">
            <summary>
            Represents a one-way cost-including path to a PositionedNode.
            </summary>
        </member>
        <member name="P:FlatRedBall.AI.Pathfinding.Link.Active">
            <summary>
            Whether this link is active. If false, pathfinding will ignore this link.
            </summary>
        </member>
        <member name="P:FlatRedBall.AI.Pathfinding.Link.Cost">
            <summary>
            The cost to travel the link.
            </summary>
            <remarks>
            This is by default the distance to travel; however it can manually
            be changed to be any value to reflect different terrain, altitude, or other
            travelling costs.
            </remarks>
        </member>
        <member name="P:FlatRedBall.AI.Pathfinding.Link.NodeLinkingTo">
            <summary>
            The destination PositionedNode.  The starting PositionedNode is not stored by the Link instance.
            </summary>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.Link.#ctor(FlatRedBall.AI.Pathfinding.PositionedNode,System.Single)">
            <summary>
            Creates a new Link.
            </summary>
            <param name="nodeLinkingTo">The node to link to.</param>
            <param name="cost">The cost to travel the link.</param>
        </member>
        <member name="T:FlatRedBall.AI.Pathfinding.NodeNetwork">
            <summary>
            Stores a collection of PositionedNodes and provides common functionality for
            pathfinding logic.
            </summary>
        </member>
        <member name="P:FlatRedBall.AI.Pathfinding.NodeNetwork.Nodes">
            <summary>
            All nodes in this NodeNetwork.
            </summary>
        </member>
        <member name="P:FlatRedBall.AI.Pathfinding.NodeNetwork.NodeVisibleRepresentation">
            <summary>
            The polygons used to represent PositionedNodes.  This is populated and managed by the
            NodeNetwork if Visible is set to true.
            </summary>
        </member>
        <member name="P:FlatRedBall.AI.Pathfinding.NodeNetwork.NodeColor">
            <summary>
            The Color that Node polygons should use when Visible is true;
            </summary>
        </member>
        <member name="P:FlatRedBall.AI.Pathfinding.NodeNetwork.Visible">
            <summary>
            Controls the visibility of the NodeNetwork.  This is usually only set to 
            true for debugging and testing purposes.  
            </summary>
            <remarks>
            Setting this value to true creates Polygons and Lines to represent the
            NodeNetwork.  Setting it back to false destroys all objects used for visible
            representation.
            </remarks>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.NodeNetwork.#ctor">
            <summary>
            Creates an empty NodeNetwork.
            </summary>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.NodeNetwork.AddNode">
            <summary>
            Creates a new PositionedNode and adds it to the NodeNetwork.
            </summary>
            <returns>The newly-created PositionedNode.</returns>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.NodeNetwork.AddNode(FlatRedBall.AI.Pathfinding.PositionedNode)">
            <summary>
            Adds an already-created PositionedNode to the NodeNetwork.
            </summary>
            <remarks>
            Will not add the PositionedNode if it is already part of the NodeNetwork
            </remarks>
            <param name="nodeToAdd">The PositionedNode to add.</param>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.NodeNetwork.FindByName(System.String)">
            <summary>
            Finds a PositionedNode by the argument nameofNode.
            </summary>
            <param name="nameOfNode">The name of the PositionedNode to search for.</param>
            <returns>The PositionedNode with the matching Name, or null if no PositionedNodes match.</returns>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.NodeNetwork.GetClosestNodeTo(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Returns the PositionedNode that's the closest to the argument position.
            </summary>
            <param name="position">The point to find the closest PositionedNode to.</param>
            <returns>The PositionedNode that is the closest to the argument position.</returns>
        </member>
        <member name="P:FlatRedBall.AI.Pathfinding.NodeNetwork.NodeVisualizationRadius">
            <summary>
            The radius of the shape used to visualize a node when the NodeNetwork is visible.
            </summary>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.NodeNetwork.GetVisibleNodeRadius(FlatRedBall.Camera,System.Int32)">
            <summary>
            Returns the radius of the PositionedNode visible representation Polygons.
            </summary>
            <remarks>
            The size of the PositionedNode visible representation Polygons depends on the
            camera's Z position - as the Camera moves further away, the Polygons are drawn larger.
            If the Camera is viewing down the Z axis then changing the Z will not affect the visible
            size of the PositionedNode visible representation.
            </remarks>
            <param name="camera">The camera to use when calculating the size.</param>
            <param name="nodeIndex">The index of the PositionedNode in the NodeNetwork.  Since nodes can be in 
            3D space the individual PositionedNode is required.</param>
            <returns>The radius of the node.</returns>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.NodeNetwork.GetPath(FlatRedBall.AI.Pathfinding.PositionedNode,FlatRedBall.AI.Pathfinding.PositionedNode)">
            <summary>
            Returns the List of PositionedNodes which make the path from the start PositionedNode to the end PositionedNode.
            </summary>
            <remarks>
            If start and end are the same node then the List returned will contain that node.
            </remarks>
            <param name="start">The PositionedNode to begin the path at.</param>
            <param name="end">The destination PositionedNode.</param>
            <returns>The list of nodes to travel through to reach the end PositionedNode from the start PositionedNode.  The
            start and end nodes are included in the returned List.</returns>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.NodeNetwork.GetPath(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Returns the List of PositionedNodes which make the path from the start Vector3 to the end Vector3.
            </summary>
            <remarks>
            This method finds the closest nodes to each of the arguments, then calls the overload for GetPath which takes
            PositionedNode arguments.
            </remarks>
            <param name="startPoint">The world-coordinate start position.</param>
            <param name="endPoint">The world-coordinate end position.</param>
            <returns>The list of nodes to travel through to reach the closest PositionedNode to the endPoint from the closest
            PositionedNode to the startPoint.</returns>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.NodeNetwork.GetPathOrClosest(FlatRedBall.AI.Pathfinding.PositionedNode,FlatRedBall.AI.Pathfinding.PositionedNode)">
            <summary>
            Returns the List of PositionedNodes which make the path from the start PositionedNode to the end PositionedNode, or the node closest to the end node which is linked through the network to the start PositionedNode.
            </summary>
            <remarks>
            If start and end are the same node then the List returned will contain that node.
            </remarks>
            <param name="start">The PositionedNode to begin the path at.</param>
            <param name="end">The optimal destination PositionedNode.</param>
            <returns>The list of nodes to travel through to reach the end PositionedNode, or the node closest to the PositionedNode which is connected to the start PositionedNode, from the start PositionedNode.  The
            start and end nodes are included in the returned List.</returns>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.NodeNetwork.GetPathOrClosest(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Returns the List of PositionedNodes which make the path from the start Vector3 to the end Vector3, or to the node closest to the end Vector3 available if the end node is not linked in some way to the start node. 
            </summary>
            <remarks>
            This method finds the closest nodes to each of the arguments, then calls the overload for GetPathOrClosest which takes
            PositionedNode arguments.
            </remarks>
            <param name="startPoint">The world-coordinate start position.</param>
            <param name="endPoint">The world-coordinate end position.</param>
            <returns>The list of nodes to travel through to reach the closest PositionedNode which is linked to the closest PositionedNode to the startPoint.
            </returns>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.NodeNetwork.GetCollisionOptimizedPath(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,FlatRedBall.Math.PositionedObjectList{FlatRedBall.Math.Geometry.Polygon})">
            <summary>
            Returns a List of Vector3s that will be an optimized version of GetPath given the NodeNetwork and a Collision Map to test against.
            </summary>
            <remarks>
            This method will get the optimal path between the two vectors using GetPath, and then will optimize it by
            testing line of sight between the nodes to see if the path can be optimized further (for more optimized
            pathfinding). When optimizing the path between two nodes, it will check if the midpoint is in line of sight with the
            startingPosition, and if it is, change the path to the midpoint instead of the current target node. the numberOfOptimizations
            decides how many times it will take the midpoint and optimize further.
            
            This method assumes that the node network does NOT fall within collidable objects.
            </remarks>
            <param name="startingPosition">The world-coordinate of the starting position.</param>
            <param name="destination">The world-coordinate of the destination.</param>
            <param name="collisionMap">The collision map which will have the obstacles you are trying to path around.</param>
            <returns></returns>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.NodeNetwork.GetCollisionOptimizedPath(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Int32,System.Int32,System.Single,FlatRedBall.Math.PositionedObjectList{FlatRedBall.Math.Geometry.Polygon})">
            <summary>
            Returns a List of Vector3s that will be an optimized version of GetPath given the NodeNetwork and a Collision Map to test against.
            </summary>
            <remarks>
            This method will get the optimal path between the two vectors using GetPath, and then will optimize it by
            testing line of sight between the nodes to see if the path can be optimized further (for more optimized
            pathfinding). When optimizing the path between two nodes, it will check if the midpoint is in line of sight with the
            startingPosition, and if it is, change the path to the midpoint instead of the current target node. the numberOfOptimizations
            decides how many times it will take the midpoint and optimize further.
            </remarks>
            <param name="startingPosition">The world-coordinate of the starting position.</param>
            <param name="destination">The world-coordinate of the destination.</param>
            <param name="numberOfOptimizations">The number of times the algorithm will take the midpoint between
            two nodes to test if they are within line of sight of each other (higher means nearer to optimal path).</param>
            <param name="optimizationsDeep"></param>
            <param name="collisionThreshold">Usually the object using the path will be larger than 0, use the size of the collision for testing line of sight.</param>
            <param name="collisionMap">The collision map which will have the obstacles you are trying to path around.</param>
            <returns></returns>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.NodeNetwork.Remove(FlatRedBall.AI.Pathfinding.PositionedNode)">
            <summary>
            Removes the argument PositionedNode from the NodeNetwork.  Also destroys any links
            pointing to the argument PositionedNode.
            </summary>
            <param name="nodeToRemove">The PositionedNode to remove.</param>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.NodeNetwork.Remove(FlatRedBall.AI.Pathfinding.PositionedNode,System.Boolean)">
            <summary>
            Removes the argument PositionedNode from the NodeNetwork.  Also destroys any links
            pointing to the argument PositionedNode.
            </summary>
            <param name="nodeToRemove">The PositionedNode to remove from the network.</param>
            <param name="scanAndRemoveOneWayReferences">Scans the entire network and removes all links to this node. Used when not all link relationships are two way.</param>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.NodeNetwork.UpdateShapes">
            <summary>
            Updates the visible representation of the NodeNetwork.  This is only needed to be called if the NodeNetwork
            is visible and if any contained PositionedNodes or Links have changed.
            </summary>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.PathfindingFunctions.IsInLineOfSight(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,FlatRedBall.Math.PositionedObjectList{FlatRedBall.Math.Geometry.Polygon})">
            <summary>
            Tests if two vector positions are within line of sight given a collision map.
            </summary>
            <param name="position1">The first world-coordinate position.</param>
            <param name="position2">The second world-coordinate position.</param>
            <param name="collisionMap">The list of polygons used to test if the two positions are within line of sight.</param>
            <returns></returns>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.PathfindingFunctions.IsInLineOfSight(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,FlatRedBall.Math.PositionedObjectList{FlatRedBall.Math.Geometry.Polygon})">
            <summary>
            Tests if two vector positions are within line of sight given a collision map.
            </summary>
            <param name="position1">The first world-coordinate position.</param>
            <param name="position2">The second world-coordinate position.</param>
            <param name="collisionThreshold">Distance from position2 to the polygon it's colliding against.
            If a polygon is within this threshold, this will return false.</param>
            <param name="collisionMap">The list of polygons used to test if the two positions are within line of sight.</param>
            <returns></returns>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.PathfindingFunctions.Midpoint(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Returns the midpoint between two Vector3s.
            </summary>
            <param name="position1">The first position.</param>
            <param name="position2">The connecting position.</param>
            <returns>The midpoint between the two positions.</returns>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.PathfindingFunctions.OptimalVisiblePoint(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Int32,System.Single,FlatRedBall.Math.PositionedObjectList{FlatRedBall.Math.Geometry.Polygon})">
            <summary>
            Calculates the closest visible point to outOfSightPosition given the currentPosition.
            </summary>
            <param name="currentPosition">The position with which to test Line Of Sight</param>
            <param name="inSightPosition">The connector to the outOfSightPosition with which to find midpoint optimizations.</param>
            <param name="outOfSightPosition">The guide to find the optimal in sight position.</param>
            <param name="numberOfOptimizations">The number of times we will midpoint optimize, higher means closer to optimal.</param>
            <param name="collisionThreshold">Usually the object using the path will be larger than 0, use the size of the collision for testing line of sight.</param>
            <param name="collisionMap">Polygon list which we will use for collision (without it, everything is straight line of sight).</param>
            <returns></returns>
        </member>
        <member name="T:FlatRedBall.AI.Pathfinding.PositionedNode">
            <summary>
            An object which has position properties 
            </summary>
        </member>
        <member name="F:FlatRedBall.AI.Pathfinding.PositionedNode.mParentNode">
            <summary>
            The node that links to this node.  This is reset every time the 
            containing NodeNetwork searches for a path.
            </summary>
        </member>
        <member name="F:FlatRedBall.AI.Pathfinding.PositionedNode.mCostToGetHere">
            <summary>
            The cost to get to this node from the start node.  This variable is
            set when the containing NodeNetwork searches for a path.
            </summary>
        </member>
        <member name="F:FlatRedBall.AI.Pathfinding.PositionedNode.mActive">
            <summary>
            Only active nodes are included in pathfinding and find node searches. 
            </summary>
            Update February 10, 2013
            Nodes should always start 
            out as active.  
        </member>
        <member name="P:FlatRedBall.AI.Pathfinding.PositionedNode.CostToGetHere">
            <summary>
            Returns the cost to get to this node from the start node.  This
            value is only accurate if the node is contained in list returned
            by the last call to NodeNetwork.GetPath.
            </summary>
            <remarks>
            This value is reset anytime GetPath is called on the containing NodeNetwork.
            </remarks>
        </member>
        <member name="P:FlatRedBall.AI.Pathfinding.PositionedNode.Name">
            <summary>
            The Node's name.  Mainly used for saving NodeNetworks since saved Links reference
            PositionedNodes by name.
            </summary>
        </member>
        <member name="P:FlatRedBall.AI.Pathfinding.PositionedNode.X">
            <summary>
            The X position of the PositionedNode.
            </summary>
        </member>
        <member name="P:FlatRedBall.AI.Pathfinding.PositionedNode.Y">
            <summary>
            The Y position of the PositionedNode.
            </summary>
        </member>
        <member name="P:FlatRedBall.AI.Pathfinding.PositionedNode.Z">
            <summary>
            The Z position of the PositionedNode.
            </summary>
        </member>
        <member name="P:FlatRedBall.AI.Pathfinding.PositionedNode.Links">
            <summary>
            The links belonging to this PositionedNode.
            </summary>
            <remarks>
            This is a list of Links which reference the PositionedNodes that this links to.
            Links are one-way and PositionedNodes that this links to do not necessarily contain
            Links back to this.
            
            This list is provided for advanced scenarios, such as when when adding a subclassed Link. Otherwise
            use functions like LinkTo and LinkToOneWay
            </remarks>
        </member>
        <member name="P:FlatRedBall.AI.Pathfinding.PositionedNode.Active">
            <summary>
            Only active nodes are included in pathfinding and find node searches. 
            </summary>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.PositionedNode.#ctor">
            <summary>
            Creates a new PositionedNode.
            </summary>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.PositionedNode.BreakLinkBetween(FlatRedBall.AI.Pathfinding.PositionedNode)">
            <summary>
            Disconnects all Links between this and the argument node.
            </summary>
            <param name="node">The PositionedNode to break links between.</param>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.PositionedNode.IsLinkedTo(FlatRedBall.AI.Pathfinding.PositionedNode)">
            <summary>
            Returns whether this has a Link to the argument PositionedNode.
            </summary>
            <remarks>
            If this does not link to the argument PositionedNode, but the argument
            links back to this, the method will return false.  It only checks links one-way.
            </remarks>
            <param name="node">The argument to test linking.</param>
            <returns>Whether this PositionedNode links to the argument node.</returns>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.PositionedNode.LinkTo(FlatRedBall.AI.Pathfinding.PositionedNode,System.Single)">
            <summary>
            Creates Links from this to the argument nodeToLinkTo, and another Link from the
            argument nodeToLinkTo back to this.
            </summary>
            <remarks>
            If either this or the argument nodeToLinkTo already contains a link to the other 
            PositionedNode, then the cost of the link is set to the argument costTo.
            </remarks>
            <param name="nodeToLinkTo">The other PositionedNode to create Links between.</param>
            <param name="costTo">The cost to travel between this and the argument nodeToLinkTo.</param>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.PositionedNode.LinkTo(FlatRedBall.AI.Pathfinding.PositionedNode,System.Single,System.Single)">
            <summary>
            Creates Links from this to the argument nodeToLinkTo, and another Link from the
            argument nodeToLinkTo back to this.
            </summary>
            <remarks>
            If either this or the argument nodeToLinkTo already contains a link to the other 
            PositionedNode, then the cost of the link is set to the argument costTo or costFrom as appropriate.
            </remarks>
            <param name="nodeToLinkTo">The other PositionedNode to create the Links between.</param>
            <param name="costTo">The cost to travel from this to the argument nodeToLinkTo.</param>
            <param name="costFrom">The cost to travel from the nodeToLinkTo back to this.</param>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.PositionedNode.LinkToOneWay(FlatRedBall.AI.Pathfinding.PositionedNode,System.Single)">
            <summary>
            Creates a link from this PositionedNode to the argument nodeToLinkTo.  Links
            on the argument nodeToLinkTo are not modified.
            </summary>
            <remarks>
            If this already links to the arugment nodeToLinkTo, the cost is set to the argument
            costTo.
            </remarks>
            <param name="nodeToLinkTo">The PositionedNode to create a link to.</param>
            <param name="costTo">The cost to travel from this to the argument nodeToLinkTo.</param>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.PositionedNode.ToString">
            <summary>
            Returns the string representation of this.
            </summary>
            <returns>The string representation of this.</returns>
        </member>
        <member name="T:FlatRedBall.AI.Pathfinding.TileNodeNetwork">
            <summary>
            A node network optimized for tile-based pathfinding.
            </summary>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.TileNodeNetwork.#ctor(System.Single,System.Single,System.Single,System.Int32,System.Int32,FlatRedBall.AI.Pathfinding.DirectionalType)">
            <summary>
            Creates a new, empty TileNodeNetwork matching the arguments.
            </summary>
            <param name="xOrigin">The X position of the left-most nodes. This, along with the ySeed, define the bottom-left of the node network. 
            For tile maps this should be the center X of the first tile column (typically TileWidth / 2).</param>
            <param name="yOrigin">The y position of the bottom-most nodes. This, along with xSeed, define the bottom-left of the node network. 
            For tile maps this should be the center Y of the bottom tile row. 
            If the top-left of the map is at 0,0, then this value would be (-EntireMapHeight + TileHeight/2)</param>
            <param name="gridSpacing">The X and Y distance between each node. That is, the X distance between two adjacent nodes (assumed to be equal to the Y distance). For a tile map this will equal the width of a tile.</param>
            <param name="numberOfXTiles">The number of nodes vertically.</param>
            <param name="numberOfYTiles">The number of nodes horizontally.</param>
            <param name="directionalType">Whether to create a Four-way or Eight-way node network. Eight creates diagonal links, enabling diagonal movement when following the node network.</param>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.TileNodeNetwork.AddAndLinkTiledNodeWorld(System.Single,System.Single)">
            <summary>
            Adds a new node at the world X and Y location. Internally the world coordinates are converted to x,y indexes and the node is stored
            in a 2D grid.
            </summary>
            <param name="worldX">The world X units.</param>
            <param name="worldY">The world Y units.</param>
            <returns>The newly-created PositionedNode</returns>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.TileNodeNetwork.AddAndLinkTiledNode(System.Int32,System.Int32)">
            <summary>
            Adds a new node at the tile index x, y.
            </summary>
            <param name="x">The x index of the tile.</param>
            <param name="y">The y index of the tile.</param>
            <returns>The newly-created PositionedNode</returns>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.TileNodeNetwork.AddAndLinkTiledNode(System.Int32,System.Int32,FlatRedBall.AI.Pathfinding.DirectionalType)">
            <summary>
            Creates a new node at index x, y and links the node to adjacent nodes given the TileNodeNetwork's GridSpacing
            </summary>
            <param name="x">The X index</param>
            <param name="y">The Y index</param>
            <param name="directionalType">The DirectionalType, which is either Four or Eight way. Four will link in cardinal directions, while Eight will also link diagonally.</param>
            <returns></returns>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.TileNodeNetwork.AddNode(FlatRedBall.AI.Pathfinding.PositionedNode)">
            <summary>
            Adds an already-positioned node to the node network.
            </summary>
            <remarks>
            This method adds a node to the base nodes list, as well as to the 
            2D array of node. The position of the node is used to add the node, so it
            should already be in its final position prior to calling this method.
            </remarks>
            <param name="nodeToAdd">The node to add.</param>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.TileNodeNetwork.FillCompletely">
            <summary>
            Populates every possible space on the grid with a node and creates links betwen adjacent links. Diagonal links are created only if
            the DirectionalType is set to DirectionalType.Eight.
            </summary>
        </member>
        <member name="T:FlatRedBall.Attributes.ExternalInstance">
            <summary>
            Defines a member as an external instance.  Members which are external instances
            are not read by ContentReaders.  Rather they're set by ExternalInstances of referenced
            content such as Texture2Ds.
            </summary>
        </member>
        <member name="T:FlatRedBall.Attributes.ExternalInstanceList">
            <summary>
            Attribute marking a member in a save class as an external instance.  That is, it should
            be treated as external content by the ObjectReaders and ObjectWriters in the FlatRedBall
            content pipeline.
            </summary>
        </member>
        <member name="T:FlatRedBall.Attributes.InstanceListMember">
            <summary>
            Used internally by the engine to determine the order of 
            reading and writing for instances.
            </summary>
        </member>
        <member name="T:FlatRedBall.Attributes.InstanceMember">
            <summary>
            Matches the marked member with the member to set when this instance is loaded through
            the content pipeline.  This attribute is usually applied to ExternalReference objects.
            </summary>
        </member>
        <member name="P:FlatRedBall.Audio.AudioManager.AreSoundEffectsEnabled">
            <summary>
            Controls whether the Play function will produce any audio when called.
            This defaults to true, and it can be set to false in response to a setting
            in the game's options screen. Setting this to false will not stop any currently-playing
            SoundEffects as this is an XNA limitation - SoundEffect is fire-and-forget.
            </summary>
        </member>
        <member name="P:FlatRedBall.Audio.AudioManager.CurrentSong">
            <summary>
             Represents the "active" song.  This may or may not be actually playing.
             This may still be non-null when no song is playing if the code has stopped
             music from playing.  The AudioManager remembers this to resume playing later.
            </summary>
        </member>
        <member name="P:FlatRedBall.Audio.AudioManager.CurrentlyPlayingSong">
            <summary>
            Represents the song that is currently playing.  If no song is playing this is null.
            </summary>
        </member>
        <member name="P:FlatRedBall.Audio.AudioManager.NumberOfSoundEffectPlays">
            <summary>
            Reports the total number of sound effects that have been played by the AudioManager since the start of the program's execution.
            This can be used to count sound effect plays as a rough form of profiling.
            </summary>
        </member>
        <member name="M:FlatRedBall.Audio.AudioManager.IsSoundEffectPlaying(Microsoft.Xna.Framework.Audio.SoundEffect)">
            <summary>
            Returns whether the argument SoundEffect is playing. If true, then the SoundEffect is already
            playing. If false, the SoundEffect is not playing. This will only check SoundEffects which were 
            played through the AudioManager.Play method.
            </summary>
            <param name="soundEffect">The SoundEffect to test.</param>
            <returns>Whether the sound effect is playing.</returns>
        </member>
        <member name="M:FlatRedBall.Audio.AudioManager.Play(Microsoft.Xna.Framework.Audio.SoundEffect)">
            <summary>
            Plays the argument sound effect using a default Volume, pitch, and pan.
            </summary>
            <param name="soundEffect"></param>
        </member>
        <member name="M:FlatRedBall.Audio.AudioManager.Play(Microsoft.Xna.Framework.Audio.SoundEffect,System.Single,System.Single,System.Single)">
            <summary>
            Plays the argument sound effect.
            </summary>
            <param name="soundEffect">The sound effect to play</param>
            <param name="volume">Volume, ranging from 0.0f (silence) to 1.0f (full volume). 1.0f is full volume</param>
            <param name="pitch">Pitch, ranging from -1.0f (one octave down) to 1.0f (one octave up). 0.0f means no change </param>
            <param name="pan">Volume, ranging from -1.0f (full left) to 1.0f (full right). 0.0f is centered </param>
        </member>
        <member name="M:FlatRedBall.Audio.AudioManager.PlayIfNotPlaying(Microsoft.Xna.Framework.Audio.SoundEffect)">
            <summary>
            Checks if the argument sound effect if playing. If not, plays the sound effect.
            </summary>
            <param name="soundEffect">The sound effect to play.</param>
        </member>
        <member name="M:FlatRedBall.Audio.AudioManager.PlaySong">
            <summary>
            Plays the current song.  PlaySong with an argument must
            be called before this can be called.  This can be used to
            resume music when the game is unpaused or if audio options are
            being turned on/off
            </summary>
        </member>
        <member name="M:FlatRedBall.Audio.AudioManager.PlaySong(Microsoft.Xna.Framework.Media.Song,System.Boolean,System.Boolean)">
            <summary>
            Plays the argument song, optionally restarting it if it is already playing.
            </summary>
            <param name="toPlay">The song to play.</param>
            <param name="forceRestart">Whether the song should be restarted. If the toPlay parameter differs from the currently-playing song then it will 
            restart regardless of the forceRestart value. This value only matters when the currently-playing song is passed.</param>
            <param name="isSongGlobalContent">Whether the song uses a Global content manager. This is important if StopAndDisposeCurrentSongIfNameDiffers is called.
            StopAndDisposeCurrentSongIfNameDiffers is called by Glue, so the isSongGlobalContent param matters even if your code is not directly calling this function.</param>
        </member>
        <member name="F:FlatRedBall.Audio.SoundGroup.SoundPlayingCoefficients.MinVolume">
            <summary>
            0 to 1
            </summary>
        </member>
        <member name="F:FlatRedBall.Audio.SoundGroup.SoundPlayingCoefficients.MaxVolume">
            <summary>
            0 to 1
            </summary>
        </member>
        <member name="M:FlatRedBall.Audio.SoundGroup.SetDefaultVolumeRange(System.Single,System.Single)">
            <summary>
            Sets the default volume range for the entire sound effect group. This default will only apply
            if the specific sound effect being played has no specified range.
            </summary>
            <param name="minVolume"></param>
            <param name="maxVolume"></param>
        </member>
        <member name="P:FlatRedBall.Camera.TopDestination">
            <summary>
            Gets and sets the top side of the destination rectangle (where on the window
            the camera will display).  Measured in pixels.  Destination uses an inverted Y (positive points down).
            </summary>
        </member>
        <member name="P:FlatRedBall.Camera.BottomDestination">
            <summary>
            Gets and sets the bottom side of the destination rectangle (where on the window
            the camera will display).  Measured in pixels.   Destination uses an inverted Y (positive points down).
            </summary>
        </member>
        <member name="P:FlatRedBall.Camera.LeftDestination">
            <summary>
            Gets and sets the left side of the destination rectangle (where on the window
            the camera will display).  Measured in pixels.
            </summary>
        </member>
        <member name="P:FlatRedBall.Camera.RightDestination">
            <summary>
            Gets and sets the right side of the destination rectangle (where on the window
            the camera will display).  Measured in pixels.
            </summary>
        </member>
        <member name="P:FlatRedBall.Camera.DestinationRectangle">
            <summary>
            Represents the top left justified area the Camera will draw over.
            </summary>
            <remarks>
            This represents the area in pixel coordinates that the camera will display relative
            to the top left of the owning Control.  If the Control is resized, the camera should modify
            its DestinationRectangle to match the new area.
            
            <para>
            Multiple cameras with different DestinationRectangles can be used to display split screen
            or picture-in-picture.
            </para>
            </remarks>
        </member>
        <member name="P:FlatRedBall.Camera.AbsoluteRightXEdge">
            <summary>
            Returns the absolute X value of the right edge of the visible area for this camera at Z = 0.
            </summary>
        </member>
        <member name="M:FlatRedBall.Camera.AbsoluteRightXEdgeAt(System.Single)">
            <summary>
            Returns the right-most visible X value at a given absolute Z value.
            The absoluteZ parameter is ignored if the camera has its Orthogonal = true (is 2D)
            </summary>
            <param name="absoluteZ">The absolute Z to use for determining the right-edge.</param>
            <returns>The furthest-right visible X value at the given absolute Z.</returns>
        </member>
        <member name="P:FlatRedBall.Camera.AbsoluteLeftXEdge">
            <summary>
            Returns the absolute X value of the left edge of the visible area for this camera at Z = 0.
            </summary>
        </member>
        <member name="M:FlatRedBall.Camera.AbsoluteLeftXEdgeAt(System.Single)">
            <summary>
            Returns the left-most visible X value at a given absolute Z value.
            The absoluteZ parameter is ignored if the camera has its Orthogonal = true (is 2D)
            </summary>
            <param name="absoluteZ">The absolute Z to use for determing the left-edge.</param>
            <returns>The furthest-left visible X value at the given absolute Z.</returns>
        </member>
        <member name="P:FlatRedBall.Camera.AbsoluteTopYEdge">
            <summary>
            Returns the absolute Y value of the top edge of the visible area for this camera at Z = 0.
            </summary>
        </member>
        <member name="M:FlatRedBall.Camera.AbsoluteTopYEdgeAt(System.Single)">
            <summary>
            Returns the top-most visible Y value at a given absolute Z value.
            The absoluteZ parameter is ignored if the camera has its Orthogonal = true (is 2D)
            </summary>
            <param name="absoluteZ">The absolute Z to use for determining the top-edge.</param>
            <returns>The furthest-top visible Y value at the given absolute Z.</returns>
        </member>
        <member name="P:FlatRedBall.Camera.AbsoluteBottomYEdge">
            <summary>
            Returns the absolute Y value of the bottom edge of the visible area for this camera at Z = 0.
            </summary>
        </member>
        <member name="M:FlatRedBall.Camera.AbsoluteBottomYEdgeAt(System.Single)">
            <summary>
            Returns the bottom-most visible Y value at a given absolute Z value.
            The absoluteZ parameter is ignored if the camera has its Orthogonal = true (is 2D)
            </summary>
            <param name="absoluteZ">The absolute Z to use for determining the bottom-edge.</param>
            <returns>The furthest-bottom visible Y value at the given absolute Z.</returns>
        </member>
        <member name="P:FlatRedBall.Camera.AspectRatio">
            <summary>
            The width/height of the view of the camera
            </summary>
            <remarks>
            This determines the ratio of the width to height of the camera.  By default, the aspect ratio is 4/3,
            but this should be changed for widescreen monitors or in situations using multiple cameras.  For example, if
            a game is in split screen with a vertical split, then each camera will show the same height, but half the width.
            The aspect ratio should be 2/3.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Camera.Orthogonal">
            <summary>
            Returns whether the camera is using an orthogonal perspective. If true, the camera is 2D.
            </summary>
        </member>
        <member name="P:FlatRedBall.Camera.DrawsCameraLayer">
            <summary>
            Whether the camera draws its layers.
            </summary>
        </member>
        <member name="P:FlatRedBall.Camera.DrawsWorld">
            <summary>
            Whether the Camera draws world objects (objects not on the Camera's Layer). This is true by default.
            This is usually set to false for cameras used in render targets which only draw layers.
            </summary>
        </member>
        <member name="P:FlatRedBall.Camera.DrawsShapes">
            <summary>
            Whether the Camera draws shapes
            </summary>
        </member>
        <member name="M:FlatRedBall.Camera.FixAspectRatioYConstant">
            <summary>
            Sets the aspectRatio to match the width/height of the area that the camera is drawing to.
            </summary>
            <remarks>
            This is usually used in applications with split screen or when on a widescreen display.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Camera.IsEntityInView(FlatRedBall.PositionedObject,System.Single)">
            <summary>
            Checks if an Entity is within the Camera's boundaries.
            </summary>
            <param name="entity">The entity to check</param>
            <param name="buffer">A buffer zone to account for entity size on boundary check. Defaults to 0</param>
            <returns>Returns true in case it is inside the camera's boundaries, false otherwise</returns>
        </member>
        <member name="M:FlatRedBall.Camera.IsEntityInView(Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Checks if an object with Vector3 position is inside the Camera's boundaries.
            </summary>
            <param name="position">The position of the entity to check</param>
            <param name="buffer">A buffer zone to account for entity size on boundary check. Defaults to 0</param>
            <returns>Returns true in case it is inside the camera's boundaries, false otherwise</returns>
        </member>
        <member name="M:FlatRedBall.Camera.IsSpriteInView(FlatRedBall.Sprite,System.Boolean)">
            <summary>
            Returns whether the argument sprite is in view, considering the CameraCullMode. This will always return
            true if cull mode is set to None.
            </summary>
            <remarks>
            This method does not do a perfectly precise check of whether the Sprite is on screen or not, as such
            a check would require considering the Sprite's rotation. Instead, this uses approximations to avoid
            trigonometric functions, and will err on the side of returning true when a Sprite may actually be out
            of view.
            </remarks>
            <param name="sprite">The sprite to check in view</param>
            <param name="relativeToCamera">Whether the sprite's position is relative to the camera. This value may be true if the 
            sprite is on a Layer, and the Layer's RelativeToCamera value is true.</param>
            <returns>Whether the sprite is in view</returns>
            <seealso cref="P:FlatRedBall.Graphics.Layer.RelativeToCamera"/>
        </member>
        <member name="M:FlatRedBall.Camera.IsXInView(System.Double,System.Double)">
            <summary>
            Determines if the X value is in view, assuming the camera is viewing down the Z axis.
            </summary>
            <remarks>
            Currently, this method assumes viewing down the Z axis.
            </remarks>
            <param name="x">The absolute X position of the point.</param>
            <param name="absoluteZ">The absolute Z position of the point.</param>
            <returns></returns>
        </member>
        <member name="M:FlatRedBall.Camera.IsYInView(System.Double,System.Double)">
            <summary>
            Determines if the Y value is in view, assuming the camera is viewing down the Z axis.
            </summary>
            <remarks>
            Currently, this method assumes viewing down the Z axis.
            </remarks>
            <param name="y">The absolute Y position of the point.</param>
            <param name="absoluteZ">The absolute Z position of the point.</param>
            <returns></returns>
        </member>
        <member name="M:FlatRedBall.Camera.PixelsPerUnitAt(System.Single)">
            <summary>
            Returns the number of pixels per unit at the given absolute Z value.  Assumes
            that the Camera is unrotated.
            </summary>
            <remarks>
            If using the PixelsPerUnitAt for a rotated camera, use the overload which
            takes a Vector3 argument.
            </remarks>
            <param name="absoluteZ">The absolute Z position.</param>
            <returns>The number of pixels per world unit (perpendicular to the camera's forward vector).</returns>
        </member>
        <member name="M:FlatRedBall.Camera.UsePixelCoordinates(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Sets the camera to Orthogonal, sets the OrthogonalWidth and
            OrthogonalHeight to match the argument values, and can move the
            so the bottom-left corner of the screen is at the origin.
            </summary>
            <param name="moveCornerToOrigin">Whether the camera should be repositioned
            so the bottom left is at the origin.</param>
            <param name="desiredWidth">The desired unit width of the view.</param>
            <param name="desiredHeight">The desired unit height of the view.</param>
        </member>
        <member name="M:FlatRedBall.Camera.UsePixelCoordinates3D(System.Single)">
            <summary>
            Adjusts the camera's Z value so that 1 unit equals 1 pixel at the argument absolute Z value.
            Note that objects closer to the camera will appear bigger and objects further will appear smaller.
            This function assumes that Orthogonal is set to false.
            </summary>
            <param name="zToMakePixelPerfect">The absolute Z value to make pixel perfect.</param>
        </member>
        <member name="F:FlatRedBall.Camera.UpVector">
            <summary>
            A Vector3 representing the "Up" orientation. The camera will adjust its rotation so that this vector
            is up. This enables 3D games (such as first person shooters) to rotate the camera yet still have a natural-feeling
            up vector. 
            </summary>
        </member>
        <member name="F:FlatRedBall.Camera.mLightingEnabled">
            <summary>
            Whether or not lighting is enabled for this camera
            </summary>
        </member>
        <member name="P:FlatRedBall.Camera.ShouldRestrictViewportToResolution">
            <summary>
            Sets whether the Camera will prevent viewports from being larger than the resolution. This value defaults to true.
            </summary>
            <remarks>
            The purpose of this value is to prevent cameras from attempting to draw outside of the window's client bounds. A camera
            which has a viewport larger than the window client bounds will throw an exception. However, cameras (and layers) which render
            to a render target which is larger than the current window should be able to render to the full render target even if it is larger
            than the current window. Therefore, this value should be set to false if rendering to large render targets.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Camera.FieldOfView">
            <summary>
            The Y field of view of the camera in radians.  Field of view represents the 
            Y angle from the bottom of the screen to the top.
            </summary>
            <remarks>
            This modifies the xEdge and yEdge properties.  Default value is (float)Math.PI / 4.0f;
            </remarks>
        </member>
        <member name="P:FlatRedBall.Camera.Layer">
            <summary>
            A Camera-specific layer.  Objects on this layer will not appear
            in any other cameras.
            </summary>
            <remarks>
            This instance is automatically created when the Camera is instantiated.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Camera.MinimumX">
            <summary>
            The Minimum camera X (center). This is applied prior to rendering and will override attachment.
            </summary>
        </member>
        <member name="P:FlatRedBall.Camera.MinimumY">
            <summary>
            The Minimum camera Y (center). This is applied prior to rendering and will override attachment.
            </summary>
        </member>
        <member name="P:FlatRedBall.Camera.MaximumX">
            <summary>
            The maximum Camera X (center). This is applied prior to rendering and will override attachment.
            </summary>
        </member>
        <member name="P:FlatRedBall.Camera.MaximumY">
            <summary>
            The maximum Camera Y (center). This is applied prior to rendering and will override attachment.
            </summary>
        </member>
        <member name="P:FlatRedBall.Camera.OrthogonalWidth">
            <summary>
            The number of horizontal units shown by the camera when the camera has Orthogonal = true
            </summary>
            <remarks>
            Orthogonal values will not have any impact on rendering if Orthogonal is false.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Camera.OrthogonalHeight">
            <summary>
            The number of vertical units shown by the camera when the camera has Orthogonal = true 
            </summary>
            <remarks>
            Orthogonal values will not have any impact on rendering if Orthogonal is false.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Camera.#ctor">
            <summary>
            Creates a new camera instance. This camera will not be drawn by the engine until it is added
            through the SpriteManager.
            </summary>
        </member>
        <member name="M:FlatRedBall.Camera.AddLayer(FlatRedBall.Graphics.Layer)">
            <summary>
            Adds a layer to the Camera.  This method does not remove layers that already 
            exist in the SpriteManager.
            </summary>
            <param name="layerToAdd">The layer to add.</param>
        </member>
        <member name="M:FlatRedBall.Camera.AddSpriteToBillboard(FlatRedBall.Sprite)">
            <summary>
            Supplied sprites are billboarded using the camera's RotationMatrix.
            Only the main Camera can billboard sprites.
            </summary>
        </member>
        <member name="M:FlatRedBall.Camera.ClearBorders">
            <summary>
            Removes all visibility borders.
            <seealso cref="M:FlatRedBall.Camera.SetBordersAtZ(System.Single,System.Single,System.Single,System.Single,System.Single)"/>
            </summary>
        </member>
        <member name="M:FlatRedBall.Camera.KeepSpriteInScreen(FlatRedBall.Sprite)">
            <summary>
            Moves a Sprite so that it remains fully in the camera's view.
            </summary>
            <remarks>
            This method does not consider Sprite rotation, negative scale, or situations 
            when the camera is not looking down the Z axis.
            </remarks>
            <param name="sprite">The Sprite to keep in view.</param>
        </member>
        <member name="M:FlatRedBall.Camera.PositionRandomlyInView(FlatRedBall.Math.IPositionable,System.Single,System.Single)">
            <summary>
            Positiones the argument positionable randomly in camera between the argument bounds.
            </summary>
            <remarks>
            Assumes the camera is viewing down the Z plane - it is unrotated.
            </remarks>
            <param name="positionable">The object to reposition.</param>
            <param name="minimumDistanceFromCamera">The closest possible distance from the camera.</param>
            <param name="maximumDistanceFromCamera">The furthest possible distance from the camera.</param>
        </member>
        <member name="M:FlatRedBall.Camera.RemoveLayer(FlatRedBall.Graphics.Layer)">
            <summary>
            Removes the argument Layer from this Camera.  Does not empty the layer or
            remove contained objects from their respective managers.
            </summary>
            <param name="layerToRemove">The layer to remove</param>
        </member>
        <member name="M:FlatRedBall.Camera.SetBordersAtZ(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the visible borders when the camera is looking down the Z axis.
            </summary>
            <remarks>
            This sets visibility ranges for the camera.  That is, if the camera's maximumX is set to 100 at a zToSetAt of 
            0, the camera will never be able to see the point x = 101, z = 0.  The camera imposes these limitations 
            by calculating the actual minimum and maximum values according to the variables passed.  Also, 
            the camera keeps track of these visible limits and readjusts the mimimum and maximum values 
            when the camera moves in the z direction. Therefore, it is only necessary to set these 
            values once, and the camera will remeber that these are the visibility borders, regardless of 
            its position.  It is important to note that the visiblity borders can be violated if they are too 
            close together - if a camera moves so far back that its viewable area at the set Z is greater than 
            the set minimumX and maximumX range, the camera will show an area outside of this range.
            <seealso cref="M:FlatRedBall.Camera.ClearBorders"/>
            </remarks>
            <param name="minimumX">The minimum x value of the visiblity border.</param>
            <param name="minimumY">The minimum y value of the visiblity border.</param>
            <param name="maximumX">The maximum x value of the visiblity border.</param>
            <param name="maximumY">The maximum y value of the visiblity border.</param>
            <param name="zToSetAt">The z value of the plane to use for the visibility border.</param>
        </member>
        <member name="M:FlatRedBall.Camera.SetCameraTo(FlatRedBall.Camera)">
            <summary>
            Copies all fields from the argument to the camera instance.
            </summary>
            <remarks>
            This method will not copy the name, InstructionArray, or children PositionedObjects 
            (objects attached to the cameraToSetTo).
            </remarks>
            <param name="cameraToSetTo">The camera to clone.</param>
        </member>
        <member name="M:FlatRedBall.Camera.UsePixelCoordinates">
            <summary>
            Sets the camera to be 2D (far-away things do not get smaller) by
            setting Orthogonal to true and adjusts the OrthogonalWidth and OrthogonalHeight
            to match the pixel resolution. In other words, this makes 1 unit in game match 1 pixel on screen.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlatRedBall.Camera.SetSplitScreenViewport(System.Nullable{FlatRedBall.Camera.SplitScreenViewport})" -->
        <member name="M:FlatRedBall.Camera.CalculateMaxAndMins">
            <summary>
            Calculates the minimum and maximum X values for the camera based off of its
            base values (such as mBaseMaximumX) and its current view
            </summary>
        </member>
        <member name="M:FlatRedBall.Camera.UpdateDestinationRectangle">
            <summary>
            Updates the destination rectangle (for the viewport).  Also fixes the aspect ratio.
            </summary>
        </member>
        <member name="T:FlatRedBall.Content.AI.Pathfinding.LinkSave">
            <summary>
            An XML-Serializable object representing the state of a Link.
            </summary>
        </member>
        <member name="T:FlatRedBall.Content.AI.Pathfinding.PositionedNodeSave">
            <summary>
            Save class for the PositionedNode class.  This class is used in the
            .nntx (Node Network XML) file type.
            </summary>
        </member>
        <member name="P:FlatRedBall.Content.AnimationChain.AnimationChainListSave.ProjectFile">
            <summary>
            The relative master project file that this is a part of. For exxample, the Glue (.glux) file.
            This can be used by tools to provide additional functionality.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.AnimationChain.AnimationChainListSave.FileRelativeTextures">
            <summary>
            Whether files (usually image files) referenced by this object (and .achx) are
            relative to the .achx itself. If false, then file references will be stored as absolute. 
            If true, then file reference,s will be stored relative to the .achx itself. This value should
            be true so that a .achx can be moved to a different file system or computer and still
            have valid references.
            </summary>
        </member>
        <member name="M:FlatRedBall.Content.AnimationChain.AnimationChainListSave.FromAnimationChainList(FlatRedBall.Graphics.Animation.AnimationChainList)">
            <summary>
            Create a "save" object from a regular animation chain list
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.AnimationChain.AnimationChainSave.ParentFile">
            <summary>
            This is used if the AnimationChain actually comes from 
            a file like a .gif.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.AnimationChain.AnimationFrameSave.FlipHorizontal">
            <summary>
            Whether the texture should be flipped horizontally.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.AnimationChain.AnimationFrameSave.FlipVertical">
            <summary>
            Whether the texture should be flipped on the vertidally.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.AnimationChain.AnimationFrameSave.TextureName">
            <summary>
            Used in XML Serialization of AnimationChains - this should
            not explicitly be set by the user.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.AnimationChain.AnimationFrameSave.FrameLength">
            <summary>
            The amount of time in seconds the AnimationFrame should be shown for.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.AnimationChain.AnimationFrameSave.LeftCoordinate">
            <summary>
            The left coordinate in texture coordinates of the AnimationFrame.  Default is 0.
            This may be in UV coordinates or pixel coordinates.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.AnimationChain.AnimationFrameSave.RightCoordinate">
            <summary>
            The right coordinate in texture coordinates of the AnimationFrame.  Default is 1.
            This may be in UV coordinates or pixel coordinates.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.AnimationChain.AnimationFrameSave.TopCoordinate">
            <summary>
            The top coordinate in texture coordinates of the AnimationFrame.  Default is 0.
            This may be in UV coordinates or pixel coordinates.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.AnimationChain.AnimationFrameSave.BottomCoordinate">
            <summary>
            The bottom coordinate in texture coordinates of the AnimationFrame.  Default is 1.
            This may be in UV coordinates or pixel coordinates.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.AnimationChain.AnimationFrameSave.RelativeX">
            <summary>
            The relative X position of the object that is using this AnimationFrame.  This
            is only applied if the IAnimationChainAnimatable's UseAnimationRelativePosition is
            set to true.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.AnimationChain.AnimationFrameSave.RelativeY">
            <summary>
            The relative Y position of the object that is using this AnimationFrame.  This
            is only applied if the IAnimationChainAnimatable's UseAnimationRelativePosition is
            set to true.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.ContentManager.LoadFromGlobalIfExists">
            <summary>
            If true FlatRedBall will look for cached content in the Global content manager even if
            the ContentManager passed to the Load function is not Global. This defaults to true.
            </summary>
        </member>
        <member name="M:FlatRedBall.Content.ContentManager.AddDisposable(System.String,System.IDisposable)">
            <summary>
            Adds the argument disposable object to the content manager, to be disposed when the ContentManager Unload method is eventually called.
            </summary>
            <remarks>
            This method is used for objects which either need to be cached and obtained later (such as custom from-file content) or which
            is not usually referenced by its key but which does noeed to be disposed later (such as a RenderTarget2D).
            </remarks>
            <param name="disposableName">The name of the disposable, so that it can be retrieved later if needed.</param>
            <param name="disposable">The disposable object to be added for disposal upon Unload.</param>
        </member>
        <member name="M:FlatRedBall.Content.ContentManager.RemoveDisposable(System.IDisposable)">
            <summary>
            Removes an IDisposable from the ContentManager.  This method does not call Dispose on the argument Disposable.  It 
            must be disposed 
            </summary>
            <param name="disposable">The IDisposable to be removed</param>
        </member>
        <member name="T:FlatRedBall.Content.Instructions.AnimationSequenceSave">
            <summary>
            Save class which stores AnimationSequence information.
            </summary>
        </member>
        <member name="T:FlatRedBall.Content.Instructions.InstructionBlueprintListSave">
            <summary>
            A save class containing a list of InstructionSaves.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.Instructions.InstructionSetSave.mFileName">
            <summary>
            The file that this InstructionSetSave was deserialized from.
            </summary>
        </member>
        <member name="T:FlatRedBall.Content.Instructions.InstructionSetSaveList">
            <summary>
            An XML serializable list of InstructionSetSaves.
            </summary>
        </member>
        <member name="T:FlatRedBall.Content.Instructions.KeyframeSave">
            <summary>
            Save class for a Keyframe (A list of Instructions).
            </summary>
        </member>
        <member name="T:FlatRedBall.Content.Instructions.Reflection.MemberConditionSave`1">
            <summary>
            A savable class containing the information for a MemberCondition.
            </summary>
            <typeparam name="PropertyType">The type of the property to be compared.</typeparam>
        </member>
        <member name="T:FlatRedBall.Content.Instructions.TimedKeyframeListSave">
            <summary>
            A savable reference to a TimedKeyframe.  This does not actually store the contents
            of the TimedKeyframe; instead it stores a string reference.
            </summary>
        </member>
        <member name="T:FlatRedBall.Content.Math.Geometry.ShapeCollectionSave">
            <summary>
            A serializable class storing shape collection data. If saves as XML using the .schx file format, it 
            can be used by FlatRedBall tools.
            </summary>
        </member>
        <member name="M:FlatRedBall.Content.Math.Geometry.ShapeCollectionSave.FromFile(System.String)">
            <summary>
            Deserializes a file into a new ShapeCollectionSave and returns it.
            </summary>
            <param name="fileName">The absolute or relative file name. If the file name is relative, then the FileManager's RelativeDirectory will be used.</param>
            <returns>The newly-created ShapeCollectionSave.</returns>
        </member>
        <member name="T:FlatRedBall.Content.Math.Splines.SplineSave">
            <summary>
            A savable representation of a Spline.  This is used in SplineSaveLists.
            </summary>
        </member>
        <member name="T:FlatRedBall.Content.Math.Splines.SplineSaveList">
            <summary>
            Save class for lists of Splines. 
            </summary>
        </member>
        <member name="T:FlatRedBall.Content.Particle.ParticleBlueprintSave">
            <summary>
            Justin Johnson, 04/2015
            This only exists to keep existing emix files functional
            because texture path is stored in the sprite
            blueprint object. This should eventually 
            be retired.
            </summary>
        </member>
        <member name="T:FlatRedBall.Content.Particle.EmitterSaveBase">
            <summary>
            Base class for EmitterSave and EmitterSaveContent.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.Particle.EmitterSaveBase.FileName">
            <summary>
            Stores the source .emix file name.  This 
            is set if an EmitterSaveList is loaded from file.
            </summary>
        </member>
        <member name="M:FlatRedBall.Content.Particle.EmitterSaveList.GetReferencedFiles(FlatRedBall.IO.RelativeType)">
            <summary>
            Returns a List of files referenced by this.
            </summary>
            <param name="relativeType">Whether the files should be absolute or relative.</param>
            <returns>The list of referenced files.</returns>
        </member>
        <member name="T:FlatRedBall.Content.Saves.BitmapFontSave">
            <summary>
            Save class storing information for a BitmapFont.  
            </summary>
        </member>
        <member name="T:FlatRedBall.Content.Saves.TextSave">
            <summary>
            An XML Serializable class representing the state of a Text.
            </summary>
        </member>
        <member name="T:FlatRedBall.Content.Saves.TextSaveBase">
            <summary>
            Base class for TextSave and TextSaveContent.
            </summary>
        </member>
        <member name="T:FlatRedBall.Content.Scene.CameraSave">
            <summary>
            An XML serializable "Save" class which can be included in other Save classes to store Camera information.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.Scene.CameraSave.X">
            <summary>
            The absolute X position.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.Scene.CameraSave.Y">
            <summary>
            The absolute Y position.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.Scene.CameraSave.Z">
            <summary>
            The absolute Z position.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.Scene.CameraSave.Orthogonal">
            <summary>
            Whether the Camera is using an orthogonal projection matrix.  If this is false, the Camera is using a perspective projection matrix.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.Scene.CameraSave.OrthogonalHeight">
            <summary>
            The orthogonal height of the camera's view.  
            </summary>
        </member>
        <member name="M:FlatRedBall.Content.Scene.CameraSave.#ctor">
            <summary>
            Creates a new CameraSave.  This is used by the XmlSerializer when deserializing an XML.
            Usually CameraSaves are created using the FromCamera static method.
            </summary>
        </member>
        <member name="M:FlatRedBall.Content.Scene.CameraSave.FromCamera(FlatRedBall.Camera)">
            <summary>
            Creates a new CameraSave instance using members from the passed Camera argument.
            </summary>
            <param name="camera">The Camera to copy properties from.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlatRedBall.Content.Scene.CameraSave.SetCamera(FlatRedBall.Camera)" -->
        <member name="T:FlatRedBall.Content.SourceReferencingFile">
            <summary>
            Class that defines a source and destination file relationship.  This can be used
            by tools (such as Glue) which maintain the source/destination relationship between files.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.SourceReferencingFile.SourceFile">
            <summary>
            The source file - the file which will be built to create the destination.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.SourceReferencingFile.DestinationFile">
            <summary>
            The destination file - the file which will be created when the source is built.
            </summary>
        </member>
        <member name="M:FlatRedBall.Content.SourceReferencingFile.#ctor">
            <summary>
            Instantiates a new SourceReferencingFile instance.
            </summary>
        </member>
        <member name="M:FlatRedBall.Content.SourceReferencingFile.#ctor(System.String,System.String)">
            <summary>
            Instantiates a new SourceReferencingFile instance using the argument source and destination files.
            </summary>
            <param name="sourceFile">The source file name to use.</param>
            <param name="destinationFile">The destination file name to use.</param>
        </member>
        <member name="T:FlatRedBall.Content.SpriteEditorScene">
            <summary>
            This is the class that is serialized and deserialized to/from the XML file representing a scene.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.SpriteEditorSceneBase`4.DynamicSpriteList">
            <summary>
            DynamicSpriteList for compatability with FlatRedBall Managed DirectX.
            </summary>
            <remarks>
            The DynamicSpriteList and SpriteList will be combined into one list later
            in the content pipeline.
            </remarks>
        </member>
        <member name="T:FlatRedBall.Content.SpriteFrame.SpriteFrameSaveBase`1">
            <summary>
            Serves as the base class for SpriteFrameSave and SpriteFrameSaveContent.
            </summary>
            <typeparam name="T">The type of the ParentSprite.  This is generic because
            for SpriteFrameSave the generic type is SpriteSave, but for SpriteFrameSaveContent the
            generic type is SpriteSaveContent.</typeparam>
        </member>
        <member name="F:FlatRedBall.Content.SpriteFrame.SpriteFrameSaveBase`1.BorderSides">
            <summary>
            The BorderSides that this instance represents.
            </summary>
            <remarks>
            <seealso cref="T:FlatRedBall.ManagedSpriteGroups.SpriteFrame.BorderSides"/>
            </remarks>
        </member>
        <member name="F:FlatRedBall.Content.SpriteFrame.SpriteFrameSaveBase`1.ParentSprite">
            <summary>
            The SpriteSaveBase that stores most of the Properties for the SpriteSave.
            </summary>
            <remarks>
            The SpriteSaveBase is used as a storage of properties because nearly all of its
            properties are also used by SpriteFrames.  Therefore, to prevent a lot of copy/paste,
            this class is used to store properties.
            </remarks>
        </member>
        <member name="T:FlatRedBall.Content.SpriteGrid.SpriteGridSaveBase`1">
            <summary>
            Base class for SpriteGridSave and SpriteGridSaveContent.
            </summary>
            <typeparam name="T">The type of the blueprint.</typeparam>
        </member>
        <member name="F:FlatRedBall.Content.SpriteGrid.SpriteGridSaveBase`1.Axis">
            <summary>
            Specifies the grid to use.
            </summary>
            <remarks>
            If the grid is 'y', use an XY grid.  Otherwise an XZ.
            </remarks>
        </member>
        <member name="F:FlatRedBall.Content.SpriteGrid.SpriteGridSaveBase`1.Name">
            <summary>
            The name of the SpriteGridSave.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.SpriteGrid.SpriteGridSaveBase`1.mFileName">
            <summary>
            This is used by the content pipeline to know which directory to look in
            for Textures.  Otherwise this variable is unused.
            </summary>
        </member>
        <member name="T:FlatRedBall.Graphics.Particle.EmissionSettingsSave">
            <summary>
            Save class for the EmissionSettings class.  This class is used
            in the .emix (Emitter XML) file.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Particle.EmissionSettingsSave.Animate">
            <summary>
            Whether or not the emitted particle should automatically animate
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Particle.EmissionSettingsSave.AnimationChains">
            <summary>
            The animation chains to use for the particle animation
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Particle.EmissionSettingsSave.CurrentChainName">
            <summary>
            The chain that is currently animating
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Particle.EmissionSettingsSave.Texture">
            <summary>
            The particle texture.
            If animation chains are set, they should override this.
            </summary>
        </member>
        <member name="T:FlatRedBall.Graphics.Particle.EmissionSettings">
            <summary>
            Defines the state of Sprites immediately after being created by the containing Emitter.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Particle.EmissionSettings.VelocityRangeType">
            <summary>
            Sets the type of velocity to use.  This impacts which Velocity values are
            applied to emitted Sprites.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Particle.EmissionSettings.Animate">
            <summary>
            Whether or not the emitted particle should automatically animate
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Particle.EmissionSettings.AnimationChains">
            <summary>
            The animation chains to use for the particle animation
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Particle.EmissionSettings.AnimationChain">
            <summary>
            The currently set animation chain
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Particle.EmissionSettings.CurrentChainName">
            <summary>
            The chain that is currently animating
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Particle.EmissionSettings.Texture">
            <summary>
            The particle texture.
            If animation chains are set, they should override this.
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Particle.RangeType.Component">
            <summary>
            Each individual component (X, Y, Z) had an independent range.
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Particle.RangeType.Radial">
            <summary>
            The X and Y components are set according to a random angle spanning a full circle and a radial velocity or rate value.
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Particle.RangeType.Spherical">
            <summary>
            The X,Y,and Z components are set according to a random point on a full sphere and a radial velocity or rate value.
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Particle.RangeType.Wedge">
            <summary>
            The X and Y components are set according to a random angle within wedge values using a radial velocity or rate value.
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Particle.RangeType.Cone">
            <summary>
            The X, Y, and Z components are set according to a random point on a 
            </summary>
        </member>
        <member name="T:FlatRedBall.Graphics.Particle.Emitter">
            <summary>
            An emitter is an invisible object which can create one or more Sprites at a specific 
            rate or on a method call.
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Particle.Emitter.RemovalEventType.None">
            <summary>
            No removal event specified.
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Particle.Emitter.RemovalEventType.OutOfScreen">
            <summary>
            Particles will be removed when out of the screen.
            </summary>
            <remarks>
            This uses the camera's IsSpriteInView method.
            </remarks>
        </member>
        <member name="F:FlatRedBall.Graphics.Particle.Emitter.RemovalEventType.Alpha0">
            <summary>
            Particles will be removed when Alpha is 0
            </summary>
            <remarks>
            Setting the Alpha to 0 manually on a particle created by an emitter with this removal event will
            also remove the Sprite.
            </remarks>
        </member>
        <member name="F:FlatRedBall.Graphics.Particle.Emitter.RemovalEventType.Timed">
            <summary>
            Particles will be removed after a certain amount of time has passed after emission.  This value is set through the
            SecondsLasting property.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Particle.Emitter.BoundedEmission">
            <summary>
            If true, restricts this emitter to only emit when its EmissionBoundary is within the camera's view. This defaults to false, which means the emitter
            will ignore camera bounds when attempting to emit.
            </summary>
            <remarks>
            BoundedEmission can be used to improve the performance of your game, by reducing the number of off-screen particles which the engine has to manage.
            </remarks>
            <seealso cref="P:FlatRedBall.Graphics.Particle.Emitter.EmissionBoundary"/>
        </member>
        <member name="P:FlatRedBall.Graphics.Particle.Emitter.AreaEmission">
            <summary>
            Sets the area which defines where new particles can appear. 
            By default this is set to Point, which means
            emitted particles will appear at the Emitter's Position.
            </summary>
            <remarks>
            If the AreaEmission is set to Rectangle or Cube, then the ScaleX, ScaleY, and ScaleZ values are used.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Graphics.Particle.Emitter.TimedEmission">
            <summary>
            Controls whether emission occurs on a timer when calling TimedEmit.
            </summary>
            <remarks>
            This variable is only useful when calling TimedEmit. It enables code to call TimedEmit
            in one area and to control the emission variable in another.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Graphics.Particle.Emitter.SecondsLasting">
            <summary>
            Specifies the number of seconds that particles will remain on the screen and in memory.  This is only considered
            if the RemovalEvent is set to RemovalEventType.TIMED;
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Particle.Emitter.RemovalEvent">
            <summary>
            Specifies the type of logic to perform for removing the particle.
            </summary>
            <seealso cref="P:FlatRedBall.Graphics.Particle.Emitter.SecondsLasting"/>
        </member>
        <member name="M:FlatRedBall.Graphics.Particle.Emitter.Emit(FlatRedBall.SpriteList)">
            <summary>
            Emits particles as specified by the Emitter class
            </summary>
            <remarks>
            This method initiates one emission of particles.  The number of particles emitted
            depends on the numberPerEmission variable.  This method does not consider emission timing, and the time
            is not recorded for emission timing.  
            
            The argument SpriteList stores all Sprites which were emitted
            during the call.  The Sprites are added regularly, rather than in a one way relationship.  This enables
            modification of emitted particles after the method ends.  null can be passed as an argument
            if specific action is not needed for emitted particles.  Particles are automatically created
            through the SpriteManager as Particle Sprites.
            <seealso cref="M:FlatRedBall.Graphics.Particle.Emitter.TimedEmit"/>
            <seealso cref="M:FlatRedBall.SpriteManager.AddParticleSprite(Microsoft.Xna.Framework.Graphics.Texture2D)"/>
            
            </remarks>
            <param name="spriteList">The list of Sprites (which can be null) to add all Sprites created
            by this call.</param>
        </member>
        <member name="M:FlatRedBall.Graphics.Particle.Emitter.TimedEmit(FlatRedBall.SpriteList)">
            <summary>
            Checks if the emitter is ready to emit, and if so, performs an emit. This method will only emit if 
            TimedEmission is set to true. Emitters which have TimedEmission set to true will typically have TimedEmit
            called every frame.
            </summary>
            <param name="spriteList"></param>
        </member>
        <member name="T:FlatRedBall.Graphics.Particle.EmitterList">
            <summary>
            List of Emitters provoding shortcut methods for interacting with all contained Emittes.
            </summary>
            <remarks>
            This is the runtime object created when loading .emix files.
            </remarks>
        </member>
        <member name="T:FlatRedBall.Graphics.Animation.AnimationChain">
            <summary>
            Represents a collection of AnimationFrames which can be used to perform
            texture flipping animation on IAnimationChainAnimatables such as Sprites.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Animation.AnimationChain.FrameTime">
            <summary>
            Sets the frame time to every frame in the animation to the value. For example, assigning a FrameTime of .2 will make every frame in the animation last .2 seconds.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Animation.AnimationChain.LastFrame">
            <summary>
            Gets the last AnimationFrame of the AnimationChain or null if 
            there are no AnimationFrames.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Animation.AnimationChain.Name">
            <summary>
            The name of the AnimationChain.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Animation.AnimationChain.TotalLength">
            <summary>
            The total duration of the animation in seconds. This is obtained by adding the FrameTime of all contained frames.
            </summary>
        </member>
        <member name="M:FlatRedBall.Graphics.Animation.AnimationChain.#ctor">
            <summary>
            Creates an empty AnimationChain.
            </summary>
        </member>
        <member name="M:FlatRedBall.Graphics.Animation.AnimationChain.#ctor(System.Int32)">
            <summary>
            Creates a new AnimationChain with the argument capacity.
            </summary>
            <param name="capacity">Sets the initial capacity.  Used to reduce memory allocation.</param>
        </member>
        <member name="M:FlatRedBall.Graphics.Animation.AnimationChain.FindByName(System.String)">
            <summary>
            Searches for and returns the AnimationFrame with its Name matching
            the nameToSearchFor argument, or null if none are found.
            </summary>
            <param name="nameToSearchFor">The name of the AnimationFrame to search for.</param>
            <returns>The AnimationFrame with matching name, or null if none exists.</returns>
        </member>
        <member name="M:FlatRedBall.Graphics.Animation.AnimationChain.FrameToFrame(System.Int32,System.Int32)">
            <summary>
            Returns the shortest absolute number of frames between the two argument frame numbers.  This
            method moves forward and backward and considers looping.
            </summary>
            <param name="frame1">The index of the first frame.</param>
            <param name="frame2">The index of the second frame.</param>
            <returns>The positive or negative number of frames between the two arguments.</returns>
        </member>
        <member name="T:FlatRedBall.Graphics.Animation.AnimationChainList">
            <summary>
            A list of AnimationChains.
            </summary>
            <remarks>
            This class is often used by IAnimationChainAnimatables to store a list of
            AnimationChains.  Since the AnimationChainList provides a string indexer, it
            is common to get a reference to an AnimationChain by its name and set it as the
            IAnimationChainAnimatable's current AnimationChain.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Graphics.Animation.AnimationChainList.FileRelativeTextures">
            <summary>
            Gets and sets whether the AnimationChainList will save the 
            Texture2Ds that its AnimationFrames reference with names relative
            to the .achx.  Otherwise, this property is not used during runtime.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Animation.AnimationChainList.TimeMeasurementUnit">
            <summary>
            Gets or sets the TimeMeasurementUnit.  This defaults to TimeMeasurementUnit.Millisecond and
            should not be changed.  It is included for compatability with older versions of FlatRedBall.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Animation.AnimationChainList.Name">
            <summary>
            Gets and sets the intance's name.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Animation.AnimationChainList.Item(System.String)">
            <summary>
            Gets the AnimationChain by name.  Returns null if no AnimationChain is found.
            </summary>
            <param name="animationChainName">The name of the AnimationChain to return</param>
            <returns>Reference to the AnimationChain with the specified name.</returns> 
        </member>
        <member name="M:FlatRedBall.Graphics.Animation.AnimationChainList.#ctor">
            <summary>
            Instantiates a new AnimationChainList.
            </summary>
        </member>
        <member name="M:FlatRedBall.Graphics.Animation.AnimationChainList.#ctor(System.Int32)">
            <summary>
            Instantiates a new AnimationChainList.
            </summary>
            <param name="capacity">Sets the initial capacity to reduce memory allocation when subsequently calling Add.</param>
        </member>
        <member name="P:FlatRedBall.Graphics.Animation.AnimationController.Layers">
            <summary>
            The AnimationLayers which will be checked when Activity is called (usually every frame). The first layers in the list have the lowest priority, so 
            aniatmions should be added in order of least -> most.
            </summary>
        </member>
        <member name="M:FlatRedBall.Graphics.Animation.AnimationController.AddLayer">
            <summary>
            Instantiates a new layer and adds it to the Layers collection.
            </summary>
            <returns>The newly-created Layer.</returns>
        </member>
        <member name="T:FlatRedBall.Graphics.Animation.AnimationFrame">
            <summary>
            Stores information about one frame in a texture-flipping animation.
            </summary>
            <remarks>
            Includes
            information about which Texture2D to show, whether the Texture2D should be flipped,
            the length of time to show the Texture2D for, texture coordinates (for sprite sheets), and
            relative positioning.
            </remarks>
        </member>
        <member name="F:FlatRedBall.Graphics.Animation.AnimationFrame.Empty">
            <summary>
            Empty AnimationFrame.
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Animation.AnimationFrame.Texture">
            <summary>
            The texture that the AnimationFrame will show.
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Animation.AnimationFrame.FlipHorizontal">
            <summary>
            Whether the texture should be flipped horizontally.
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Animation.AnimationFrame.FlipVertical">
            <summary>
            Whether the texture should be flipped on the vertidally.
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Animation.AnimationFrame.TextureName">
            <summary>
            Used in XML Serialization of AnimationChains - this should
            not explicitly be set by the user.
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Animation.AnimationFrame.FrameLength">
            <summary>
            The amount of time in seconds the AnimationFrame should be shown for.
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Animation.AnimationFrame.LeftCoordinate">
            <summary>
            The left coordinate in texture coordinates of the AnimationFrame.  Default is 0. 
            This value is in texture coordinates, not pixels. A value of 1 represents the right-side
            of the texture.
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Animation.AnimationFrame.RightCoordinate">
            <summary>
            The right coordinate in texture coordinates of the AnimationFrame.  Default is 1.
            This value is in texture coordinates, not pixels. A value of 1 represents the right-side
            of the texture.
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Animation.AnimationFrame.TopCoordinate">
            <summary>
            The top coordinate in texture coordinates of the AnimationFrame.  Default is 0.
            This value is in texture coordinates, not pixels. A value of 1 represents the bottom
            of the texture;
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Animation.AnimationFrame.BottomCoordinate">
            <summary>
            The bottom coordinate in texture coordinates of the AnimationFrame.  Default is 1.
            This value is in texture coordinates, not pixels. A value of 1 represents the bottom
            of the texture;
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Animation.AnimationFrame.RelativeX">
            <summary>
            The relative X position of the object that is using this AnimationFrame.  This
            is only applied if the IAnimationChainAnimatable's UseAnimationRelativePosition is
            set to true.
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Animation.AnimationFrame.RelativeY">
            <summary>
            The relative Y position of the object that is using this AnimationFrame.  This
            is only applied if the IAnimationChainAnimatable's UseAnimationRelativePosition is
            set to true.
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Animation.AnimationFrame.ShapeCollectionSave">
            <summary>
            Shapes associated with this animation. This may be null, or it may contain any number of shapes which can be used
            for collision.
            </summary>
        </member>
        <member name="M:FlatRedBall.Graphics.Animation.AnimationFrame.#ctor">
            <summary>
            Creates a new AnimationFrame.
            </summary>
        </member>
        <member name="M:FlatRedBall.Graphics.Animation.AnimationFrame.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,System.Single)">
            <summary>
            Creates a new AnimationFrame.
            </summary>
            <param name="texture">The Texture2D to use for this AnimationFrame.</param>
            <param name="frameLength">The amount of time in seconds that this AnimationFrame will display for when 
            it is used in an AnimationChain.</param>
        </member>
        <member name="M:FlatRedBall.Graphics.Animation.AnimationFrame.#ctor(System.String,System.Single,System.String)">
            <summary>
            Creates a new AnimationFrame.
            </summary>
            <param name="textureName">The string name of the Texture2D to use for this AnimationFrame.
            This will be loaded through the content pipeline using the arugment contentManagerName.</param>
            <param name="frameLength">The amount of time in seconds that this AnimationFrame will display for when
            it is used in an AnimationChain.</param>
            <param name="contentManagerName">The content manager name to use when loading the Texture2D .</param>
        </member>
        <member name="M:FlatRedBall.Graphics.Animation.AnimationFrame.Clone">
            <summary>
            Creates a new AnimationFrame with identical properties.  The new AnimationFrame
            will not belong to the AnimationChain that this AnimationFrameBelongs to unless manually
            added.
            </summary>
            <returns>The new AnimationFrame instance.</returns>
        </member>
        <member name="M:FlatRedBall.Graphics.Animation.AnimationFrame.ToString">
            <summary>
            Returns a string representation of this.
            </summary>
            <returns>String representation of this.</returns>
        </member>
        <member name="T:FlatRedBall.Graphics.Animation.IAnimationChainAnimatable">
            <summary>
            Represents an object that can use AnimationChains for texture-flipping animation.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Animation.IAnimationChainAnimatable.Animate">
            <summary>
            Whether animation is currently turned on.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Animation.IAnimationChainAnimatable.AnimationChains">
            <summary>
            Gets all animations stored in this.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Animation.IAnimationChainAnimatable.AnimationSpeed">
            <summary>
            Gets and sets how fast AnimationChains will animate.  Default is 1.  A value
            of 2 will result in AnimationChains animating twice as fast.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Animation.IAnimationChainAnimatable.CurrentChainIndex">
            <summary>
            Gets and sets the index of the current AnimationChain.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Animation.IAnimationChainAnimatable.CurrentChain">
            <summary>
            Gets the current AnimationChain.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Animation.IAnimationChainAnimatable.CurrentChainName">
            <summary>
            Gets the name of the current AnimationChain or sets the current AnimationChain by name.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Animation.IAnimationChainAnimatable.CurrentFrameIndex">
            <summary>
            Gets and sets the current AnimationFrame index.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Animation.IAnimationChainAnimatable.JustChangedFrame">
            <summary>
            Gets whether the current AnimationFrame just changed this frame due to animation.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Animation.IAnimationChainAnimatable.JustCycled">
            <summary>
            Gets whether the current AnimationChain just cycled (looped) this frame due to animation.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Animation.IAnimationChainAnimatable.UseAnimationRelativePosition">
            <summary>
            Whether the current AnimationFrame's relative position values (RelativeX and RelativeY) are applied
            when animating.
            </summary>
        </member>
        <member name="M:FlatRedBall.Graphics.BatchForwardVectorSorter.Compare(FlatRedBall.Graphics.IDrawableBatch,FlatRedBall.Graphics.IDrawableBatch)">
            <summary>
            Larger comes first.
            </summary>
            <param name="first">The first instance.</param>
            <param name="second">The second instance.</param>
            <returns>-1 if the first comes first, 1 if the second comes first, 0 if they're equal.</returns>
        </member>
        <member name="P:FlatRedBall.Graphics.IDrawableBatch.X">
            <summary>
            The X value to use for sorting.  This does NOT affect the position
            of objects drawn by the DrawableBatch.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.IDrawableBatch.Y">
            <summary>
            The Y value to use for sorting.  This does NOT affect the position
            of objects drawn by the DrawableBatch.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.IDrawableBatch.Z">
            <summary>
            The Z value to use for sorting.  This does NOT affect the position
            of objects drawn by the DrawableBatch.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.IDrawableBatch.UpdateEveryFrame">
            <summary>
            Whether or not this batch should be updated
            </summary>
        </member>
        <member name="M:FlatRedBall.Graphics.IDrawableBatch.Draw(FlatRedBall.Camera)">
            <summary>
            Used to draw assets
            Batch is sorted by Z with sprites and text
            </summary>
            <param name="camera">The currently drawing camera</param>
        </member>
        <member name="M:FlatRedBall.Graphics.IDrawableBatch.Update">
            <summary>
            Used to update the drawable batch
            </summary>
        </member>
        <member name="M:FlatRedBall.Graphics.IDrawableBatch.Destroy">
            <summary>
            Used to destroy any assets that need to be destroyed
            </summary>
        </member>
        <member name="T:FlatRedBall.Graphics.EffectCache">
            <summary>
            Caches effects and effect parameters
            </summary>
        </member>
        <member name="M:FlatRedBall.Graphics.EffectCache.#cctor">
            <summary>
            Initializes parameter name strings
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.EffectCache.mCacheShared">
            <summary>
            Whether or not shared parameters should be cached
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.EffectCache.mEffect">
            <summary>
            The effect cached, if any
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.EffectCache.mFullEffectParameterCache">
            <summary>
            Caches all effect parameters for faster lookup, by effect
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.EffectCache.mFullParameterCache">
            <summary>
            Caches all effect parameters for faster lookup, by parameter name
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.EffectCache.mEffectCache">
            <summary>
            Caches all effects
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.EffectCache.mEffectParameterCache">
            <summary>
            Caches all enumerated effect parameters
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.EffectCache.CacheShared">
            <summary>
            Whether or not shared parameters should be cached
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.EffectCache.Effects">
            <summary>
            Gets a list of cached effects
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.EffectCache.Item(System.String)">
            <summary>
            Gets a list of parameters of the specified name
            </summary>
            <param name="name">The name of the parameters to retrieve</param>
            <returns>A list of parameters (or null if name not found)</returns>
        </member>
        <member name="P:FlatRedBall.Graphics.EffectCache.Item(FlatRedBall.Graphics.EffectCache.EffectParameterNamesEnum)">
            <summary>
            Retrieves all parameters of one of the standard types
            </summary>
            <param name="name">The name of the parameter</param>
            <returns>A list of parameters (or null if shared params aren't cached)</returns>
        </member>
        <member name="P:FlatRedBall.Graphics.EffectCache.Item(Microsoft.Xna.Framework.Graphics.Effect,System.String)">
            <summary>
            Gets a parameter in a specified effect
            </summary>
            <param name="effect">The effect</param>
            <param name="parameterName">The parameter name</param>
            <returns>The parameter, or null if either effect or parameter not found</returns>
        </member>
        <member name="M:FlatRedBall.Graphics.EffectCache.GetTechnique(Microsoft.Xna.Framework.Graphics.Effect,System.String)">
            <summary>
            Gets the specified technique from the specified effect, or null if no technique by that name exists
            </summary>
            <param name="effect">The effect</param>
            <param name="techniqueName">The name of the technique</param>
            <returns>The technique requested, or null if not found</returns>
        </member>
        <member name="M:FlatRedBall.Graphics.EffectCache.#ctor(Microsoft.Xna.Framework.Graphics.Effect,System.Boolean)">
            <summary>
            Caches an effect's parameters
            </summary>
            <param name="effect">The effect to cache</param>
            <param name="cacheShared">Whether or not shared parameters should be cached</param>
        </member>
        <member name="M:FlatRedBall.Graphics.EffectCache.CacheEffect(Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Adds an effect to the cache
            </summary>
            <param name="effect">The effect to cache</param>
        </member>
        <member name="M:FlatRedBall.Graphics.EffectCache.UpdateCache">
            <summary>
            Recreates the cache
            </summary>
        </member>
        <member name="M:FlatRedBall.Graphics.EffectCache.ValidateCache(System.Boolean)">
            <summary>
            Validates the cached model/effect to make sure it hasn't changed
            </summary>
            <param name="updateNow">Whether or not the cache should be updated if found invalid</param>
            <returns>Whether or not the cache was valid</returns>
        </member>
        <member name="F:FlatRedBall.Graphics.GenericEffect.mBasicEffect">
            <summary>
            Private members
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.GenericEffect.World">
            <summary>
            Properties inherited from the interfaces
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.GenericEffect.Effect">
            <summary>
            Class properties
            </summary>
        </member>
        <member name="M:FlatRedBall.Graphics.GenericEffect.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:FlatRedBall.Graphics.GenericEffect.BuildEffect">
            <summary>
            Builds the precedence table, determines 
            the effect
            </summary>
        </member>
        <member name="M:FlatRedBall.Graphics.GenericEffect.SetCurrentTechnique(System.String)">
            <summary>
            Sets the current technique to the one named.
            </summary>
            <param name="TechniqueName"></param>
        </member>
        <member name="M:FlatRedBall.Graphics.GenericEffect.GetEffect(System.Boolean)">
            <summary>
            Gets the internal effect
            </summary>
            <param name="ShouldSetParameters"> Should the parameters be set</param>
            <returns>The effect for this GenericEffect</returns>
        </member>
        <member name="M:FlatRedBall.Graphics.GenericEffect.GetEffectTechnique(System.String,System.Boolean)">
            <summary>
            Returns a technique based on the index provided. 
            Will set the parameters for this effect;
            </summary>
            <param name="TechniqueName">The index into the Technique List</param>
            <param name="ShouldSetParameters">Should we set the parameters</param>
            <returns>The EffectTechnique requested</returns>
        </member>
        <member name="M:FlatRedBall.Graphics.GenericEffect.GetCurrentTechnique(System.Boolean)">
            <summary>
            Get the current technique
            </summary>
            <param name="ShouldSetParameters"> Should we set the parameters this call</param>
            <returns> The current effect</returns>
        </member>
        <member name="M:FlatRedBall.Graphics.GenericEffect.DetermineEffect(System.Boolean)">
            <summary>
            Determine's which of the four shaders this instance will use
            </summary>
        </member>
        <member name="M:FlatRedBall.Graphics.GenericEffect.SetBasicEffectParameters">
            <summary>
            Set the parameters for Basic Shader
            </summary>
        </member>
        <member name="M:FlatRedBall.Graphics.GenericEffect.SetDualTextureEffectParameters">
            <summary>
            Sets the parameters for the dual texture effect
            </summary>
        </member>
        <member name="M:FlatRedBall.Graphics.GenericEffect.SetEnvironmentMapEffectParameters">
            <summary>
            Sets the parameters for the environment map effect
            </summary>
        </member>
        <member name="M:FlatRedBall.Graphics.GenericEffect.SetSkinningEffectParameters">
            <summary>
            Sets the parameters for the skinned effect
            </summary>
        </member>
        <member name="M:FlatRedBall.Graphics.GenericEffect.SetCommonParameters">
            <summary>
            Pass common information to the graphics device
            </summary>
        </member>
        <member name="M:FlatRedBall.Graphics.GenericEffect.Dispose">
            <summary>
            Destroy this object
            </summary>
        </member>
        <member name="M:FlatRedBall.Graphics.GenericEffect.EnableDefaultLighting">
            <summary>
            Needs to be implemented by the IEffectLight child
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.SortType.None">
            <summary>
            No sorting will be performed, objects will remain in the the same order that they've been added to their respective list
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.SortType.Z">
            <summary>
            Objects will sort by their Z value
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.SortType.ZSecondaryParentY">
            <summary>
            Objects will be sorted based on their Z value first. Objects with identical Z values will sort using their top parent Y values.
            </summary>
        </member>
        <member name="E:FlatRedBall.Graphics.GraphicsOptions.SizeOrOrientationChanged">
            <summary>
            Event raised when the resolution or orientation changes.
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.GraphicsOptions.TextureLoadingColorKey">
            <summary>
            The texture loading color key
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.GraphicsOptions.IsLoading">
            <summary>
            Set to true to suspend device reset while loading from file
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.GraphicsOptions.TextureFilter">
            <summary>
            Gets or sets the current texture filter. If SuspendDeviceReset has not been called then 
            this setter will immediately apply the texture filter.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.GraphicsOptions.ResolutionWidth">
            <summary>
            Sets the width of the backbuffer and resets the device
            Use SetResolution() to set both width and height simultaneously
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.GraphicsOptions.ResolutionHeight">
            <summary>
            Sets the height of the backbuffer and resets the device
            Use SetResolution() to set both width and height simultaneously
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.GraphicsOptions.BackgroundColor">
            <summary>
            Gets or sets the background color of all cameras
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.GraphicsOptions.IsFullScreen">
            <summary>
            Sets the display mode to full screen
            Use SetFullScreen() to set the full-screen resolution and full-screen simultaneously
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.GraphicsOptions.UseMultiSampling">
            <summary>
            Enables or disables multisampling
            </summary>
        </member>
        <member name="M:FlatRedBall.Graphics.GraphicsOptions.SetResolution(System.Int32,System.Int32)">
            <summary>
            Sets the resolution
            </summary>
            <param name="width">The new width</param>
            <param name="height">The new height</param>
        </member>
        <member name="M:FlatRedBall.Graphics.GraphicsOptions.SetFullScreen(System.Int32,System.Int32)">
            <summary>
            Sets the display mode to full-screen and sets the resolution
            </summary>
            <param name="width">The new width</param>
            <param name="height">The new height</param>
        </member>
        <member name="M:FlatRedBall.Graphics.GraphicsOptions.SuspendDeviceReset">
            <summary>
            Suspends the device reset when options are changed
            </summary>
        </member>
        <member name="M:FlatRedBall.Graphics.GraphicsOptions.ResumeDeviceReset">
            <summary>
            Resumes the device reset when options are changed
            </summary>
        </member>
        <member name="M:FlatRedBall.Graphics.GraphicsOptions.ResetDevice">
            <summary>
            Resets the device if the device is not currently rendering, if the graphics device is not null, and if 
            device resetting is not suspended.
            </summary>
        </member>
        <member name="M:FlatRedBall.Graphics.GraphicsOptions.SetPresentationParameters(Microsoft.Xna.Framework.Graphics.PresentationParameters@)">
            <summary>
            Sets the presentation parameters
            </summary>
            <param name="presentationParameters">The structure to set parameters in</param>
        </member>
        <member name="M:FlatRedBall.Graphics.GraphicsOptions.Save(System.String)">
            <summary>
            Save the graphics options to a file
            </summary>
            <param name="fileName">The file name of the graphics options file</param>
        </member>
        <member name="M:FlatRedBall.Graphics.GraphicsOptions.FromFile(System.String)">
            <summary>
            Load the graphics options from file
            </summary>
            <param name="fileName">The file name of the graphics options file</param>
        </member>
        <member name="T:FlatRedBall.Graphics.IColorable">
            <summary>
            Provides an interface for objects which can be have their appearance
            modified by alpha and color values using a variety of operations.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.IColorable.Alpha">
            <summary>
            The alpha value to use with the BlendOperation.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.IColorable.Red">
            <summary>
            The red value to use with the ColorOperation.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.IColorable.Green">
            <summary>
            The green value to use with the ColorOperation.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.IColorable.Blue">
            <summary>
            The blue value to use with the color operation.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.IColorable.AlphaRate">
            <summary>
            The rate of change of the alpha component in units per second.  A negative value will make the object disappear over time.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.IColorable.RedRate">
            <summary>
            The rate of change of the red component in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.IColorable.GreenRate">
            <summary>
            The rate of change of the green component in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.IColorable.BlueRate">
            <summary>
            The rate of change of the blue component in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.IColorable.ColorOperation">
            <summary>
            The color operation to perform using the color component values and 
            Texture (if available).
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.IColorable.BlendOperation">
            <summary>
            The blend operation to perform using the alpha component value and
            Texture (if available).
            </summary>
        </member>
        <member name="T:FlatRedBall.Graphics.IDestroyable">
            <summary>Provides a Destroy method, generally used by Glue generated classes</summary>
        </member>
        <member name="T:FlatRedBall.Graphics.IVisible">
            <summary>
            Interface for an object which has visibility control.
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.LayerCameraSettings.OrthogonalWidth">
            <summary>
            The orthogonal width to use when drawing this layer, if Orthogonal is true.
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.LayerCameraSettings.OrthogonalHeight">
            <summary>
            The orthogonal height to use when drawing this layer, if Orthogonal is true;
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.LayerCameraSettings.TopDestination">
            <summary>
            Sets the top destination for this Layer. 
            </summary>
            <remarks>
            By default, this value is set to -1, 
            which means that the Layer will use its parent Camera's destination. All four destination
            values must be greater than or equal to 0 to be applied. If any are less than -1, then the Camera's
            destination values are used.
            </remarks>
        </member>
        <member name="F:FlatRedBall.Graphics.LayerCameraSettings.BottomDestination">
            <summary>
            Sets the bottom destination for this Layer. Destination Y values increase when moving down the screen, so this value should be greater than TopDestination (if it is not -1).
            </summary>
            <remarks>
            By default, this value is set to -1, 
            which means that the Layer will use its parent Camera's destination. All four destination
            values must be greater than or equal to 0 to be applied. If any are less than -1, then the Camera's
            destination values are used.
            </remarks>
        </member>
        <member name="F:FlatRedBall.Graphics.LayerCameraSettings.LeftDestination">
            <summary>
            Sets the left destination for this Layer. 
            </summary>
            <remarks>
            By default, this value is set to -1, 
            which means that the Layer will use its parent Camera's destination. All four destination
            values must be greater than or equal to 0 to be applied. If any are less than -1, then the Camera's
            destination values are used.
            </remarks>
        </member>
        <member name="F:FlatRedBall.Graphics.LayerCameraSettings.RightDestination">
            <summary>
            Sets the right destination for this Layer. 
            </summary>
            <remarks>
            By default, this value is set to -1, 
            which means that the Layer will use its parent Camera's destination. All four destination
            values must be greater than or equal to 0 to be applied. If any are less than -1, then the Camera's
            destination values are used.
            </remarks>
        </member>
        <member name="T:FlatRedBall.Graphics.Layer">
            <summary>
            Layers are objects which can contain other graphical objects for drawing.  Layers
            are used to create specific ordering and can be used to override depth buffer and
            z-sorted ordering.
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Layer.mSprites">
            <summary>
            List of Sprites that belong to this layer.  Sprites should be added
            through SpriteManager.AddToLayer or the AddSprite overloads which 
            include a Layer argument.
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Layer.mOverridingFieldOfView">
            <summary>
            Used by the Renderer to override the camera's FieldOfView
            when drawing the layer.  This can be used to give each layer
            a different field of view.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Layer.Batches">
            <summary>
            The Batches referenced by and drawn on the Layer.
            </summary>
            <remarks>
            The Layer stores a regular IDrawableBatch PositionedObjectList
            internally.  Since this internal list is used for drawing
            the layer the engine sorts it every frame.  
            
            For efficiency purposes the internal IDrawableBatch PositionedObjectList
            cannot be sorted.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Graphics.Layer.LayerCameraSettings">
            <summary>
            Stores values which are used to override the camera's properties when this Layer is rendered. By default
            this is null, indicating the Layer should match the Camera view.
            </summary>
            <remarks>
            A new instance of LayerCameraSettings will be assigned if the UsePixelCoordiantes is called.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Graphics.Layer.RelativeToCamera">
            <summary>
            Controls whether all objects on this layer are drawn relative to the camera. If this value is true, then objects
            with a position of 0,0 will be positioned at the center of the camera. This value is false by default, which means
            objects on this layer will be positioned relative to world coordinates.
            </summary>
            <remarks>
            Setting this value to true is an alternative to attaching all objects to the camera. Using this value has a number of
            benefits:
             - It removes the overhead of attachment if dealing with a large number of objects
             - It removes "jittering" which can occur when attaching to a rotating camera
            </remarks>
        </member>
        <member name="P:FlatRedBall.Graphics.Layer.Sprites">
            <summary>
            The Sprites referenced by and drawn on the Layer.
            </summary>
            <remarks>
            The Layer stores a regular SpriteList internally.  Since
            this internal list is used for drawing the layer the engine
            sorts it every frame.  
            </remarks>
        </member>
        <member name="P:FlatRedBall.Graphics.Layer.Texts">
            <summary>
            The Texts referenced by and drawn on the Layer.
            </summary>
            <remarks>
            The Layer stores a regular Text PositionedObjectList
            internally.  Since this internal list is used for drawing 
            the layer the engine sorts it every frame.  
            
            For efficiency purposes the internal Text PositionedObjectList 
            cannot be sorted.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Graphics.Layer.SortType">
            <summary>
            The SortType used for visible objects placed on this layer.
            Only objects on this layer will use this sort type. Each layer
            can have its own sort type, and unlayered visible objects will use
            the SpriteManager.OrderedSortType SortType.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Layer.Visible">
            <summary>
            Whether the SpriteLayer is visible.
            </summary>
            <remarks>
            This does not set the contained Sprite's visible value to false.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Graphics.Layer.RenderTarget">
            <summary>
            The render target to render to. If this is null (default), then the layer
            will render to whatever render target has been set before FlatRedBall's drawing
            code starts. If this is non-null, then the layer will render to the RenderTarget.
            If multiple layers use the same RenderTarget, they will all render to it without clearing
            it.
            </summary>
            <remarks>
            If a Layer uses a RenderTarget, it will clear the render target if:
            - It is the UnderAll layer
            - It is the first Layer on a camera
            - It uses a different RenderTarget than the previous Layer.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Graphics.Layer.AddManualSpriteOneWay(FlatRedBall.Sprite)">
            <summary>
            Directly adds a sprite to the sprite list for this layer.
            This is faster than using the SpriteManager.AddToLayer method
            but does no automatic updating and performs a one way add.
            </summary>
            <param name="spriteToAdd">The sprite to be added.</param>
        </member>
        <member name="M:FlatRedBall.Graphics.Layer.Remove(FlatRedBall.Sprite)">
            <summary>
            Removes the argument Sprite from being drawn on this Layer. Note that this does not
            remove the sprite from the SpriteManager. This method can be used to move a Sprite from
            one layer to another.
            </summary>
            <param name="spriteToRemove">The Sprite to remove from this layer.</param>
        </member>
        <member name="M:FlatRedBall.Graphics.Layer.UsePixelCoordinates">
            <summary>
            Instantiates a new LayerCameraSettings object to store pixel-perfect values.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.RenderBreak.Details">
            <summary>
            Debug only: Returns detailed information about this render break.
            </summary>
        </member>
        <member name="T:FlatRedBall.Graphics.RenderMode">
            <summary>
            Rendering modes available in FlatRedBall
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.RenderMode.Default">
            <summary>
            Default rendering mode (uses embedded effects in models)
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.RenderMode.Color">
            <summary>
            Color rendering mode - renders color values for a model
            (does not include lighting information)
            Effect technique: RenderColor
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.RenderMode.Normals">
            <summary>
            Normals rendering mode - renders normals
            Effect technique: RenderNormals
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.RenderMode.Depth">
            <summary>
            Depth rendering mode - renders depth
            Effect technique: RenderDepth
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.RenderMode.Position">
            <summary>
            Position rendering mode - renders position
            Effect technique: RenderPosition
            </summary>
        </member>
        <member name="T:FlatRedBall.Graphics.Renderer">
            <summary>
            Static class responsible for drawing/rendering content to the cameras on screen.
            </summary> 
            <remarks>This class is called by <see cref="M:FlatRedBall.FlatRedBallServices.Draw"/></remarks>
        </member>
        <member name="P:FlatRedBall.Graphics.Renderer.Camera">
            <summary>
            Gets the default Camera (SpriteManager.Camera)
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Renderer.Cameras">
            <summary>
            Gets the list of cameras (SpriteManager.Cameras)
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Renderer.CurrentLayer">
            <summary>
            Returns the Layer currently being rendered.  Can be used in
            IDrawableBatches and debug code.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Renderer.RecordRenderBreaks">
            <summary>
            Tells the renderer to record and keep track of render breaks so they
            can be used when optimizing rendering. This value defaults to false
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Renderer.LastFrameRenderBreakList">
            <summary>
            Contains the list of Render Breaks from the previous frame. This is updated every time
            FlatRedBall is drawn.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Renderer.ColorOperation">
            <summary>
            Sets the color operation on the graphics device if the set value differs from the current value.
            This is public so that IDrawableBatches can set the color ops.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Renderer.BlendOperation">
            <summary>
            Sets the blend operation on the graphics device if the set value differs from the current value.
            If the two values are the same, then the property doesn't do anything.
            </summary>
        </member>
        <member name="M:FlatRedBall.Graphics.Renderer.DrawQuad(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Draws a quad
            The effect must already be started
            </summary>
        </member>
        <member name="M:FlatRedBall.Graphics.Renderer.DrawFullScreenQuad">
            <summary>
            Draws a full-screen quad
            The effect must already be started
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Text.DisplayText">
            <summary>
            Gets or sets the string that the Text object is to display.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Text.AdjustedText">
            <summary>
            Returns the strin that the Text object will render.  This considers 
            the MaxWidth and MaxWidthBehavior variables, meaning it may contain newlines.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Text.HorizontalCenter">
            <summary>
            Returns the center of the text object.
            </summary>
            <remarks>
            If the text is centered (the format.alignment equals TextManager.Alignment.CENTER),
            this will simply return the x value of the text.  Otherwise, this property
            calculates the center of the text based on the contained string, the format, whether
            the text uses 3D fonts, and the x position of the text.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Graphics.Text.AlphaRate">
            <summary>
            The rate of change of the alpha component in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Text.NumberOfLines">
            <summary>
            Returns the number of lines in the text object.
            </summary>
            <remarks>
            This currently reports the number of lines only when the text
            object is using a bitmap font.  3D text does not use the newline
            character.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Graphics.Text.MaxWidth">
            <summary>
            The maximum width of the text in world units.  This modifies the DisplayedText property.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Text.ScaleX">
            <summary>
            Returns the distance from the center of the Text object to the edge;
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Text.VerticalCenter">
            <summary>
            Returns the vertical center of the text.
            </summary>
            <remarks>
            Since the y value of text marks either the top or bottom of the Text
            depending on vertical alignment, this value can be useful for finding
            the Text's center.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Graphics.Text.Clone">
            <summary>
            Creates a new Text object.
            </summary>
            <returns>
            Reference to the new Text object.  The object will not 
            be in the TextManager's memory.
            </returns>
        </member>
        <member name="M:FlatRedBall.Graphics.Text.SetColor(System.Single,System.Single,System.Single)">
            <summary>
            Set the RGB properties of this all at once. 0,0,0 is Black, 1,1,1 is White.
            </summary>
            <param name="red">0 to 1</param>
            <param name="green">0 to 1</param>
            <param name="blue">0 to 1</param>
        </member>
        <member name="M:FlatRedBall.Graphics.Text.SetPixelPerfectScale(FlatRedBall.Camera)">
            <summary>
            Sets the Scale and Spacing such that the Text is drawn pixel-perfect at its given Z position.
            </summary>
            <param name="camera">Reference to the camera to use when calculating the Scale and Spacing.</param>
        </member>
        <member name="M:FlatRedBall.Graphics.Text.SetPixelPerfectScale(FlatRedBall.Graphics.Layer)">
            <summary>
            Sets the Scale and Spacing such that the Text is drawn pixel-perfect at the given Z position.
            This method obeys the Layer's overridden field of view if it uses one.
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:FlatRedBall.Graphics.Text.UpdateDisplayedText">
            <summary>
            Updates the displayed text according to the MaxWidth.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Text.ContentManager">
            <summary>
            The ContentManager used to store
            textures generated by the Text.  This
            is required for proper cleanup.
            </summary>
        </member>
        <member name="M:FlatRedBall.Graphics.TextManager.AddText(System.String,FlatRedBall.Camera)">
            <summary>
            Creates a new Text with the argument string which will only be drawn in the argument Camera's
            destination.
            </summary>
            <remarks>
            The new text will be stored both by the camera and the TextManager's managed invisible Texts array.
            The text is automatically attached to the argument Camera so to be moved, it must either
            be detached or moved with relative variables.
            </remarks>
            <param name="s">The string to show.</param>
            <param name="cameraToAddTo">The camera that the newly created Text belongs to.</param>
            <returns>Reference to the newly created Text.</returns>
        </member>
        <member name="M:FlatRedBall.Graphics.TextManager.AddText(FlatRedBall.Graphics.Text,FlatRedBall.Camera)">
            <summary>
            Adds an already-created Text instance to the argument camera.
            </summary>
            <remarks>
            The argument Text should not already be in the TextManager's memory when this
            method is called.
            </remarks>
            <param name="textToAdd">Reference to the text object to add.</param>
            <param name="cameraToAddTo">Reference to the camera to be added to.</param>
            <returns>The added text.</returns>
        </member>
        <member name="M:FlatRedBall.Graphics.TextManager.AddManuallyUpdated(FlatRedBall.Graphics.Text,FlatRedBall.Graphics.Layer)">
            <summary>
            Adds a text object to the TextManager to be drawn, but which will not have
            its every-frame activity called.
            </summary>
            <param name="text">The text to add.</param>
            <param name="layerToAddTo">The optional layer to add to. If null, the Text will be unlayered.</param>
            <remarks>Texts added with AddManuallyUpdated will not be visible unless they have
            their UpdateDependencies or ForceUpdateDependencies called after all properties have been assigned.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Graphics.TextManager.GetWidth(System.String)">
            <summary>
            Returns the width of the rendered text assuming the spacing is 1.
            </summary>
            <remarks>
            If there are newline characters in the string, GetWidth returns the width of the longest line.
            Spaces are considered characters as well so "Hello " will be longer than "Hello".
            </remarks>
            <param name="text">The text to measure.</param>
            <returns>The width of the longest line in the text.</returns>
        </member>
        <member name="T:FlatRedBall.Graphics.Texture.RenderTargetSprite">
            <summary>
            A Sprite-inheriting object which can reference one or more Layers to use as "input". The input
            will be rendered and stored on a Texture2D for the Sprite. This provides the ability to improve rendering
            speed of complex objects by rendering to a Texutre2D one time. It also provides additional support for transformations,
            such as rotating a collection of objects.
            </summary>
        </member>
        <member name="M:FlatRedBall.Graphics.Texture.RenderTargetSprite.#ctor(System.String,System.String)">
            <summary>
            Instantiates a new RenderTargetSprite with a render target matching the spriteName belonging
            to the argument ContentManagerName
            </summary>
            <param name="contentManagerName">The content manager name which the RenderTarget should belong to. This
            is used to dispose the RenderTarget, and will usually match the current screen's content manager name.</param>
            <param name="spriteName">The name of the Sprite, which is shared with the render target. This is required </param>
        </member>
        <member name="M:FlatRedBall.Graphics.Texture.RenderTargetSprite.Refresh">
            <summary>
            Renders all objects contained in this instance's DefaultInputLayer and additionally added input layers
            to the internally referenced Sprite. This can be called every frame, or it can be called only when the internal
            objects change. Refresh should be called at least one time, or the render target may contain unexpected content.
            </summary>
        </member>
        <member name="M:FlatRedBall.Graphics.Texture.RenderTargetSprite.AddInputLayer(FlatRedBall.Graphics.Layer)">
            <summary>
            Adds a Layer to be rendered by the RenderTargetSprite above all previously added Layers and above the DefaultInputLayer.
            If the argument layer is part of the SpriteManager, it will be removed.
            </summary>
            <param name="layer">The Layer to use as an input layer on this RenderTargetSprite.</param>
        </member>
        <member name="M:FlatRedBall.Graphics.Texture.ImageData.#ctor(System.Int32,System.Int32,System.Byte[])">
            <summary>
            Constructs a new ImageData object of the given width and height with the argument data stored as a byte array.
            </summary>
            <param name="width">Width of the image data</param>
            <param name="height">Height of the image data</param>
            <param name="data">Data as a byte array</param>
        </member>
        <member name="M:FlatRedBall.Graphics.Texture.ImageData.RemoveRow(System.Int32)">
            <summary>
            Removes the index row from the contained data.  Row 0 is the top of the texture.
            </summary>
            <param name="rowToRemove">The index of the row to remove.  Index 0 is the top row.</param>
        </member>
        <member name="P:FlatRedBall.Entities.CameraControllingEntity.BehaviorType">
            <summary>
            Defines the behavior of the camera when determining its target position. 
            Currently it always performs PositionLocking, but additional types of bhehavior may be added in the future.
            </summary>
        </member>
        <member name="P:FlatRedBall.Entities.CameraControllingEntity.Targets">
            <summary>
            The target PositionedObjects to follow. In a single-player game this can be one entity. In a multi-player game, this can 
            be all players. The camera will average their position and follow the average.
            </summary>
        </member>
        <member name="P:FlatRedBall.Entities.CameraControllingEntity.Target">
            <summary>
            Sets a single target for following. If Targets has been previously set, this changes
            the Targets to a new list.
            </summary>
            <remarks>
            If the target is an Entity, then the entity is destroyed, it will be removed as the CameraControllingEntity target.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Entities.CameraControllingEntity.Map">
            <summary>
            The level map. If null, the camera will move without bounds. If set, the camera will not view positions outside of the map.
            </summary>
        </member>
        <member name="P:FlatRedBall.Entities.CameraControllingEntity.ExtraMapPadding">
            <summary>
            Extra padding which can be used to add a buffer between the edge of the actual map and the
            desired visible edge. A positive value adds padding, effective shrinking the available area
            that the camera can view. A negative value allows the camera to move outside of the map.
            </summary>
        </member>
        <member name="P:FlatRedBall.Entities.CameraControllingEntity.LerpSmooth">
            <summary>
            Whether to smoothly approach the target location. If false, the camera follows the entity without any smoothing.
            </summary>
        </member>
        <member name="P:FlatRedBall.Entities.CameraControllingEntity.LerpCoefficient">
            <summary>
            The amount of smoothing. The larger the number, the longer the camera takes to smooth. This value is ignored if LerpSmooth is false.
            </summary>
            <remarks>
            Mathematically this is the velocity value per pixel offset from the target. For example, if this value is 5, and the target is 20 pixels away,
            then the velocity of the camera will be 20*5 = 100.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Entities.CameraControllingEntity.SnapToPixel">
            <summary>
            Whether to snap the camera position to the screen pixel. This value can be used to prevent half-pixels from being drawn.
            </summary>
        </member>
        <member name="P:FlatRedBall.Entities.CameraControllingEntity.SnapToPixelOffset">
            <summary>
            The offset to apply when snapping to pixel. This can be used to improve rendering depending on the pixel that is sampled by graphics cards.
            </summary>
            <remarks>
            This value has only been tested on a limited number of devices/games. It's not clear if this should be a fixed value, or if it should depend
            </remarks>
        </member>
        <member name="P:FlatRedBall.Entities.CameraControllingEntity.IsActive">
            <summary>
            Whether to perform logic in the Activity call. This exists to allow control over whether Activity
            should apply if Activity is called in generated code. This can be set to false to manually override
            the camera following behavior.
            </summary>
        </member>
        <member name="M:FlatRedBall.Entities.CameraControllingEntity.GetTarget">
            <summary>
            Returns the desired position of the camera (X and Y) given the position of all Targets and the bounds of the camera.
            </summary>
            <returns>The target X and Y of the camera.</returns>
        </member>
        <member name="T:FlatRedBall.ServiceContainer">
            <summary>
            Container class implements the IServiceProvider interface. This is used
            to pass shared services between different components, for instance the
            ContentManager uses it to locate the IGraphicsDeviceService implementation.
            </summary>
        </member>
        <member name="F:FlatRedBall.FlatRedBallServices.mEncryptionKey">
            <remarks>
            This is *NOT* secure, keys in code can easily be obtained by disassembling the game.
            </remarks>
        </member>
        <member name="P:FlatRedBall.FlatRedBallServices.ClientWidth">
            <summary>
            The height of the entire drawable area of the game window.
            </summary>
        </member>
        <member name="P:FlatRedBall.FlatRedBallServices.ClientHeight">
            <summary>
            The width of the entire drawable area of the game window.
            </summary>
        </member>
        <member name="P:FlatRedBall.FlatRedBallServices.EncryptionSaltValue">
            <summary>
            Salt value that is combined with the EncryptionKey string for generating encryption keys
            </summary>
        </member>
        <member name="P:FlatRedBall.FlatRedBallServices.EncryptionKey">
            <summary>
            Password to use for decrypting files (set this to the appropriate value before attempting to load any CSV files that were encrypted in the content pipeline)
            </summary>
        </member>
        <member name="M:FlatRedBall.FlatRedBallServices.InitializeCommandLine(Microsoft.Xna.Framework.Game)">
            <summary>
            Used to initialize FlatRedBall without rendering anything to the screen
            </summary>
            <param name="game">The game</param>
        </member>
        <member name="M:FlatRedBall.FlatRedBallServices.InitializeFlatRedBall(Microsoft.Xna.Framework.Game,Microsoft.Xna.Framework.GraphicsDeviceManager)">
            <summary>
            Used to initialize FlatRedBall with a game
            </summary>
            <param name="game">The game</param>
            <param name="graphics">The graphics device manager</param>
        </member>
        <member name="M:FlatRedBall.FlatRedBallServices.InitializeFlatRedBall(Microsoft.Xna.Framework.Game,Microsoft.Xna.Framework.GraphicsDeviceManager,FlatRedBall.Graphics.GraphicsOptions)">
            <summary>
            Used to initialize FlatRedBall with a game and graphics options
            </summary>
            <param name="game">The game</param>
            <param name="graphics">The graphics device manager</param>
            <param name="graphicsOptions">The graphics options to use for this game</param>
        </member>
        <member name="M:FlatRedBall.FlatRedBallServices.InitializeFlatRedBall(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService,System.IntPtr)">
            <summary>
            Used to intialize FlatRedBall without a game object (e.g. in windows forms projects)
            </summary>
            <param name="graphics">The graphics device service</param>
            <param name="windowHandle">The window handle</param>
        </member>
        <member name="M:FlatRedBall.FlatRedBallServices.InitializeFlatRedBall(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService,System.IntPtr,FlatRedBall.Graphics.GraphicsOptions)">
            <summary>
            Used to intialize FlatRedBall without a game object (e.g. in windows forms projects) and with graphics options
            </summary>
            <param name="graphics">The graphics device service</param>
            <param name="windowHandle">The window handle</param>
            <param name="graphicsOptions">The graphics options</param>
        </member>
        <member name="M:FlatRedBall.FlatRedBallServices.FinishInitialization(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)">
            <summary>
            Basic initialization steps (commond to all initialization methods)
            </summary>
        </member>
        <member name="M:FlatRedBall.FlatRedBallServices.Unload(System.String)">
            <summary>
            Unloads all content contained in the content manager with name matching the parameter contentManagerName.
            </summary>
            <param name="contentManagerName">The content manager to remove.</param>
        </member>
        <member name="M:FlatRedBall.FlatRedBallServices.Clean">
            <summary>
            Removes any cached objects which may be storing references to disposed textures. This must be 
            called if unloading a content manager without clearing FRB objects. Normally this happens on a screen
            transition so this doesn't need to be explicitly called.
            </summary>
        </member>
        <member name="M:FlatRedBall.FlatRedBallServices.ReplaceFromFileTexture2D(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.Texture2D,System.String)">
            <summary>
            Attempts to replace the texture. Will only work if the texture is loaded from file.
            </summary>
            <param name="oldTexture">Reference to the old texture</param>
            <param name="newTexture">Reference to the new texture</param>
            <param name="contentManagerName">The name of the content manager containing the texture</param>
        </member>
        <member name="M:FlatRedBall.FlatRedBallServices.UpdateDependencies">
            <summary>
            Calls UpdateDependencies on all contained managers.
            </summary>
        </member>
        <member name="T:FlatRedBall.Gui.Controls.ISelectable">
            <summary>
            An object which can be selected, such as a text box which can be be selected
            to receive input, or a button which can be selected when tabbing through a list
            of buttonsn to recieve the click event by pressing the Enter key.
            </summary>
        </member>
        <member name="T:FlatRedBall.Gui.Cursor">
            <summary>
            The cursor is a controllable graphical icon which can interact with FRB elements and
            stores information about mouse activity.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Cursor.mWindowSecondaryPushed">
            <summary>
            The window that the cursor was over when the mouse button was pressed.
            </summary>
            <remarks>
            When the secondary (right) mouse button is pushed down, this value is set - either to null 
            if the mouse is not over any Windows or to the Window that the mouse is over.  
            When the secondary mouse button is released (clicked), this value is set to null.  
            This value is useful for clicking on Windows.  Specifically, when the cursor is clicked
            on a Button, the WindowPushed value is tested to make sure that it is the same as 
            the Window clicked on.  This allows for players to push on a Button but move 
            the mouse away and click elsewhere without clicking on the Button originally 
            pushed and without accidentally clicking on other Buttons.  This is also used
            with ToggleButtons to control when they are pressed and unpressed.
            </remarks>
        </member>
        <member name="F:FlatRedBall.Gui.Cursor.StaticPosition">
            <summary>
            If this value is true, the Cursor will not move in response to the mouse or gamepad.
            </summary>
            <remarks>
            This value can be set to true if the Cursor should not move in response to input.
            The staticPosition value is only used by the engine when over the button on an UpDown.  When pushing down
            on an UpDown button, the staticPosition is set to true, and set to false when releasing the mouse button.
            </remarks>
        </member>
        <member name="F:FlatRedBall.Gui.Cursor.WindowGrabbed">
            <summary>
            The window that the cursor has grabbed.
            </summary>
            <remarks>
            When the mouse button is released, the windowGrabbed reference is set to null.  If a Window is grabbed, it will
            move as the mouse moves.  This is used commonly for dragging on menu bars and scroll bars.  The cursor does
            not recognize which types of Windows can be dragged, so windows must be grabbed through the Cursor.GrabWindow
            method.  The windowGrabbed's onDrag event is fired every frame.
            </remarks>
        </member>
        <member name="F:FlatRedBall.Gui.Cursor.mObjectGrabbed">
            <summary>
            Storage for reference to a grabbed object.
            </summary>
            <remarks>
            This variable has no internal engine functionality.  It merely provies a place to store a reference
            to a grabbed Object - useful in graphical applications where the Cursor can grab and move objects such
            as Sprites or Text objects.
            The ObjectGrabbedRelativeX and ObjectGrabbedRelativeY can also be set to keep the object static after a click rather than
            "snapping" its center to the Cursor's tip.
            <seealso cref="M:FlatRedBall.Gui.Cursor.SetObjectRelativePosition(FlatRedBall.Math.IStaticPositionable)"/>
            </remarks>
        </member>
        <member name="F:FlatRedBall.Gui.Cursor.ObjectGrabbedRelativeX">
            <summary>
            The relative x position of a grabbed object from the center of the cursor.
            </summary>
            <remarks>
            This value can be set through the SetObjectRelativePosition.  
            This value used in the GetCursorPositionForSprite method.
             <seealso cref="M:FlatRedBall.Gui.Cursor.GetCursorPositionForSprite(System.Single@,System.Single@,System.Single)"/>
             <seealso cref="M:FlatRedBall.Gui.Cursor.SetObjectRelativePosition(FlatRedBall.Math.IStaticPositionable)"/>
            </remarks>
        </member>
        <member name="F:FlatRedBall.Gui.Cursor.ObjectGrabbedRelativeY">
            <summary>
            The relative y position of a grabbed object from the center of the cursor.
            </summary>
            <remarks>
            This value can be set through the SetObjectRelativePosition.  
            This value used in the GetCursorPositionForSprite method.
             <seealso cref="M:FlatRedBall.Gui.Cursor.GetCursorPositionForSprite(System.Single@,System.Single@,System.Single)"/>
             <seealso cref="M:FlatRedBall.Gui.Cursor.SetObjectRelativePosition(FlatRedBall.Math.IStaticPositionable)"/>
            </remarks>
        </member>
        <member name="F:FlatRedBall.Gui.Cursor.PrimaryPush">
            <summary>
            Whether the primary button was pushed this frame. A push is when the primary button is not down last frame but is down this frame.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Cursor.PrimaryDown">
            <summary>
            Determines whether the primary button is down this frame.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Cursor.PrimaryClick">
            <summary>
            Whether the primary button was clicked (released) this frame. A release is when the primary button is down last frame but not down this frame.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Cursor.PrimaryDoubleClick">
            <summary>
            Determines whether the primary button was double clicked this frame.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Cursor.SecondaryPush">
            <summary>
            Determines whether the secondary button was pushed this frame.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Cursor.SecondaryDown">
            <summary>
            Determines whether the secondary button is down this frame.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Cursor.SecondaryClick">
            <summary>
            Determines whether the secondary button was clicked (released) this frame.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Cursor.SecondaryDoubleClick">
            <summary>
            Determines whether the secondary button was double clicked this frame.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Cursor.mCamera">
            <summary>
            Reference to the camera to which the cursor belongs.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.Cursor.PrimaryButton">
            <summary>
            The Primary button (usually left mouse button) which can be tested for clicks, pushes, and if it is held down.
            </summary>
            <remarks>
            This object is internally created only once, and that same reference is returned on subsequent calls to keep 
            allocation low.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Gui.Cursor.Active">
            <summary>
            Sets whether the cursor is active.
            </summary>
            <remarks>
            An inactive cursor will not move or read any input.
            Setting the active property to false will also clear the following
            fields:
            
            <para>primaryClick</para>
            <para>primaryDoubleClick</para>
            <para>primaryDown</para>
            <para>primaryPush</para>
            <para>secondaryClick</para>
            <para>secondaryDoubleClick</para>
            <para>secondaryDown</para>
            <para>secondaryPush</para>
            
            </remarks>
        </member>
        <member name="P:FlatRedBall.Gui.Cursor.RequiresGameWindowInFocus">
            <summary>
            Whether the game window must be in focus to perform cursor logic. If false, then
            clicks will be processed even if the Window isn't in focus.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.Cursor.ZVelocity">
            <summary>
            The movement rate of the controlling input (usually mouse) on the z axis. For the mouse this refers to the scroll wheel.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.Cursor.ScreenX">
            <summary>
            The number of pixels between the left of the screen and the cursor. Note that this does not consider
            the camera's position, orientation, or perspective - it will always return 0 at the left-edge of the screen.
            </summary>
            <remarks>This can be set if the cursor is using an input device which modifies the position incrementally (such as an XboxGamePad).
            If using an input device which sets the position in absolute coordiantes (such as a Mouse), this value will be overwritten every frame.</remarks>
        </member>
        <member name="P:FlatRedBall.Gui.Cursor.ScreenY">
            <summary>
            The number of pixels between the top of the screen and the cursor. Note that this does not consider
            the camera's position, orientation, or perspective - it will always return 0 at the top-edge of the screen. This value
            increases downward.
            </summary>
            <remarks>This can be set if the cursor is using an input device which modifies the position incrementally (such as an XboxGamePad).
            If using an input device which sets the position in absolute coordiantes (such as a Mouse), this value will be overwritten every frame.</remarks>
        </member>
        <member name="P:FlatRedBall.Gui.Cursor.ScreenXChange">
            <summary>
            Returns the number of pixels on the X axis
            that the cursor has moved since the last
            frame. This can be used to move grabbed windows.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.Cursor.ScreenYChange">
            <summary>
            Returns the number of pixels on the Y axis
            that the cursor has moved since the last
            frame. This can be used to move grabbed windows.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.Cursor.WindowPushed">
            <summary>
            The window that the cursor was over when the mouse button was pressed.
            </summary>
            <remarks>
            When the mouse button is pushed down, this value is set - either to null 
            if the mouse is not over any Windows or to the Window that the mouse is over.  
            When the mouse button is released (clicked), this value is set to null.  
            This value is useful for clicking on Windows.  Specifically, when the cursor is clicked
            on a Button, the WindowPushed value is tested to make sure that it is the same as 
            the Window clicked on.  This allows for players to push on a Button but move 
            the mouse away and click elsewhere without clicking on the Button originally 
            pushed and without accidentally clicking on other Buttons.  This is also used
            with ToggleButtons to control when they are pressed and unpressed.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Gui.Cursor.ObjectGrabbed">
            <summary>
            Assigns the ObjectGrabbed and calculates the relative position of the
            grabbed object.  After this method is called, UpdateObjectGrabbedPosition can be called
            every frame to position the grabbed object.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Cursor.CustomUpdate">
            <summary>
            Delegate which can be used to apply custom
            positioning and button state logic.  The argument
            is the Cursor instance, and the bool indicates whether
            the internal Cursor logic should apply click and push values.
            </summary>
            <remarks>
            If the CustomUpdate delegate assigns Click, Push, and DoubleClick
            values internally, then it should return false, indicating that the
            Cursor logic itself shouldn't.  If the CustomUpdate only modifies the
            down states, then the CustomUpdate delegate should return true so that
            the Click, Push, and DoubleClick values are 
            </remarks>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.#ctor(FlatRedBall.Camera)">
            <summary>
            Creates a new Cursor
            </summary>
            <remarks>
            Usually the cursor does not have to be created explicitly.  Calling
            the GuiManager's constructor without a cursor reference (default in the
            FrbTemplate) creates a cursor automatically.  New cursors should only
            be created if multiple cursors are needed, or if you are inheriting
            from the Cursor class.  Usually multiple cursors are only needed
            in games with multiple cameras.
            </remarks>
            <param name="cameraToUse">The camera that the cursor will belong to.</param>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.ActualXVelocityAt(System.Single)">
            <summary>
            Returns the world X Velocity of the Cursor at a particular Z.
            </summary>
            <remarks>
            As the cursor can control objects at various Z values, this method returns the X velocity
            of the cursor at a paritular Z.  This method assumes that the Camera is unrotated (looking
            down the Z axis.
            </remarks>
            <param name="z">The z value to measure the velocity at.</param>
            <returns>The X velocity at the particular Z.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.ActualXVelocityAt(System.Single,FlatRedBall.Graphics.Layer)">
            <summary>
            Returns the world X Velocity of the Cursor at a particular Z on a particular Layer.
            </summary>
            <param name="z">The Z value to measure the velocity at.</param>
            <param name="layer">The Layer to use for velocity calculations</param>
            <returns>The X velocity at the particular Z and Layer.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.ActualYVelocityAt(System.Single)">
            <summary>
            Returns the yVelocity of the cursor at a particular Z.
            </summary>
            <remarks>
            As the cursor can control objects at various Z values, this method returns the Y velocity
            of the cursor at a paritular Z.  This method assumes that the Camera is unrotated (looking
            down the Z axis.
            </remarks>
            <param name="z">The z value to measure the velocity at.</param>
            <returns>The Y velocity at the particular Z.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.GetCursorPosition(System.Single@,System.Single@,System.Single)">
            <summary>
            Modifies the x and y arguments to show the point of the cursor's tip at at the z value.
            </summary>
            <remarks>
            This method assumes that the Camera is unrotated (looking
            down the Z axis).
            </remarks>
            <param name="x">The x value to change.</param>
            <param name="y">The y value to change.</param>
            <param name="absoluteZ">The z value to use.</param>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.GetCursorPositionForSprite(System.Single@,System.Single@,System.Single)">
            <summary>
            Modifies the x and y arguments to show the position that the grabbed Sprite should be at.
            </summary>
            <remarks>
            This method assumes that the camera's currentFollowingStyle is Camera.LOOKINGSTYLE.DOWNZ.  The x and y
            arguments will represent the location of the cursor's tip and adds the relative Sprite positions.
            
            <seealso cref="M:FlatRedBall.Gui.Cursor.SetObjectRelativePosition(FlatRedBall.Math.IStaticPositionable)"/>
            </remarks>
            <param name="x"></param>
            <param name="y"></param>
            <param name="absolute"></param>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.GetCursorPosition(FlatRedBall.PositionedObject,System.Single)">
            <summary>
            Gets the cursor's position and sets the argument positionedObject's
            x and y values to the cursor's position at the argument Z value.
            </summary>
            <remarks>
            This is a simple way to set the position of an object
            to the cursor's position.
            </remarks>
            <param name="positionedObject">Reference to the positioned object.</param>
            <param name="absoluteZ">The Z value at which the position should be set.</param>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.GetSpriteOver``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns the Sprite the cursor is over giving preference to the closest Sprite to the Camera.
            </summary>
            <remarks>
            This method will not return inactive Sprites (Sprites with the .active variable set to false).  To consider inactives as well
            call the GetSpriteOver(SpriteArray, bool) overload.
            </remarks>
            <param name="spriteArray">The SpriteArray to search through.</param>
            <returns>The Sprite that is found, or null if the cursor is not over any Sprites.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.GetSpriteOver``1(System.Collections.Generic.IList{``0},System.Boolean,System.Boolean)">
            <summary>
            Returns the Sprite the cursor is over giving preference to the closest Sprite to the Camera.
            </summary>
            <param name="spriteArray">The SpriteArray to search through.</param>
            <param name="considerInactives">Whether inactive Sprites (Sprites with the .active variable set to false) are considered.</param>
            <param name="skipFirst"></param>
            <returns>The Sprite that is found, or null if the cursor is not over any Sprites.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.GetSpriteOver(System.Collections.Generic.IList{FlatRedBall.SpriteList})">
            <summary>
            Returns the Sprite the cursor is over giving preference to the closest Sprite to the Camera.
            </summary>
            <param name="spriteArrayArray">The SpriteArrayArray to search through.</param>
            <returns>The Sprite that is found, or null if the cursor is not over any Sprites.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.GetSpriteOver(FlatRedBall.Graphics.Layer)">
            <summary>
            Returns the Sprite the cursor is over giving preference to the closest Sprite to the Camera.
            </summary>
            <param name="spriteLayer">The SpriteLayer to search through.</param>
            <returns>The Sprite that is found, or null if the Cursor is not over any Sprites.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.GetSpriteOver(System.Collections.Generic.List{FlatRedBall.ManagedSpriteGroups.SpriteGrid})">
            <summary>
            Returns the Sprite that the cursor is over in the argument SpriteGridArray.
            </summary>
            <param name="sga">Reference to the SpriteGridArray.</param>
            <returns>The Sprite that the cursor is over.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.GrabWindow(FlatRedBall.Gui.IWindow)">
            <summary>
            Grabs a Window with the Cursor.
            </summary>
            <remarks>
            The windowGrabbed reference will automatically be set to null when the primary button is 
            released (clicked) by the GuiManager.Control method.
            <seealso cref="M:FlatRedBall.Gui.GuiManager.Control"/>
            </remarks>
            <param name="windowToGrab">The Window to grab.</param>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.IsOn(FlatRedBall.Sprite)">
            <summary>
            Determines whether the cursor is on a Sprite, but only considers rotation on the z axis (RotationZ).
            </summary>
            <remarks>
            This method will not consider whether spriteToTest is rotated on the x or y axes, and assumes
            that the camera is looking down the Z axis (the Camera is unrotated).  Cursor.IsOn3D
            works properly for any rotation..
            
            <para>This method will not select Sprites which are closer that the camera's nearClipPlane or
            further than the camera's farClipPlane.</para>
            </remarks>
            <param name="spriteToTest">The Sprite to test if the cursor is over.</param>
            <returns>Whether the cursor is on the Sprite.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.IsOn(FlatRedBall.Graphics.Text)">
            <summary>
            Determines whether the cursor is over a textObject.
            </summary>
            <remarks>
            This method will not consider whether the Text is rotated on the x or y axes, and assumes
            that the cursor is looking down the Z axis(the camera.LookStyle is DOWNZ).  
            
            <para>This method will not select Texts which are closer that the camera's nearClipPlane or
            further than the camera's farClipPlane.</para>
            
            Currently, the method treats the text object as one rectangle, so the width of the Text will be equal
            to the widest line.  For example:
            
            <code>
            // if the text were centered, the collidable area would be as follows
            +-------------------------+
            |       The outline       |
            |represents the collidable|
            |    area of the Text.    |
            |  Notice that the border |
            |    extends to include   |
            |    the longest line.    |
            +-------------------------+
            
            // if the text were left aligned, the area would still be the same:
            +-------------------------+
            |The outline              |
            |represents the collidable|
            |area of the Text.        |
            |Notice that the border   |
            |extends to include       |
            |the longest line.        |
            +-------------------------+
            </code>
            </remarks>
            <param name="textObject">The TextObject to test if the cursor is over.</param>
            <returns>Whether the cursor is on the TextObject.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.IsOn``1(``0)">
            <summary>
            Returns whether the cursor is over the argument SpriteFrame.
            </summary>
            <param name="sf">Reference to the SpriteFrame to test.</param>
            <returns>Whether the cursor is over the argument SpriteFrame.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.IsOn3D(FlatRedBall.Sprite)">
            <summary>
            Determines whether the Cursor is on a Sprite.
            </summary>
            <remarks>
            This is the "full featured" version of the IsOn method, considering rotation on all axes for
            both the spriteToTest and the camera.  All lookingStyles are considered and will return accurate results.
            This method is slower than the IsOn method, and if Sprites are facing the camera under its
            default orientation, the IsOn method should be used.
            
            <para>This method will not select Sprites if the cursor is over them on a point
            that is closer that the camera's nearClipPlane or further than the camera's 
            farClipPlane.</para>
            
            </remarks>
            <param name="spriteToTest">The Sprite to test if the Cursor is over.</param>
            <returns>Whether the Cursor is over the Sprite.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.IsOn3D(FlatRedBall.Sprite,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines whether the Cursor is on a Sprite and stores the intersection point in a Vector3.
            </summary>
            <remarks>		
            This is the "full featured" version of the IsOn method, considering rotation on all axes for
            both the spriteToTest and the camera.  All lookingStyles are considered and will return accurate results.
            This method is slower than the IsOn method, and if Sprites are facing the camera under its
            default orientation, the IsOn method should be used.
            
            This method also modifies a Vector3 which marks the intersection point on the Sprite.
            
            <para>This method will not select Sprites if the cursor is over them on a point
            that is closer that the camera's nearClipPlane or further than the camera's 
            farClipPlane.</para>
            </remarks>
            <param name="spriteToTest">The Sprite to test if the Cursor is over.</param>
            <param name="intersectionPoint">The point where the cursor touches the Sprite.</param>
            <returns>Whether the Cursor is on the Sprite.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.IsInWindow">
            <summary>
            Determines whether the cursor is currently in the active Control which owns the application.
            </summary>
            <returns>Whether the cursor is currently in the active Control which owns the application.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.SetJoystickControl(FlatRedBall.Input.Xbox360GamePad)">
            <summary>
            Sets the cursor to be controlled by the joystick rather than the mouse.
            </summary>
            <param name="gamePad">Refernce to the Xbox360GamePad that will control the cursor.</param>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.SetControllingGamepad(FlatRedBall.Input.Xbox360GamePad)">
            <summary>
            Clears all input devices and sets the cursor to be controlled by the gamepad.
            </summary>
            <param name="gamePad"></param>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.SetObjectRelativePosition(FlatRedBall.Math.IStaticPositionable)">
            <summary>
            Tells the Cursor to store the relative position of the Sprite to the Cursor's tip.
            </summary>
            <remarks>
            The relative Sprite position is used in the GetCursorPositionForSprite method.  Relative values
            keep objects from "snapping" to the center of the cursor when grabbed.
            </remarks>
            <param name="objectSetTo">The PositionedObject that the relative values should be set to.</param>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.WorldXAt(System.Single)">
            <summary>
            Returns the X world coordinate of the cursor at the argument Z position. 
            This method requires a Z value to properly work with perspective cameras.
            This method assumes an unrotated camera.
            </summary>
            <param name="zPosition">The world Z to check at.</param>
            <returns>The world X coordinate.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.WorldYAt(System.Single)">
            <summary>
            Returns the Y world coordiante of the cursor at the argument Z position.
            This method requires a Z value to properly work with perspective cameras.
            This method assumes an unrotated camera.
            </summary>
            <param name="zPosition">The world Z to check at.</param>
            <returns>The world Y coordiante.</returns>
        </member>
        <member name="F:FlatRedBall.Gui.GuiManager.mDominantWindows">
            <summary>
            A stack of Windows which demand input from the cursor.
            </summary>
            <remarks>
            When a dominantWindow is valid, the cursor will not be able to interact with other windows.  If RemoveInvisibleDominantWindows
            is set to true (default is true) then the GuiManager will remove any invisible dominant windows from its
            memory.
            In other words a DominantWindow can be removed either through the traditional Remove methods or by
            setting the Window's Visible property to false if RemoveInvisibleDominantWindows is true.
            </remarks>
        </member>
        <member name="F:FlatRedBall.Gui.GuiManager.mToolTipText">
            <summary>
            Sets the tool tip to show
            </summary>
            <remarks>
            Some UI elements like Buttons automatically show
            a tool tip.  This property can be used to overwrite
            what is shown, or to show tool tips when the user is
            over a non-UI element.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Gui.GuiManager.Cursor">
            <summary>
            Gets the main cursor. If multiple cursors have been added to the GuiManager, returns the first one.
            </summary>
        </member>
        <member name="M:FlatRedBall.Gui.GuiManager.AddDominantWindow(FlatRedBall.Gui.IWindow)">
            <summary>
            Adds a window as a Dominant Window.  If the window is a regular Window
            already managed by the GuiManager it will be removed from the regularly-managed
            window list. If the window is already a dominant window, this operation does nothing, so 
            it can be called multiple times.
            </summary>
            <param name="window">The window to add to the Dominant Window stack.</param>
        </member>
        <member name="M:FlatRedBall.Gui.GuiManager.SortZAndLayerBased">
            <summary>
            Sorts all contained IWindows according to their
            Z values and Layers.  This will usually result in
            clicks being received in the same order that objects
            are drawn, which is what the user will usually expect.
            </summary>
        </member>
        <member name="T:FlatRedBall.Gui.FocusUpdateDelegate">
            <summary>
            Event raised by the Keyboard every frame on the InputManager's ReceivingInput reference.
            </summary>
            <param name="inputReceiver">The current IInputReceiver.</param>
        </member>
        <member name="T:FlatRedBall.Gui.IInputReceiver">
            <summary>
            Interface for objects which can receive input from the InputManager.
            </summary>
            <remarks>
            
            This interface should only be used for Gui elements specifically because the GuiManager will change the InputManager.ReceivingInput
            reference depending on the activity of the cursor and other Gui elements.  The InputManager will only keep track of one IInputReceiver
            at a time, and each IInputReceiver needs to assign itself as the target for input through the static InputManager.ReceivingInput field.
            
            <para>Since this is only used for Gui elements, this interface is rarely used in games.</para>
            </remarks>
        </member>
        <member name="P:FlatRedBall.Gui.IInputReceiver.TakingInput">
            <summary>
            A method which determines whether the instance can currently receive focus as an input receiver.
            </summary>
            <returns>Whether the instance is taking input.</returns>
        </member>
        <member name="P:FlatRedBall.Gui.IInputReceiver.NextInTabSequence">
            <summary>
            The next IInputReceiver in the tab sequence.  In other words, if this element is currently
            receiving input (is the InputManager's ReceivingInput), pressing tab will set the NextInTabSequence
            to be the InputManager's ReceivingInput.
            </summary>
        </member>
        <member name="E:FlatRedBall.Gui.IInputReceiver.FocusUpdate">
            <summary>
            Event raised every frame if there is a non-null InputManager.ReceivingInput.  This allows
            the IInputReceiver to perform custom every-frame logic when it has focus, such as a ListBox
            listening for the Delete key to delete highlighted elements.
            </summary>
        </member>
        <member name="M:FlatRedBall.Gui.IInputReceiver.OnFocusUpdate">
            <summary>
            Called by the InputManager automatically every frame.
            </summary>
            <remarks>
            The implementation of this method should raise the FocusUpdate event.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Gui.IInputReceiver.OnGainFocus">
            <summary>
            Called by the engine automatically when an IInputReceiver gains focus.
            </summary>
            <remarks>
            The implementation of this method should raise the GainFocus event.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Gui.IInputReceiver.LoseFocus">
            <summary>
            Called by the engine automatically when an IInputReceiver loses focus.
            </summary>
        </member>
        <member name="M:FlatRedBall.Gui.IInputReceiver.ReceiveInput">
            <summary>
            The method called every frame by the InputManager in the Update method
            if this is the IInputReceiver referenced by the InputManager.  This does
            not have to be called automatically.
            </summary>
        </member>
        <member name="E:FlatRedBall.Gui.IWindow.Click">
            <summary>
            An event raised when the window is clicked (the user pushes and releases on the window)
            </summary>
        </member>
        <member name="E:FlatRedBall.Gui.IWindow.ClickNoSlide">
            <summary>
            An event raised when the window is pushed and released without moving.
            </summary>
        </member>
        <member name="E:FlatRedBall.Gui.IWindow.SlideOnClick">
            <summary>
            An event raised when the cursor is pushed when not on the window, but then released when it is on the window. 
            This can be used as a drag+drop event.
            </summary>
        </member>
        <member name="E:FlatRedBall.Gui.IWindow.Push">
            <summary>
            An event raised when the cursor is pushed (not down last frame, is on this frame)
            </summary>
        </member>
        <member name="E:FlatRedBall.Gui.IWindow.DragOver">
            <summary>
            Event raied when the cursor moves and this window is the pressed window. This is called whether
            the cursor is over the current window or not.
            </summary>
        </member>
        <member name="E:FlatRedBall.Gui.IWindow.RollOn">
            <summary>
            An event raised when the cursor moves onto the window for the first time. 
            This is raised only once until the user moves the cursor off and then back on.
            </summary>
        </member>
        <member name="E:FlatRedBall.Gui.IWindow.RollOff">
            <summary>
            An event raised when the cursor moves off of the window 
            </summary>
        </member>
        <member name="E:FlatRedBall.Gui.IWindow.RollOver">
            <summary>
            An event raised when the cursor moves while it is over the window. This is raised every frame that
            the cursor moves and is over the window. This event is not raised unless the cursor is over the window.
            </summary>
            <seealso cref="E:FlatRedBall.Gui.IWindow.DragOver"/>
        </member>
        <member name="E:FlatRedBall.Gui.IWindow.EnabledChange">
            <summary>
            Event raised when the Enabled property changes on the window.
            </summary>
        </member>
        <member name="T:FlatRedBall.Gui.WindowArray">
            <summary>
            Summary description for WindowArray.
            </summary>
        </member>
        <member name="T:FlatRedBall.Input.AnalogButton">
            <summary>
            A button or single-axis input device which can return a range of values.
            Common examples include shoulder triggers on the Xbox360GamePad.
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.AnalogButton.Position">
            <summary>
            The current value of the AnalogButton, with ranges 0 - 1
            </summary>
        </member>
        <member name="T:FlatRedBall.Input.AnalogStick">
            <summary>
            A two-axis input device which can return a range of values on both axes.
            </summary>
        </member>
        <member name="F:FlatRedBall.Input.AnalogStick.DPadOnValue">
            <summary>
            The DPadOnValue and DPadOffValue
            values are used to simulate D-Pad control
            with the analog stick.  When the user is above
            the absolute value of the mDPadOnValue then it is
            as if the DPad is held down.  To release the DPad the
            value must come under the off value.  If there was only
            one value then the user could hold the stick near the threshold
            and get rapid on/off values due to the inaccuracy of the analog stick. 
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.AnalogStick.LeftAsButton">
            <summary>
            Returns the left direction of the analog stick as an AnalogButton instance.
            </summary>
            <remarks>
            Value range is 0 to 1.
            Value if analog stick is held all the way to the left is 1. Note that
            the value is positive in this case, which is the opposite of the AnalogStick's Position.X.
            Value if analog stick is in neutral position is 0.
            Value if analog stick is held all the way to the right is still 0.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Input.AnalogStick.RightAsButton">
            <summary>
            Returns the right direction of the analog stick as an AnalogButton instance.
            </summary>
            <remarks>
            Value range is 0 to 1.
            Value if analog stick is held all the way to the left is 0.
            Value if analog stick is in neutral position is 0.
            Value if analog stick is held all the way to the right is 1.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Input.AnalogStick.UpAsButton">
            <summary>
            Returns the up direction of the analog stick as an AnalogButton instance.
            </summary>
            <remarks>
            Value range is 0 to 1.
            Value if analog stick is held all the way downward is 0.
            Value if analog stick is in neutral position is 0.
            Value if analog stick is held all the way upward is 1.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Input.AnalogStick.DownAsButton">
            <summary>
            Returns the down direction of the analog stick as an AnalogButton instance.
            </summary>
            Value range is 0 to 1.
            Value if analog stick is held all the way downward is 1. Note that 
            the value is positive, which is the opposite of the AnalogStick's Position.Y.
            Value if analog stick is in neutral position is 0.
            Value if analog stick is held all the way upward is 0.
        </member>
        <member name="P:FlatRedBall.Input.AnalogStick.Angle">
            <summary>
            Returns the angle of the analog stick in radians.  
            0 is to the right, Pi/2 is up, Pi is to the left, and 3*Pi/2 is down.
            If the analog stick's position is (0,0), the Angle returned is 0 (to the right).
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.AnalogStick.Magnitude">
            <summary>
            Gets the distance from the center position of the analog stick. 
            Value is between 0 and 1, where 0 is the neutral position.
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.AnalogStick.Position">
            <summary>
            The position of the analog stick.  The range for each component is -1 to 1.
            </summary>
        </member>
        <member name="M:FlatRedBall.Input.AnalogStick.Update(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Updates the internal values (position, DPad simulated values, velocity) according to the argument newPosition.
            </summary>
            <param name="newPosition">The normalized (-1 to +1) position of the analog stick.</param>
        </member>
        <member name="T:FlatRedBall.Input.ICursorSelectable">
            <summary>
            Defines an interface for objects which can be selectable by the cursor.
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.ICursorSelectable.CursorSelectable">
            <summary>
            Whether the instance is currently selectable (active).
            </summary>
        </member>
        <member name="T:FlatRedBall.Input.IInputDevice">
            <summary>
            Implementation for hardware input object which provides common input types such as movement and 
            primary/secondary actions.
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.IInputDevice.Default2DInput">
            <summary>
            The default input for 2D movement, such as an analog stick on a gamepad.
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.IInputDevice.DefaultUpPressable">
            <summary>
            The default input for moving up, such as the up direction on an analog stick on a gamepad.
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.IInputDevice.DefaultDownPressable">
            <summary>
            The default input for moving down, such as the down direction on an analog stick on a gamepad.
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.IInputDevice.DefaultLeftPressable">
            <summary>
            The default input for moving left, such as the left direction on an analog stick on a gamepad.
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.IInputDevice.DefaultRightPressable">
            <summary>
            The default input for moving right, such as the right direction on an analog stick on a gamepad.
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.IInputDevice.DefaultHorizontalInput">
            <summary>
            The default input for moving horizontally, like in a platformer. For example, this may be 
            the left/right directions on an analog stick on a gamepad.
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.IInputDevice.DefaultVerticalInput">
            <summary>
            The default input for moving vertically, like climbing a ladder in a platformer. For example, this may be
            the up/down direction on an analog stick on a gamepad.
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.IInputDevice.DefaultPrimaryActionInput">
            <summary>
            The default primary action input used by a game like jumping. For example,
            this may be the A button on a gamepad.
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.IInputDevice.DefaultSecondaryActionInput">
            <summary>
            The default secondary action input used by a game like shooting in a platformer. For example,
            this may be the X button on a gamepad.
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.IInputDevice.DefaultConfirmInput">
            <summary>
            The default input used by a game to confirm an action like a menu button. For example,
            this may be the start button on a gamepad.
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.IInputDevice.DefaultJoinInput">
            <summary>
            The default input used by a game to have a player join the game. For example,
            this may be the start button on a gamepad.
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.IInputDevice.DefaultPauseInput">
            <summary>
            the default input used to puase the game. For example,
            this may be the escape key on a keyboard.
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.IInputDevice.DefaultBackInput">
            <summary>
            The default input to indicate a "back" action. For example,
            this may be the B button on a gamepad.
            </summary>
        </member>
        <member name="T:FlatRedBall.Input.IMouseOver">
            <summary>
             Interface for checking mouse over's
            </summary>
        </member>
        <member name="M:FlatRedBall.Input.IMouseOver.IsMouseOver(FlatRedBall.Gui.Cursor)">
            <summary>
             Check to see if object is under mouse.
            </summary>
            <param name="cursor">Cursor to check against.</param>
            <returns>True if under mouse.</returns>
        </member>
        <member name="M:FlatRedBall.Input.IMouseOver.IsMouseOver(FlatRedBall.Gui.Cursor,FlatRedBall.Graphics.Layer)">
            <summary>
             Check to see if object is under mouse.
            </summary>
            <param name="cursor">Cursor to check against.</param>
            <param name="layer">Layer object is on.</param>
            <returns>True if under mouse.</returns>
        </member>
        <member name="T:FlatRedBall.Input.InputDeviceBase">
            <summary>
            Base class for creating customizable input. This class provides default implementations
            for all IInputDevice properties. Games can freely implement properties as needed
            by overriding the virtual Get methods.
            
            By default a new InputDeviceBase instance can be used as a device which always returns 0 and false.
            </summary>
            <remarks>
            The overridable methods will only be read one time per frame, and only if the InputDeviceBase
            is asked for any of its default values. In other words, if the Default2DInput value is checked multiple
            times in a frame, the GetDefault2DInputX and GetDefault2DInputY values will only be read one time per frame.
            This guarantees input consistency across a frame, similar to how input hardware (like a Keyboard) behaves.
            
            The InputDeviceBase includes Get functions for bool input values like primary action, secondary action, confirm, and join.
            Only the current-frame value is controlled by the Get functions. Internally, the InputDeviceBase keeps track of the values returned
            last frame, and will properly report WasJustPressed and WasJustReleased appropriately.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Input.InputDeviceBase.GetPrimaryActionPressed">
            <summary>
            Returns whether the primary action input is pressed this frame. 
            </summary>
            <returns>Whether the primary action input is pressed this frame.</returns>
        </member>
        <member name="T:FlatRedBall.Input.InputManager">
            <summary>
            Containing functionality for keyboard, mouse, and joystick input.
            </summary>
        </member>
        <member name="F:FlatRedBall.Input.InputManager.mReceivingInput">
            <summary>
            Reference to an IInputReceiver which will have its ReceiveInput method called every frame.
            </summary>
            <remarks>
            If this reference is not null, the reference's ReceiveInput method is called in the InputManager.GetInputState method.
            <seealso cref="T:FlatRedBall.Gui.IInputReceiver"/>
            </remarks>
        </member>
        <member name="P:FlatRedBall.Input.InputManager.UpdateXbox360GamePads">
            <summary>
            Whether to perform every-frame update logic on all gamepads.
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.InputManager.Xbox360GamePads">
            <summary>
            Returns an array of Xbox360GamePads. 
            </summary>
            <remarks>
            This name was created when the Xbox360 was the only controller type supported by XNA. Since then, many devices
            implement X Input, and newer hardware such as Xbox One also appear in this array when connected.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Input.InputManager.ControllerConnectionEventArgs.PlayerIndex">
            <summary>
            The index of the gamepad which connected or disconnected. This is 0-based, so values are 0 to 3 inclusive.
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.InputManager.ControllerConnectionEventArgs.Connected">
            <summary>
            Whether the gamepad was connected. If false, the gamepad was disconnected.
            </summary>
        </member>
        <member name="E:FlatRedBall.Input.InputManager.ControllerConnectionEvent">
            <summary>
            Event raised whenever an Xbox360Controller is connected or disonnected. 
            </summary>
        </member>
        <member name="M:FlatRedBall.Input.Keyboard.KeyPushed(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Returns true if the argument key was not down last frame, but is down this frame.
            </summary>
            <param name="key">The key to check</param>
            <returns>Whether the key was just pushed.</returns>
        </member>
        <member name="M:FlatRedBall.Input.Keyboard.KeyTyped(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Returns whether a key was "typed".  A type happens either when the user initially pushes a key down, or when
            it gets typed again from holding the key down.  This works similar to how the keyboard types in text editors
            when holding down a key.
            </summary>
            <param name="key">The key to check for.</param>
            <returns>Whether the key was typed.</returns>
        </member>
        <member name="M:FlatRedBall.Input.Keyboard.GetKey(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Retrns a KeyReference for the argument key.
            </summary>
            <param name="key">The key, such as Keys.A.</param>
            <returns>The reference, which can be used to check for input.</returns>
        </member>
        <member name="M:FlatRedBall.Input.Keyboard.Get2DInput(Microsoft.Xna.Framework.Input.Keys,Microsoft.Xna.Framework.Input.Keys,Microsoft.Xna.Framework.Input.Keys,Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Returns an instance of I2DInput which can be used to read 2D input using the four
            argument keys.
            </summary>
            <param name="left">The key to use for the left direction.</param>
            <param name="right">The key to use for the right direction.</param>
            <param name="up">The key to use for the up direction.</param>
            <param name="down">The key to use for the down direction.</param>
            <returns>The I2DInput instance which can be used to read input.</returns>
        </member>
        <member name="M:FlatRedBall.Input.KeyboardStateProcessor.Clear">
            <summary>
            Clears the keyboard states, simulating the keyboard
            not having any values down or pressed
            </summary>
        </member>
        <member name="F:FlatRedBall.Input.Mouse.mXAt100Units">
            <summary>
            The camera-relative X coordinate position of the Mouse at 100 units away.
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.Mouse.GrabbedPositionedObject">
            <summary>
            Grabs a PositionedObject.  The PositionedObject will automatically update
            its position according to mouse movement while the reference remains.
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.Mouse.X">
            <summary>
            Returns the client rectangle-relative X pixel coordinate of the cursor.
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.Mouse.Y">
            <summary>
            Returns the client rectangle-Y pixel coordinate of the cursor.
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.Mouse.XChange">
            <summary>
            The number of pixels that the mouse has moved on the
            X axis during the last frame.
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.Mouse.YChange">
            <summary>
            The number of pixels that the mouse has moved on the
            Y axis during the last frame.
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.Mouse.XVelocity">
            <summary>
            The rate of change of the X property in 
            pixels per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.Mouse.YVelocity">
            <summary>
            The rate of change of the Y property in 
            pixels per second.
            </summary>
        </member>
        <member name="M:FlatRedBall.Input.Mouse.IsOn(FlatRedBall.Math.Geometry.Circle)">
            <summary>
            Returns whether the Mouse is over the argument Circle.
            </summary>
            <param name="circle">The Circle to check.</param>
            <returns>Whether the mouse is over the argument Circle.</returns>
        </member>
        <member name="M:FlatRedBall.Input.Mouse.IsOn3D``1(``0,System.Boolean,FlatRedBall.Camera,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines whether the Mouse is over the objectToTest argument.
            </summary>
            <remarks>
            If a Text object is passed this method will only work appropriately if 
            the Text object has centered text.  See the IsOn3D overload which takes a Text argument.
            </remarks>
            <typeparam name="T">The type of the first argument.</typeparam>
            <param name="objectToTest">The object to test if the mouse is on.</param>
            <param name="relativeToCamera">Whether the object's Position is relative to the Camera.</param>
            <param name="camera"></param>
            <param name="intersectionPoint">The point where the intersection between the ray casted from the 
            mouse into the distance and the argument objectToTest occurred.</param>
            <returns>Whether the mouse is over the argument objectToTest</returns>
        </member>
        <member name="T:FlatRedBall.Input.Xbox360GamePad.Button">
            <summary>
            Enumeration representing the buttons on the Xbox360 controller.  The values for each
            entry matches the value of the Xbox 360 button index in Managed DirectX.  This improves
            portability between FlatRedBall Managed DirectX and FlatRedBall XNA.
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.Xbox360GamePad.Deadzone">
            <summary>
            The deadzone value. The application of this value depends on the DeadzoneType
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.Xbox360GamePad.IsConnected">
            <summary>
            Returns whether the current Xbox360GamePad hardware is connected, or if 
            the FakeIsConnected property is set to true.
            </summary>
            <seealso cref="P:FlatRedBall.Input.Xbox360GamePad.FakeIsConnected"/>
        </member>
        <member name="P:FlatRedBall.Input.Xbox360GamePad.FakeIsConnected">
            <summary>
            This value can force an Xbox360GamePad's 
            IsConnected to be true even if the controller
            is not connected.  This can be used to simulate
            multiple connected controllers.
            </summary>
            <seealso cref="P:FlatRedBall.Input.Xbox360GamePad.IsConnected"/>
        </member>
        <member name="P:FlatRedBall.Input.Xbox360GamePad.LeftTrigger">
            <summary>
            Returns the left trigger's current value.  When not pressed this property returns
            0.0f.  When fully pressed this property returns 1.0f;
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.Xbox360GamePad.RightTrigger">
            <summary>
            Returns the right trigger's current value.  When not pressed this property returns
            0.0f.  When fully pressed this property returns 1.0f;
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.Xbox360GamePad.WasConnectedThisFrame">
            <summary>
            Returns whether this game pad was disconnected last frame but is connected this frame.
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.Xbox360GamePad.WasDisconnectedThisFrame">
            <summary>
            Returns whether this game pad was connected last frame but is disconnected this frame.
            </summary>
        </member>
        <member name="M:FlatRedBall.Input.Xbox360GamePad.AnyButtonPushed(System.Boolean,System.Boolean)">
            <summary>
            Returns whether any button was pushed on this Xbox360GamePad.  
            This considers face buttons, trigger buttons, shoulder buttons, and d pad.
            
            Justin 3/19/22: added optional arguments to explicitly ignore directional
            and analog inputs as buttons as these are often not intended to register
            as buttons. The defaults ensure back compat.
            </summary>
            <param name="ignoreDirectionals">Whether to consider directions, such as the D-Pad, as buttons</param>
            <param name="ignoreAnalogs">Whether to consider analogs, such as triggers and sticks, as buttons</param>
            <returns>Whether any button was pushed.</returns>
        </member>
        <member name="M:FlatRedBall.Input.Xbox360GamePad.ButtonDown(FlatRedBall.Input.Xbox360GamePad.Button)">
            <summary>
            Returns whether the argument button is being held down. For analog buttons, such as LeftTrigger 
            and RightTrigger, the AnalogOnThreshold value is used to determine if the button is down.
            </summary>
            <param name="button">The button to check.</param>
            <returns>Returns true if the button is down, otherwise false.</returns>
        </member>
        <member name="M:FlatRedBall.Input.Xbox360GamePad.ButtonPushed(FlatRedBall.Input.Xbox360GamePad.Button)">
            <summary>
            Returns whether the argument button type is pushed. For analog buttons, such as LeftTrigger 
            and RightTrigger, the AnalogOnThreshold value is used to determine if the button is pressed.
            </summary>
            <param name="button">The button to check.</param>
            <returns>true if the button is pressed, otherwise false</returns>
        </member>
        <member name="M:FlatRedBall.Input.Xbox360GamePad.ButtonRepeatRate(FlatRedBall.Input.Xbox360GamePad.Button,System.Double,System.Double)">
            <summary>
            Returns whether the argument was pushed this frame, or whether it is continually being held down and a "repeat" press
            has occurred.
            </summary>
            <param name="button">The button to test, which includes DPad directions.</param>
            <param name="timeAfterPush">The number of seconds after initial push to wait before raising repeat rates. This value is typically larger than timeBetweenRepeating.</param>
            <param name="timeBetweenRepeating">The number of seconds between repeats once the timeAfterPush. This value is typically smaller than timeAfterPush.</param>
            <returns>Whether the button was pushed or repeated this frame.</returns>
        </member>
        <member name="M:FlatRedBall.Input.Xbox360GamePad.GetButton(FlatRedBall.Input.Xbox360GamePad.Button)">
            <summary>
            Returns an Xbox360ButtonReference for the argument Button.
            </summary>
            <param name="button">The button, such as Button.A</param>
            <returns>The reference, which can then be used to check for input.</returns>
        </member>
        <member name="M:FlatRedBall.Input.Xbox360GamePad.Clear">
            <summary>
            Clears the input on this controller for this frame. This includes
            analog stick values, button values, and trigger values.
            </summary>
        </member>
        <member name="M:FlatRedBall.Input.Xbox360GamePad.CreateDefaultButtonMap">
            <summary>
            Creates a ButtonMap for this controller using the default bindings.  This is 
            a quick way to simulate an Xbox360 controller using the keyboard.
            </summary>
            <remarks>
            This creates the following bindings:
            * Left analog stick = arrow keys
            * A button = A key
            * B button = S key
            * X button = Q key
            * Y button = W key
            * Left trigger = E key
            * Right trigger = R key
            * Left shoulder = D key
            * Right Shoulder = F key
            * Back button = Backspace key
            * Start button = Enter key
            
            This will not simulate that the controller is connected, so you will have to set 
            FakeIsConnected to true if your game checks the connected state.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Input.Xbox360GamePad.IgnoreButtonForOneFrame(FlatRedBall.Input.Xbox360GamePad.Button)">
            <summary>
            Makes this Xbox360Gamepad ignore the argument button for the rest of the current frame.
            </summary>
            <param name="buttonToIgnore">The button that should be ignored for the rest of the current frame.</param>
        </member>
        <member name="M:FlatRedBall.Input.Xbox360GamePad.Update(Microsoft.Xna.Framework.Input.GamePadState)">
            <summary>
            Updates the Xbox360Gamepad according to the argument gamepadState.  This is publicly available for games
            which need to simulate Xbox360Gamepads.
            </summary>
            <remarks>
            This function is normally called automatically by the FlatRedBall Engine
            in its regular update loop.  You only need to call this function if you want
            to override the behavior of the gamepad.  Be sure to call this function after
            FlatRedBallServices.Update, but before any custom game logic (such as ScreenManager.Activity).
            </remarks>
            <param name="gamepadState">The state containing the data for this frame.</param>
        </member>
        <member name="M:FlatRedBall.Input.Xbox360GamePad.SetVibration(System.Single,System.Single)">
            <summary>
            Sets the vibration of the game pad.
            </summary>
            <param name="leftMotor">The low-frequency motor.  Set between 0.0f and 1.0f</param>
            <param name="rightMotor">The high-frequency  motor.  Set between 0.0f and 1.0f</param>
            <returns>True if the vibration motors were successfully set; false if the controller
            was unable to process the request.
            </returns>
        </member>
        <member name="T:FlatRedBall.Input.IPressableInput">
            <summary>
            Provides a common interface for input devices which can have a down/not down state, such as a game pad or mouse button.
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.IPressableInput.IsDown">
            <summary>
            Returns whether the input is down (such as if a key is held or a mouse button is down)
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.IPressableInput.WasJustPressed">
            <summary>
            Returns whether the input was pressed this frame (not down last frame, is down this frame)
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.IPressableInput.WasJustReleased">
            <summary>
            Returns whether the input was released this frame(down last frame, not down this frame)
            </summary>
        </member>
        <member name="T:FlatRedBall.Input.FalsePressableInput">
            <summary>
            Implementation of IPressableInput which always returns false. Can be used for classes
            requiring an IPressableInput implementation
            (like IInputDevice) which sould always return false.
            </summary>
        </member>
        <member name="T:FlatRedBall.Input.IPressableInputExtensions">
            <summary>
            Class including extension methods on the IPressableInput interface.
            </summary>
        </member>
        <member name="M:FlatRedBall.Input.IPressableInputExtensions.Or(FlatRedBall.Input.IPressableInput,FlatRedBall.Input.IPressableInput)">
            <summary>
            Allows making a single PressableInput (of type MultiplePressableInputs) for inputs that combine more than one IPressableInput instance.
            </summary>
            <param name="thisInput">The calling IPressableInput</param>
            <param name="input">The second IPressableInput to add when creating a MultiplePressableInputs</param>
            <returns>The resulting IPressableInput which contains the caller and the argument input.</returns>
        </member>
        <member name="M:FlatRedBall.Input.IPressableInputExtensions.To1DInput(FlatRedBall.Input.IPressableInput)">
            <summary>
            Creates a new I2DInput from the calling IPressableInput which returns a Value of 0 if not pressed, and 1 if pressed.
            </summary>
            <param name="thisInput">The IpressableInput to use as a 1DInput</param>
            <returns>The resulting I1DInput.</returns>
        </member>
        <member name="T:FlatRedBall.Input.MultiplePressableInputs">
            <summary>
            An IPressableInput interface which can contain multiple IPressableInputs. This is useful if a particular action can be
            performed with multiple inputs, such as both the space bar and a game pad's A button being used to make a character jump.
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.MultiplePressableInputs.Inputs">
            <summary>
            The list of inputs to be used for an action.
            </summary>
            <example>
            // The following shows how to add the space bar and the enter key:
            var jumpInput = new MultiplePressableInputs();
            jumpInput.Inputs.Add(InputManager.Keyboard.GetKey(Keys.Space));
            jumpInput.Inputs.Add(InputManager.Keyboard.GetKey(Keys.Enter));
            </example>
        </member>
        <member name="T:FlatRedBall.Input.Zero1DInput">
            <summary>
            Implementation of I1DInput which always returns 0s. Can be used for classes
            requiring an I1DInput implementation
            (like IInputDevice) which should always return 0.
            </summary>
        </member>
        <member name="T:FlatRedBall.Input.I2DInput">
            <summary>
            Provides a common interface for input devices which can return values on the X and Y axis, such as an analog stick.
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.I2DInput.X">
            <summary>
            The X value of the input device, typically between 0 and 1.
            </summary>
            <example>
            // Assuming inputDevice is an I2DInput instance
            this.XVelocity = inputDevice.X * this.MaxSpeed;
            </example>
        </member>
        <member name="P:FlatRedBall.Input.I2DInput.Y">
            <summary>
            The Y value of the input device, typically between 0 and 1.
            </summary>
            <example>
            // Assuming inputDevice is an I2DInput instance
            this.YVelocity = inputDevice.Y * this.MaxSpeed;
            </example>
        </member>
        <member name="P:FlatRedBall.Input.I2DInput.XVelocity">
            <summary>
            The rate of change of the input device on the X axis. This measures how fast the user is changing the device. For example,
            it can be used to tell how fast the user's thumb is moving on an analog stick.
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.I2DInput.YVelocity">
            <summary>
            The rate of change of the input device on the Y axis. This measures how fast the user is changing the device. For example,
            it can be used to tell how fast the user's thumb is moving on an analog stick.
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.I2DInput.Magnitude">
            <summary>
            The distance from (0,0) of the input device. It can be used to detect if any input is being applied on this input device.
            </summary>
        </member>
        <member name="T:FlatRedBall.Input.Zero2DInput">
            <summary>
            Implementation of I2DInput which always returns 0s. Can be used for classes 
            requiring an I2DInput implementation 
            (like IInputDevice) which should always return 0.
            </summary>
        </member>
        <member name="M:FlatRedBall.Input.I2DInputExtensions.GetAngle(FlatRedBall.Input.I2DInput)">
            <summary>
            Returns the angle in radians of the input object, where 0 is to the right, rotating counterclockwise.
            Returns null if the X and Y values are 0 (meaning the input device is centered)
            </summary>
            <param name="instance">The I2DInput instance</param>
            <returns>The angle, or null if X and Y are 0</returns>
        </member>
        <member name="M:FlatRedBall.Input.I2DInputExtensions.CreateHorizontal(FlatRedBall.Input.I2DInput)">
            <summary>
            Creates a new 1DInput that returns the horizontal values from the argument
            I2DInput.
            </summary>
            <param name="instance">The instance to use for the horizontal (X) values</param>
            <returns>A new I1DInput which reflects the 2D horizontal values.</returns>
        </member>
        <member name="M:FlatRedBall.Input.I2DInputExtensions.CreateVertical(FlatRedBall.Input.I2DInput)">
            <summary>
            Creates a new 1DInput that returns the vertical value from the argument
            I2DInput.
            </summary>
            <param name="instance">The instance to use for the vertical (Y) values</param>
            <returns>A new I1DInput which reflects the 2D vertical values.</returns>
        </member>
        <member name="T:FlatRedBall.Input.Multiple2DInputs">
            <summary>
            Provides a single I2DInput implementation which can read from multiple I2DInputs at once.
            </summary>
            <remarks>
            This is useful for games which want to read from multiple devices, such as letting all controllers
            control one character, or letting keyboard and gamepad control a character at the same time.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Input.Multiple2DInputs.Inputs">
            <summary>
            Contains the list of inputs to read from. Any number of inputs can be added to this using the Add method.
            </summary>
            <example>
            // Assuming that keyboard2DInput and gamepad2DInput exist:
            var multipleInputs = new Multiple2DInputs();
            multipleInputs.Inputs.Add(keyboard2DInput);
            multipleInputs.Inputs.Add(gamepad2DInput);
            </example>
        </member>
        <member name="T:FlatRedBall.Input.DirectionalKeyGroup">
            <summary>
            An object implementing I2DInput which can be used to read 2D input from the keyboard.
            Instances of DirectionalKeyGroup are typically created through the Keyboard's 
            Get2DInput method.
            </summary>
        </member>
        <member name="T:FlatRedBall.Instructions.DelegateInstruction">
            <summary>
            Represents an Instruction which can execute an instruction.  This is commonly used
            with IInstructables to perform logic at a delayed time.
            </summary>
        </member>
        <member name="P:FlatRedBall.Instructions.DelegateInstruction.Target">
            <summary>
            The target for DelegateInstruction doesn't have any internal purpose - it's used purely to 
            help games track what has generated instructions.
            </summary>
            <remarks>
            This used to be a null getter only, but now it stores data so that
            projects like Gum can assign owners of an instruction.
            </remarks>
        </member>
        <member name="T:FlatRedBall.Instructions.GenericInstruction">
            <summary>
            Base class for typed Instructions.  This type can be used
            to identify if an Instruction is a generic Instruction.
            </summary>
        </member>
        <member name="P:FlatRedBall.Instructions.GenericInstruction.TypeAsString">
            <summary>
            Returns the FullName of the Type that this GenericInstruction operates on.
            </summary>
        </member>
        <member name="P:FlatRedBall.Instructions.GenericInstruction.Member">
            <summary>
            The Name of the member (such as "X" or "Width") that this instruction modifies.
            </summary>
        </member>
        <member name="P:FlatRedBall.Instructions.GenericInstruction.MemberType">
            <summary>
            
            </summary>
        </member>
        <member name="P:FlatRedBall.Instructions.GenericInstruction.MemberTypeAsString">
            <summary>
            The FullName of the type of the Member that is being modified.  For example, this would return "System.String" for a float member like X.
            </summary>
        </member>
        <member name="P:FlatRedBall.Instructions.GenericInstruction.MemberValueAsString">
            <summary>
            Returns a ToString() representation of the member.
            </summary>
        </member>
        <member name="P:FlatRedBall.Instructions.GenericInstruction.MemberValueAsObject">
            <summary>
            Returns the value of the member casted as an object.
            </summary>
        </member>
        <member name="M:FlatRedBall.Instructions.GenericInstruction.SetTarget(System.Object)">
            <summary>
            Sets the object which this instruction operates on.
            </summary>
            <param name="target">The object that this instruction operates on.</param>
        </member>
        <member name="T:FlatRedBall.Instructions.Instruction`2">
            <summary>
            Generic method of setting a particular variable at a given time.
            </summary>
            <typeparam name="TargetType">The type of object to operate on (ex. PositionedObject)</typeparam>
            <typeparam name="ValueType">The type of the value.  For example, the X value in PositionedObject is float.</typeparam>
        </member>
        <member name="M:FlatRedBall.Instructions.Instruction`2.#ctor">
            <summary>
            Used when deserializing .istx files.  Not to be called otherwise.
            </summary>
        </member>
        <member name="M:FlatRedBall.Instructions.Instruction`2.#ctor(`0,`1,System.Double)">
            <summary>
            To be used when inheriting from this class since you won't need the property's name
            </summary>
            <param name="targetObject">The object to operate on (ex. a PositionedObject)</param>
            <param name="value">The value to set to the property when the instruction is executed</param>
            <param name="timeToExecute">Absolute time to executing this instruction</param>
        </member>
        <member name="M:FlatRedBall.Instructions.Instruction`2.#ctor(`0,System.String,`1,System.Double)">
            <param name="targetObject">The object to operate on (ex. a PositionedObject)</param>
            <param name="member">The name of the property to set</param>
            <param name="value">The value to set to the property when the instruction is executed</param>
            <param name="timeToExecute">Absolute time to executing this instruction</param>
        </member>
        <member name="M:FlatRedBall.Instructions.Instruction`2.Execute">
            <summary>
            Uses reflection to set the target object's property.
            </summary>
            <remarks>If you need more performance out of a section, you can simply
            inherit from this generic class and override the Execute method to avoid 
            delegating the call to the late binder class.</remarks>
        </member>
        <member name="T:FlatRedBall.Instructions.IInstructable">
            <summary>
            Provides an interface for objects which can store Instructions.
            </summary>
        </member>
        <member name="P:FlatRedBall.Instructions.IInstructable.Instructions">
            <summary>
            The list of Instructions that this instance owns.  These instructions usually
            will execute on this instance; however, this is not a requirement.
            </summary>
        </member>
        <member name="T:FlatRedBall.Instructions.Instruction">
            <summary>
            Class that supports the execution of custom logic at a future time.
            </summary>
            <remarks>
            Instructions are either stored and executed through the InstructionManager or
            managed IInstructable instances.
            </remarks>
        </member>
        <member name="F:FlatRedBall.Instructions.Instruction.mTimeToExecute">
            <summary>
            The system time to execute the instruction at.
            </summary>
        </member>
        <member name="F:FlatRedBall.Instructions.Instruction.mCycleTime">
            <summary>
            The amount of time to add to the instruction for cycled execution.  Default of 0
            instructs the executing logic to not cycle the Instruction.
            </summary>
        </member>
        <member name="P:FlatRedBall.Instructions.Instruction.TimeToExecute">
            <summary>
            The game time to check for execution.
            </summary>
            <remarks>
            The TimeManager.CurrentTime property is used for comparisons.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Instructions.Instruction.CycleTime">
            <summary>
            The amount of time between executions for an instruction that cycles. If this value is 0, the
            instruction does not cycle. CycleTime is only considered after an instructions first execution.
            This means that an instruction may be scheuduled to execute in 10 seconds, then after its first execution
            it will repeat every second thereafter.
            </summary>
            <example>
            Setting a CycleTime of 1 means that the instruction will execute ever 1 second after its first execution.
            </example>
        </member>
        <member name="P:FlatRedBall.Instructions.Instruction.Target">
            <summary>
            Gets reference to the object that is the target of the Instruction.
            </summary>
        </member>
        <member name="M:FlatRedBall.Instructions.Instruction.Clone">
            <summary>
            Creates and redturns a member-wise clone.
            </summary>
            <returns>The clone of the calling instance.</returns>
        </member>
        <member name="M:FlatRedBall.Instructions.Instruction.Execute">
            <summary>
            Executes the Instruction.
            </summary>
        </member>
        <member name="M:FlatRedBall.Instructions.Instruction.ExecuteOn(System.Object)">
            <summary>
            Executes an instruction on the target passed as an argument
            </summary>
        </member>
        <member name="T:FlatRedBall.Instructions.InstructionBlueprint">
            <summary>
            A class that can be used to quickly create create identical Instructions for individual targets.
            </summary>
            <remarks>Cannot be serialized as an InstructionBlueprint, but can be converted into an InstructionSave via 
            InstructionSave.FromInstructionBlueprint().</remarks>
        </member>
        <member name="M:FlatRedBall.Instructions.InstructionBlueprint.BuildInstruction(System.Object,System.Double)">
            <summary>
            Builds an Instruction using the information stored in the InstructionBlueprint.
            </summary>
            <param name="target">The object that the returned Instruction will execute on</param>
            <param name="currentTime">The current time to use as an offset for the Instruction's Time of execution</param>
            <throws exception="ArgumentException">If target's type is not this InstructionBlueprint's TargetType</throws>
            <throws exception="NullReferenceException">If this InstructionBlueprint was fully initialized before this call to BuildInstruction.</throws>
            <returns>An Instruction created from this InstructionBlueprint's information</returns>
        </member>
        <member name="T:FlatRedBall.Instructions.InstructionBlueprintList">
            <summary>
            A list of InstructionBlueprint objects
            
            <remarks>Can be used to quickly create InstructionLists for a specific target.</remarks>
            </summary>
        </member>
        <member name="M:FlatRedBall.Instructions.InstructionBlueprintList.BuildInstructionList(System.Object,System.Double)">
            <summary>
            Creates an InstructionList containing Instructions that were created by the InstructionBlueprints in
            this list. 
            </summary>
            <param name="target">The object that the Instructions will be executed on.</param>
            <param name="currentTime">The current time to be used as an offset for each Instruction's execution.</param>
        </member>
        <member name="T:FlatRedBall.Instructions.InstructionList">
            <summary>
            List of Instructions which also provides methods for common
            actions such as sorting and executing the contained Instructions.
            </summary>
        </member>
        <member name="M:FlatRedBall.Instructions.InstructionList.Execute">
            <summary>
            Executes all contained Instructions in order of index.  Contained instructions are not removed.
            </summary>
        </member>
        <member name="P:FlatRedBall.Instructions.InstructionManager.Instructions">
            <summary>
            Holds instructions which will be executed by the InstructionManager
            in its Update method (called automatically by FlatRedBallServices).
            This list is sorted by time.
            </summary>
            <remarks>
            Instructions for managed PositionedObjects like Sprites and Text objects
            should be added to the object's internal InstructionList.  This prevents instructions
            from referencing removed objects and helps with debugging.  This list should only be used
            on un-managed objects or for instructions which do not associate with a particular object.
            </remarks>        
        </member>
        <member name="P:FlatRedBall.Instructions.InstructionManager.IsExecutingInstructions">
            <summary>
            Whether the (automatically called) Update method executes instructions.  Default true.
            </summary>
        </member>
        <member name="M:FlatRedBall.Instructions.InstructionManager.AddSafe(System.Action)">
            <summary>
            Creates a new DelegateInstruction using the argument Action, and adds it to be executed
            on the next frame on the primary thread.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:FlatRedBall.Instructions.InstructionManager.Add(FlatRedBall.Instructions.Instruction)">
            <summary>
            Adds the argument instruction to the InstructionManager, to be executed when its time is reached.
            </summary>
            <param name="instruction">The instruction to remove</param>
        </member>
        <member name="M:FlatRedBall.Instructions.InstructionManager.ExecuteInstructionsOnConsideringTime(FlatRedBall.Instructions.IInstructable)">
            <summary>
            Attempts to execute instructions held by the argument instructable according to the TimeManager.CurrentTime.
            Executed instructions will either be removed or cycled if the CycleTime is greater than 0.
            </summary>
            <param name="instructable">The instructable to execute instructions on.</param>
        </member>
        <member name="M:FlatRedBall.Instructions.InstructionManager.ExecuteInstructionsOnConsideringTime(FlatRedBall.Instructions.IInstructable,System.Double)">
            <summary>
            Attempts to execute instructions held by the argument instruct
            able according to the currentTime value.
            Executed instructions will either be removed or cycled if the CycleTime is greater than 0.
            </summary>
            <param name="instructable">The instructable to execute instructions on.</param>
            <param name="currentTime">The time to compare to instructions in the instructable instance.</param>
        </member>
        <member name="M:FlatRedBall.Instructions.InstructionManager.Remove(FlatRedBall.Instructions.Instruction)">
            <summary>
            Removes the argument instruction from the internal list. A removed instruction will not
            automatically be executed.
            </summary>
            <param name="instruction">The instruction to remove.</param>
        </member>
        <member name="M:FlatRedBall.Instructions.InstructionManager.UncastedSetMember(System.Object,System.String,System.Object)">
            <summary>
            Sets a member on an uncasted object.  If the type of objectToSetOn is known, use
            LateBinder for performance and safety reasons.
            </summary>
            <param name="objectToSetOn">The object whose field or property should be set.</param>
            <param name="memberName">The name of the field or property to set.</param>
            <param name="valueToSet">The value of the field or property to set.</param>
        </member>
        <member name="M:FlatRedBall.Instructions.InstructionManager.Update">
            <summary>
            Performs every-frame updates which include moving queued instructions to the main instruction list and
            executing instructions according to their TimeToExecute.
            </summary>
        </member>
        <member name="T:FlatRedBall.Instructions.InstructionSet">
            <summary>
            Represents a set of KeyframeLists which can be applied to objects or
            used to perform scripted events.
            </summary>
            <remarks>
            When used to perform scripted events, InstructionSets can be compared
            to texture animation.  There are many levels of Lists in an InstructionSet.
            The following comparison to AnimationChainLists provides some clarity to the
            layers:
            <para>
            InstructionSet (List of KeyframeLists) : AnimationChainList (List of AnimationChains)
            </para>
            <para>
            KeyframeList (List of Keyframes - aka InstructionLists) : AnimationChain (List of AnimationFrames)
            </para>
            <para>
            InstructionList (Applied to an object to change any properties) : AnimationFrame (Applied to an object to change its appearance);
            </para>
            </remarks>
        </member>
        <member name="P:FlatRedBall.Instructions.InstructionSet.Item(System.String)">
            <summary>
            Gets a KeyframeList by name.  Returns null if none is found
            </summary>
            <param name="keyframeListName">Name of the KeyframeList to return.</param>
            <returns>Reference to the KeyframeList with the specified name.</returns>
        </member>
        <member name="T:FlatRedBall.Instructions.Interpolation.DoubleInterpolator">
            <summary>
            Provides interpolation for doubles - used for interpolating between
            Keyframes in InstructionSets.
            </summary>
        </member>
        <member name="M:FlatRedBall.Instructions.Interpolation.DoubleInterpolator.Interpolate(System.Double,System.Double,System.Double)">
            <summary>
            Interolates between the two argument doubles using the interpolation value.
            </summary>
            <param name="start">The first or starting value.</param>
            <param name="end">The end value.</param>
            <param name="interpolationValue">A value between 0 and 1 that determines how
            the values are interpolated.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="T:FlatRedBall.Instructions.Interpolation.FloatAngleInterpolator">
            <summary>
            An interpolator which interpolates between angle floats.
            </summary>
        </member>
        <member name="T:FlatRedBall.Instructions.Interpolation.FloatInterpolator">
            <summary>
            An IInterpolator which can interpolate float values.
            </summary>
        </member>
        <member name="T:FlatRedBall.Instructions.Interpolation.IInterpolator">
            <summary>
            Base interface for interpolators - to be used in lists.
            </summary>
        </member>
        <member name="T:FlatRedBall.Instructions.Interpolation.IInterpolator`1">
            <summary>
            Generic interface for an interpolator.  These are used to interpolate
            Keyframes in InstructionSets.
            </summary>
            <typeparam name="T">The type that the Interpolator interpolates.</typeparam>
        </member>
        <member name="M:FlatRedBall.Instructions.Interpolation.IInterpolator`1.Interpolate(`0,`0,System.Double)">
            <summary>
            Interpolates between the first two arguments using the third as the interpolation value.
            </summary>
            <param name="start">The first value to use in interpolation.</param>
            <param name="end">The second value to use in interpolation.</param>
            <param name="interpolationValue">The interpolation value - should be between 0 and 1.</param>
            <returns>The result of the interpolation.</returns>
        </member>
        <member name="T:FlatRedBall.Instructions.Interpolation.IntInterpolator">
            <summary>
            An IInterpolator which can interpolate integer values.
            </summary>
        </member>
        <member name="T:FlatRedBall.Instructions.Interpolation.LongInterpolator">
            <summary>
            Provides interplation methods for longs.
            </summary>
        </member>
        <member name="P:FlatRedBall.Instructions.KeyframeList.Item(System.String)">
            <summary>
            Gets a KeyframeList by name.  Returns null if none is found
            </summary>
            <param name="keyframeName">Name of the KeyframeList to return.</param>
            <returns>Reference to the KeyframeList with the specified name.</returns>
        </member>
        <member name="T:FlatRedBall.Instructions.MethodInstruction">
            <summary>
            Base abstract class for the generic MethodInstruction class.
            </summary>
            <remarks>
            This class is provided to support lists of MethodInstructions.
            </remarks>
        </member>
        <member name="T:FlatRedBall.Instructions.MethodInstruction`1">
            <summary>
            Generic Instruction class which calls a method when executed.
            </summary>
            <typeparam name="T">The type of the object which contains the method to be called.</typeparam>
        </member>
        <member name="T:FlatRedBall.Instructions.Pause.TimedRemovalUnpause">
            <summary>
            Used to pause the timed removal list in the SpriteManager
            </summary>
        </member>
        <member name="F:FlatRedBall.Instructions.Pause.UnpauseInstruction`1.mCreationTime">
            <summary>
            The game time when the instruction was created.  This is compared to the
            TimeManager's CurrentTime property when Execute is called to delay the instructions
            by the appropriate amount of time.
            </summary>
        </member>
        <member name="T:FlatRedBall.Instructions.Reflection.LateBinder`1">
            <summary>
            Provides a simple interface to late bind a class.
            </summary>
            <remarks>The first time you attempt to get or set a property, it will dynamically generate the get and/or set 
            methods and cache them internally.  Subsequent gets uses the dynamic methods without having to query the type's 
            meta data.</remarks>
        </member>
        <member name="P:FlatRedBall.Instructions.Reflection.LateBinder`1.Target">
            <summary>
            The instance that this binder operates on by default
            </summary>
            <remarks>This can be overridden by the caller explicitly passing a target to the indexer</remarks>
        </member>
        <member name="P:FlatRedBall.Instructions.Reflection.LateBinder`1.Item(System.String)">
            <summary>
            Gets or Sets the supplied property on the contained <seealso cref="P:FlatRedBall.Instructions.Reflection.LateBinder`1.Instance"/>
            </summary>
            <exception cref="T:System.InvalidOperationException">Throws if the contained Instance is null.</exception>
        </member>
        <member name="P:FlatRedBall.Instructions.Reflection.LateBinder`1.Item(`0,System.String)">
            <summary>
            Gets or Sets the supplied property on the supplied target
            </summary>
        </member>
        <member name="M:FlatRedBall.Instructions.Reflection.LateBinder`1.SetProperty``1(System.Object,System.String,``0)">
            <summary>
            Sets the supplied property on the supplied target
            </summary>
            <typeparam name="K">the type of the value</typeparam>
        </member>
        <member name="M:FlatRedBall.Instructions.Reflection.LateBinder`1.GetProperty``1(`0,System.String)">
            <summary>
            Gets  the supplied property on the supplied target
            </summary>
            <typeparam name="K">The type of the property being returned</typeparam>
        </member>
        <member name="T:FlatRedBall.Instructions.Reflection.LateBinder`1.DynamicMethodCompiler">
            <summary>
            provides helper functions for late binding a class
            </summary>
            <remarks>
            Class found here:
            http://www.codeproject.com/useritems/Dynamic_Code_Generation.asp
            </remarks>
        </member>
        <member name="T:FlatRedBall.Instructions.Reflection.Operator">
            <summary>
            Enumeration used to define relationships between two values.  Used in MemberCondition.
            </summary>
        </member>
        <member name="T:FlatRedBall.Instructions.Reflection.MemberCondition">
            <summary>
            Base class for the generic MemberCondition class provided for List storage.
            </summary>
        </member>
        <member name="T:FlatRedBall.Instructions.Reflection.MemberCondition`2">
            <summary>
            Class which can be used to query the relationship of a member relative to a value.  This
            can be used in scripting and trigger data.
            </summary>
            <typeparam name="ObjectType">The type of the object containing the property to compare.</typeparam>
            <typeparam name="PropertyType">The type of the property to compare.</typeparam>
        </member>
        <member name="T:FlatRedBall.Instructions.Reflection.PropertyCollection">
            <summary>
            Stores a list of properties and values for those properties (PropertyValuePair)
            </summary>
            <remarks>
            This class can be used to either store states of objects or abstract the setting of states.
            </remarks>
        </member>
        <member name="T:FlatRedBall.Instructions.Reflection.TypedMemberBase">
            <summary>
            Base class for the generic TypedMember class.
            </summary>
        </member>
        <member name="P:FlatRedBall.Instructions.Reflection.TypedMemberBase.CustomTypeName">
            <summary>
            This exists so we can create typed members for types that may not be available in the current assembly.
            It enables Glue to generate code for types it doesn't understand.
            </summary>
        </member>
        <member name="T:FlatRedBall.Instructions.Reflection.TypedMember`1">
            <summary>
            Class containing information about a member which can tell if two instances have
            identical members.
            </summary>
            <typeparam name="T">The type of the member.</typeparam>
        </member>
        <member name="T:FlatRedBall.Instructions.ScriptedAnimations.AnimationSequence">
            <summary>
            A list of TimedKeyframeLists which represents an Animation which can be
            played.
            </summary>
            <remarks>
            This class interfaces with the InstructionSetSaveList class when saving/loading.
            </remarks>
        </member>
        <member name="T:FlatRedBall.Instructions.TimedKeyframeList">
            <summary>
            A list of timed keyframes which can be used to play an animation.
            </summary>
        </member>
        <member name="T:FlatRedBall.Instructions.StaticMethodInstruction">
            <summary>
            Instruction which calls a Static class' method.
            </summary>
        </member>
        <member name="T:FlatRedBall.Instructions.VelocityValueRelationship">
            <summary>
            Stores the related state, velocity, and acceleration values.
            </summary>
            <remarks>
            This is used when interpolating instructions.
            </remarks>
        </member>
        <member name="T:FlatRedBall.IO.BmpLoader">
            <summary>
            Class responsible for creating ImageDatas from BMP files.
            </summary>
        </member>
        <member name="M:FlatRedBall.IO.BmpLoader.GetPixelData(System.String)">
            <summary>
            ImageData takes a fileName (string) and loads the BMP from the file. 
            </summary>
            <param name="fileName"></param>
            <returns>a new ImageData, containing the width, height, and data of the BMP that was loaded</returns>
        </member>
        <member name="T:FlatRedBall.IO.Csv.CsvFileManager">
            <summary>
            Class providing methods for interacting with .CSV spreadsheet files.
            </summary>
        </member>
        <member name="T:FlatRedBall.IO.Csv.CsvReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to CSV data.  
            </summary>
        </member>
        <member name="T:FlatRedBall.IO.Csv.CsvReader.DataReaderValidations">
            <summary>
            Defines the data reader validations.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader.DataReaderValidations.None">
            <summary>
            No validation.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader.DataReaderValidations.IsInitialized">
            <summary>
            Validate that the data reader is initialized.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader.DataReaderValidations.IsNotClosed">
            <summary>
            Validate that the data reader is not closed.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader.DefaultBufferSize">
            <summary>
            Defines the default buffer size.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader.DefaultDelimiter">
            <summary>
            Defines the default delimiter character separating each field.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader.DefaultQuote">
            <summary>
            Defines the default quote character wrapping every field.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader.DefaultEscape">
            <summary>
            Defines the default escape character letting insert quotation characters inside a quoted field.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader.DefaultComment">
            <summary>
            Defines the default comment character indicating that a line is commented out.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._fieldHeaderComparer">
            <summary>
            Contains the field header comparer.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._reader">
            <summary>
            Contains the <see cref="T:TextReader"/> pointing to the CSV file.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._bufferSize">
            <summary>
            Contains the buffer size.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._comment">
            <summary>
            Contains the comment character indicating that a line is commented out.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._escape">
            <summary>
            Contains the escape character letting insert quotation characters inside a quoted field.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._delimiter">
            <summary>
            Contains the delimiter character separating each field.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._quote">
            <summary>
            Contains the quotation character wrapping every field.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._trimSpaces">
            <summary>
            Indicates if spaces at the start and end of a field are trimmed.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._hasHeaders">
            <summary>
            Indicates if field names are located on the first non commented line.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._defaultParseErrorAction">
            <summary>
            Contains the default action to take when a parsing error has occured.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._missingFieldAction">
            <summary>
            Contains the action to take when a field is missing.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._supportsMultiline">
            <summary>
            Indicates if the reader supports multiline.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._skipEmptyLines">
            <summary>
            Indicates if the reader will skip empty lines.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._initialized">
            <summary>
            Indicates if the class is initialized.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._fieldHeaders">
            <summary>
            Contains the field headers.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._fieldHeaderIndexes">
            <summary>
            Contains the dictionary of field indexes by header. The key is the field name and the value is its index.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._currentRecordIndex">
            <summary>
            Contains the current record index in the CSV file.
            A value of <see cref="M:Int32.MinValue"/> means that the reader has not been initialized yet.
            Otherwise, a negative value means that no record has been read yet.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._nextFieldStart">
            <summary>
            Contains the starting position of the next unread field.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._nextFieldIndex">
            <summary>
            Contains the index of the next unread field.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._fields">
            <summary>
            Contains the array of the field values for the current record.
            A null value indicates that the field have not been parsed.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._fieldCount">
            <summary>
            Contains the maximum number of fields to retrieve for each record.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._buffer">
            <summary>
            Contains the read buffer.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._bufferLength">
            <summary>
            Contains the current read buffer length.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._eof">
            <summary>
            Indicates if the end of the reader has been reached.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._firstRecordInCache">
            <summary>
            Indicates if the first record is in cache.
            This can happen when initializing a reader with no headers
            because one record must be read to get the field count automatically
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._missingFieldsFlag">
            <summary>
            Indicates if fields are missing for the current record.
            Resets after each successful record read.
            </summary>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.#ctor(System.IO.TextReader,System.Boolean)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="bufferSize">The buffer size in bytes.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char,System.Int32)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <param name="bufferSize">The buffer size in bytes.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char,System.Char,System.Char,System.Char,System.Boolean)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <param name="quote">The quotation character wrapping every field (default is ''').</param>
            <param name="escape">
            The escape character letting insert quotation characters inside a quoted field (default is '\').
            If no escape character, set to '\0' to gain some performance.
            </param>
            <param name="comment">The comment character indicating that a line is commented out (default is '#').</param>
            <param name="trimSpaces"><see langword="true"/> if spaces at the start and end of a field are trimmed, otherwise, <see langword="false"/>. Default is <see langword="true"/>.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char,System.Char,System.Char,System.Char,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <param name="quote">The quotation character wrapping every field (default is ''').</param>
            <param name="escape">
            The escape character letting insert quotation characters inside a quoted field (default is '\').
            If no escape character, set to '\0' to gain some performance.
            </param>
            <param name="comment">The comment character indicating that a line is commented out (default is '#').</param>
            <param name="trimSpaces"><see langword="true"/> if spaces at the start and end of a field are trimmed, otherwise, <see langword="false"/>. Default is <see langword="true"/>.</param>
            <param name="bufferSize">The buffer size in bytes.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="bufferSize"/> must be 1 or more.
            </exception>
        </member>
        <member name="E:FlatRedBall.IO.Csv.CsvReader.ParseError">
            <summary>
            Occurs when there is an error while parsing the CSV stream.
            </summary>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.OnParseError(FlatRedBall.IO.Csv.ParseErrorEventArgs)">
            <summary>
            Raises the <see cref="M:ParseError"/> event.
            </summary>
            <param name="e">The <see cref="T:FlatRedBall.IO.Csv.ParseErrorEventArgs"/> that contains the event data.</param>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CsvReader.Comment">
            <summary>
            Gets the comment character indicating that a line is commented out.
            </summary>
            <value>The comment character indicating that a line is commented out.</value>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CsvReader.Escape">
            <summary>
            Gets the escape character letting insert quotation characters inside a quoted field.
            </summary>
            <value>The escape character letting insert quotation characters inside a quoted field.</value>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CsvReader.Delimiter">
            <summary>
            Gets the delimiter character separating each field.
            </summary>
            <value>The delimiter character separating each field.</value>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CsvReader.Quote">
            <summary>
            Gets the quotation character wrapping every field.
            </summary>
            <value>The quotation character wrapping every field.</value>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CsvReader.HasHeaders">
            <summary>
            Indicates if field names are located on the first non commented line.
            </summary>
            <value><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CsvReader.TrimSpaces">
            <summary>
            Indicates if spaces at the start and end of a field are trimmed.
            </summary>
            <value><see langword="true"/> if spaces at the start and end of a field are trimmed, otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CsvReader.BufferSize">
            <summary>
            Gets the buffer size.
            </summary>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CsvReader.DefaultParseErrorAction">
            <summary>
            Gets or sets the default action to take when a parsing error has occured.
            </summary>
            <value>The default action to take when a parsing error has occured.</value>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CsvReader.MissingFieldAction">
            <summary>
            Gets or sets the action to take when a field is missing.
            </summary>
            <value>The action to take when a field is missing.</value>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CsvReader.SupportsMultiline">
            <summary>
            Gets or sets a value indicating if the reader supports multiline fields.
            </summary>
            <value>A value indicating if the reader supports multiline field.</value>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CsvReader.SkipEmptyLines">
            <summary>
            Gets or sets a value indicating if the reader will skip empty lines.
            </summary>
            <value>A value indicating if the reader will skip empty lines.</value>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CsvReader.FieldCount">
            <summary>
            Gets the maximum number of fields to retrieve for each record.
            </summary>
            <value>The maximum number of fields to retrieve for each record.</value>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CsvReader.EndOfStream">
            <summary>
            Gets a value that indicates whether the current stream position is at the end of the stream.
            </summary>
            <value><see langword="true"/> if the current stream position is at the end of the stream; otherwise <see langword="false"/>.</value>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.GetFieldHeaders">
            <summary>
            Gets the field headers.
            </summary>
            <returns>The field headers or an empty array if headers are not supported.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CsvReader.CurrentRecordIndex">
            <summary>
            Gets the current record index in the CSV file.
            </summary>
            <value>The current record index in the CSV file.</value>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CsvReader.Item(System.Int32,System.String)">
            <summary>
            Gets the field with the specified name and record position. <see cref="M:hasHeaders"/> must be <see langword="true"/>.
            </summary>
            <value>
            The field with the specified name and record position.
            </value>
            <exception cref="T:ArgumentNullException">
            	<paramref name="field"/> is <see langword="null"/> or an empty string.
            </exception>
            <exception cref="T:InvalidOperationException">
            The CSV does not have headers (<see cref="M:HasHeaders"/> property is <see langword="false"/>).
            </exception>
            <exception cref="T:ArgumentException">
            	<paramref name="field"/> not found.
            </exception>
            <exception cref="T:ArgumentOutOfRangeException">
            	Record index must be > 0.
            </exception>
            <exception cref="T:InvalidOperationException">
            	Cannot move to a previous record in forward-only mode.
            </exception>
            <exception cref="T:EndOfStreamException">
            	Cannot read record at <paramref name="record"/>.
            </exception>
            <exception cref="T:MalformedCsvException">
            	The CSV appears to be corrupt at the current position.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CsvReader.Item(System.Int32,System.Int32)">
            <summary>
            Gets the field at the specified index and record position.
            </summary>
            <value>
            The field at the specified index and record position.
            A <see langword="null"/> is returned if the field cannot be found for the record.
            </value>
            <exception cref="T:ArgumentOutOfRangeException">
            	<paramref name="field"/> must be included in [0, <see cref="M:FieldCount"/>[.
            </exception>
            <exception cref="T:ArgumentOutOfRangeException">
            	Record index must be > 0.
            </exception>
            <exception cref="T:InvalidOperationException">
            	Cannot move to a previous record in forward-only mode.
            </exception>
            <exception cref="T:EndOfStreamException">
            	Cannot read record at <paramref name="record"/>.
            </exception>
            <exception cref="T:MalformedCsvException">
            	The CSV appears to be corrupt at the current position.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CsvReader.Item(System.String)">
            <summary>
            Gets the field with the specified name. <see cref="M:hasHeaders"/> must be <see langword="true"/>.
            </summary>
            <value>
            The field with the specified name.
            </value>
            <exception cref="T:ArgumentNullException">
            	<paramref name="field"/> is <see langword="null"/> or an empty string.
            </exception>
            <exception cref="T:InvalidOperationException">
            The CSV does not have headers (<see cref="M:HasHeaders"/> property is <see langword="false"/>).
            </exception>
            <exception cref="T:ArgumentException">
            	<paramref name="field"/> not found.
            </exception>
            <exception cref="T:MalformedCsvException">
            	The CSV appears to be corrupt at the current position.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CsvReader.Item(System.Int32)">
            <summary>
            Gets the field at the specified index.
            </summary>
            <value>The field at the specified index.</value>
            <exception cref="T:ArgumentOutOfRangeException">
            	<paramref name="field"/> must be included in [0, <see cref="M:FieldCount"/>[.
            </exception>
            <exception cref="T:InvalidOperationException">
            	No record read yet. Call ReadLine() first.
            </exception>
            <exception cref="T:MalformedCsvException">
            	The CSV appears to be corrupt at the current position.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.EnsureInitialize">
            <summary>
            Ensures that the reader is initialized.
            </summary>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.GetFieldIndex(System.String)">
            <summary>
            Gets the field index for the provided header.
            </summary>
            <param name="header">The header to look for.</param>
            <returns>The field index for the provided header. -1 if not found.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.CopyCurrentRecordTo(System.String[])">
            <summary>
            Copies the field array of the current record to a one-dimensional array, starting at the beginning of the target array.
            </summary>
            <param name="array"> The one-dimensional <see cref="T:Array"/> that is the destination of the fields of the current record.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="array"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.CopyCurrentRecordTo(System.String[],System.Int32)">
            <summary>
            Copies the field array of the current record to a one-dimensional array, starting at the beginning of the target array.
            </summary>
            <param name="array"> The one-dimensional <see cref="T:Array"/> that is the destination of the fields of the current record.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentOutOfRangeException">
            	<paramref name="index"/> is les than zero or is equal to or greater than the length <paramref name="array"/>. 
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No current record.
            </exception>
            <exception cref="T:System.ArgumentException">
            	The number of fields in the record is greater than the available space from <paramref name="index"/> to the end of <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.GetCurrentRawData">
            <summary>
            Gets the current raw CSV data.
            </summary>
            <remarks>Used for exception handling purpose.</remarks>
            <returns>The current raw CSV data.</returns>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.IsWhiteSpace(System.Char)">
            <summary>
            Indicates whether the specified Unicode character is categorized as white space.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns><see langword="true"/> if <paramref name="c"/> is white space; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.MoveTo(System.Int64)">
            <summary>
            Moves to the specified record index.
            </summary>
            <param name="record">The record index.</param>
            <exception cref="T:ArgumentOutOfRangeException">
            	Record index must be > 0.
            </exception>
            <exception cref="T:InvalidOperationException">
            	Cannot move to a previous record in forward-only mode.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.ParseNewLine(System.Int32@)">
            <summary>
            Parses a new line delimiter.
            </summary>
            <param name="pos">The starting position of the parsing. Will contain the resulting end position.</param>
            <returns><see langword="true"/> if a new line delimiter was found; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.IsNewLine(System.Int32)">
            <summary>
            Determines whether the character at the specified position is a new line delimiter.
            </summary>
            <param name="pos">The position of the character to verify.</param>
            <returns>
            	<see langword="true"/> if the character at the specified position is a new line delimiter; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.ReadBuffer">
            <summary>
            Fills the buffer with data from the reader.
            </summary>
            <returns><see langword="true"/> if data was successfully read; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.ReadField(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Reads the field at the specified index.
            Any unread fields with an inferior index will also be read as part of the required parsing.
            </summary>
            <param name="field">The field index.</param>
            <param name="initializing">Indicates if the reader is currently initializing.</param>
            <param name="discardValue">Indicates if the value(s) are discarded.</param>
            <returns>
            The field at the specified index. 
            A <see langword="null"/> indicates that an error occured or that the last field has been reached during initialization.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="field"/> is out of range.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	There is no current record.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.ReadNextRecord">
            <summary>
            Reads the next record.
            </summary>
            <returns><see langword="true"/> if a record has been successfully reads; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.ReadNextRecord(System.Boolean,System.Boolean)">
            <summary>
            Reads the next record.
            </summary>
            <param name="onlyReadHeaders">
            Indicates if the reader will proceed to the next record after having read headers.
            <see langword="true"/> if it stops after having read headers; otherwise, <see langword="false"/>.
            </param>
            <param name="skipToNextLine">
            Indicates if the reader will skip directly to the next line without parsing the current one. 
            To be used when an error occurs.
            </param>
            <returns><see langword="true"/> if a record has been successfully reads; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.SkipEmptyAndCommentedLines(System.Int32@)">
            <summary>
            Skips empty and commented lines.
            If the end of the buffer is reached, its content be discarded and filled again from the reader.
            </summary>
            <param name="pos">
            The position in the buffer where to start parsing. 
            Will contains the resulting position after the operation.
            </param>
            <returns><see langword="true"/> if the end of the reader has not been reached; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.DoSkipEmptyAndCommentedLines(System.Int32@)">
            <summary>
            <para>Worker method.</para>
            <para>Skips empty and commented lines.</para>
            </summary>
            <param name="pos">
            The position in the buffer where to start parsing. 
            Will contains the resulting position after the operation.
            </param>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.SkipWhiteSpaces(System.Int32@)">
            <summary>
            Skips whitespace characters.
            </summary>
            <param name="pos">The starting position of the parsing. Will contain the resulting end position.</param>
            <returns><see langword="true"/> if the end of the reader has not been reached; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.SkipToNextLine(System.Int32@)">
            <summary>
            Skips ahead to the next NewLine character.
            If the end of the buffer is reached, its content be discarded and filled again from the reader.
            </summary>
            <param name="pos">
            The position in the buffer where to start parsing. 
            Will contains the resulting position after the operation.
            </param>
            <returns><see langword="true"/> if the end of the reader has not been reached; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.HandleParseError(System.Exception,System.Int32@)">
            <summary>
            Handles a parsing error.
            </summary>
            <param name="error">The parsing error that occured.</param>
            <param name="pos">The current position in the buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="error"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.HandleMissingField(System.String,System.Int32,System.Int32@)">
            <summary>
            Handles a missing field error.
            </summary>
            <param name="value">The partially parsed value, if available.</param>
            <param name="fieldIndex">The missing field index.</param>
            <param name="currentPosition">The current position in the raw data.</param>
            <returns>
            The resulting value according to <see cref="M:MissingFieldAction"/>.
            If the action is set to <see cref="T:MissingFieldAction.TreatAsParseError"/>,
            then the parse error will be handled according to <see cref="P:FlatRedBall.IO.Csv.CsvReader.DefaultParseErrorAction"/>.
            </returns>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.ValidateDataReader(FlatRedBall.IO.Csv.CsvReader.DataReaderValidations)">
            <summary>
            Validates the state of the data reader.
            </summary>
            <param name="validations">The validations to accomplish.</param>
            <exception cref="T:System.InvalidOperationException">
            No current record.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This operation is invalid when the reader is closed.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.CopyFieldToArray(System.Int32,System.Int64,System.Array,System.Int32,System.Int32)">
            <summary>
            Copy the value of the specified field to an array.
            </summary>
            <param name="field">The index of the field.</param>
            <param name="fieldOffset">The offset in the field value.</param>
            <param name="destinationArray">The destination array where the field value will be copied.</param>
            <param name="destinationOffset">The destination array offset.</param>
            <param name="length">The number of characters to copy from the field value.</param>
            <returns></returns>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.GetEnumerator">
            <summary>
            Returns an <see cref="T:RecordEnumerator"/>  that can iterate through CSV records.
            </summary>
            <returns>An <see cref="T:RecordEnumerator"/>  that can iterate through CSV records.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.System#Collections#Generic#IEnumerable{System#String[]}#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generics.IEnumerator"/>  that can iterate through CSV records.
            </summary>
            <returns>An <see cref="T:System.Collections.Generics.IEnumerator"/>  that can iterate through CSV records.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/>  that can iterate through CSV records.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/>  that can iterate through CSV records.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._allocStack">
            <summary>
            Contains the stack when the object was allocated.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._isDisposed">
            <summary>
            Contains the disposed status flag.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._lock">
            <summary>
            Contains the locking object for multi-threading purpose.
            </summary>
        </member>
        <member name="E:FlatRedBall.IO.Csv.CsvReader.Disposed">
            <summary>
            Occurs when the instance is disposed of.
            </summary>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CsvReader.IsDisposed">
            <summary>
            Gets a value indicating whether the instance has been disposed of.
            </summary>
            <value>
            	<see langword="true"/> if the instance has been disposed of; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.OnDisposed(System.EventArgs)">
            <summary>
            Raises the <see cref="M:Disposed"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.CheckDisposed">
            <summary>
            Checks if the instance has been disposed of, and if it has, throws an <see cref="T:System.ComponentModel.ObjectDisposedException"/>; otherwise, does nothing.
            </summary>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            	The instance has been disposed of.
            </exception>
            <remarks>
            	Derived classes should call this method at the start of all methods and properties that should not be accessed after a call to <see cref="M:Dispose()"/>.
            </remarks>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.Dispose">
            <summary>
            Releases all resources used by the instance.
            </summary>
            <remarks>
            	Calls <see cref="M:Dispose(Boolean)"/> with the disposing parameter set to <see langword="true"/> to free unmanaged and managed resources.
            </remarks>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by this instance and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            	<see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the instance is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="T:FlatRedBall.IO.Csv.CsvReader.RecordEnumerator">
            <summary>
            Supports a simple iteration over the records of a <see cref="T:CsvReader"/>.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader.RecordEnumerator._reader">
            <summary>
            Contains the enumerated <see cref="T:CsvReader"/>.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader.RecordEnumerator._current">
            <summary>
            Contains the current record.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader.RecordEnumerator._currentRecordIndex">
            <summary>
            Contains the current record index.
            </summary>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.RecordEnumerator.#ctor(FlatRedBall.IO.Csv.CsvReader)">
            <summary>
            Initializes a new instance of the <see cref="T:RecordEnumerator"/> class.
            </summary>
            <param name="reader">The <see cref="T:CsvReader"/> to iterate over.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CsvReader.RecordEnumerator.Current">
            <summary>
            Gets the current record.
            </summary>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.RecordEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next record of the CSV.
            </summary>
            <returns><see langword="true"/> if the enumerator was successfully advanced to the next record, <see langword="false"/> if the enumerator has passed the end of the CSV.</returns>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.RecordEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first record in the CSV.
            </summary>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CsvReader.RecordEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current record.
            </summary>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.RecordEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:FlatRedBall.IO.Csv.ParseErrorEventArgs">
            <summary>
            Provides data for the <see cref="M:CsvReader.ParseError"/> event.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.ParseErrorEventArgs._error">
            <summary>
            Contains the error that occured.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.ParseErrorEventArgs._action">
            <summary>
            Contains the action to take.
            </summary>
        </member>
        <member name="M:FlatRedBall.IO.Csv.ParseErrorEventArgs.#ctor(System.Exception,FlatRedBall.IO.Csv.ParseErrorAction)">
            <summary>
            Initializes a new instance of the ParseErrorEventArgs class.
            </summary>
            <param name="error">The error that occured.</param>
            <param name="defaultAction">The default action to take.</param>
        </member>
        <member name="P:FlatRedBall.IO.Csv.ParseErrorEventArgs.Error">
            <summary>
            Gets the error that occured.
            </summary>
            <value>The error that occured.</value>
        </member>
        <member name="P:FlatRedBall.IO.Csv.ParseErrorEventArgs.Action">
            <summary>
            Gets or sets the action to take.
            </summary>
            <value>The action to take.</value>
        </member>
        <member name="T:FlatRedBall.IO.Csv.MissingFieldAction">
            <summary>
            Specifies the action to take when a field is missing.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.MissingFieldAction.ParseError">
            <summary>
            Treat as a parsing error.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.MissingFieldAction.ReplaceByEmpty">
            <summary>
            Replaces by an empty value.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.MissingFieldAction.ReplaceByNull">
            <summary>
            Replaces by a null value (<see langword="null"/>).
            </summary>
        </member>
        <member name="T:FlatRedBall.IO.Csv.ParseErrorAction">
            <summary>
            Specifies the action to take when a parsing error has occured.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.ParseErrorAction.RaiseEvent">
            <summary>
            Raises the <see cref="M:CsvReader.ParseError"/> event.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.ParseErrorAction.AdvanceToNextLine">
            <summary>
            Tries to advance to next line.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.ParseErrorAction.ThrowException">
            <summary>
            Throws an exception.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvHeader.Name">
            <summary>
            The name of the header - such as "Health"
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvHeader.IsRequired">
            <summary>
            Whether objects must have a value in this header.  This is true for dictionaries, and to
            help the csv deserialization understand when a column belongs to a new instance or if it is
            a column used for lists. Note that setting this value to true will not automatically update the
            OriginalText, which should have "required" if the value is set to true
            </summary>
        </member>
        <member name="T:FlatRedBall.IO.Csv.RuntimeCsvRepresentation">
            <summary>
            Represents the raw data loaded from a csv file.  This is
            used if the data must be processed or converted by hand to
            other object types.
            </summary>
        </member>
        <member name="P:FlatRedBall.IO.FileManager.PreserveCase">
            <summary>
            Whether file paths should be preserved as mixed case. If false 
            all file paths will be made to-lower.
            </summary>
        </member>
        <member name="P:FlatRedBall.IO.FileManager.RelativeDirectory">
            <summary>
            The directory that FlatRedBall will use when loading assets.  Defaults to the application's directory.
            </summary>
        </member>
        <member name="P:FlatRedBall.IO.FileManager.UserApplicationData">
            <summary>
            Gets the path to the user specific application data directory.
            </summary>
            <remarks>If your game/application will be writing anything to the file system, you will want 
            to do so somewhere in this directory.  The reason for this is because you cannot anticipate
            whether the user will have the needed permissions to write to the directory where the 
            executable lives.</remarks>
            <example>C:\Documents and Settings\&lt;username&gt;\Application Data</example> 
        </member>
        <member name="M:FlatRedBall.IO.FileManager.FileExists(System.String)">
            <summary>
            Returns whether the file exists considering the relative directory.
            </summary>
            <param name="fileName">The file to search for.</param>
            <returns>Whether the argument file exists.</returns>
            <remarks>
            The PC platform can use the File.Exists check, but other platforms like Android and iOS do not provide direct access to
            a project's content. Therefore this internally will use the preferred way of checking for files per platform.
            iOS and Android use the TitleContainer.OpenStream method.
            </remarks>
        </member>
        <member name="M:FlatRedBall.IO.FileManager.FindFileInDirectory(System.String,System.String)">
            <summary>
            Searches the passed directory and all subdirectories for the passed file.
            </summary>
            <param name="fileToFind">The name of the file including extension.</param>
            <param name="directory">The directory to search in, including all subdirectories.</param>
            <returns>The full path of the first file found matching the name, or an empty string if none is found.</returns>
        </member>
        <member name="M:FlatRedBall.IO.FileManager.FindFileInDirectory(System.String)">
            <summary>
            Searches the executable's director and all subdirectories for the passed file.
            </summary>
            <param name="fileToFind">The name of the file which may or may not include an extension.</param>
            <returns>The full path of the first file found matching the name, or an empty string if none is found</returns>
        </member>
        <member name="M:FlatRedBall.IO.FileManager.GetExtension(System.String)">
            <summary>
            Returns the extension in a filename.
            </summary>
            <remarks>
            The extension returned will not contain a period.
            
            <para>
            <code>
            // this code will return a string containing "png", not ".png"
            FileManager.GetExtension(@"FolderName/myImage.png");
            </code>
            </para>
            </remarks>
            <param name="fileName">The filename.</param>
            <returns>Returns the extension or an empty string if no period is found in the filename.</returns>
        </member>
        <member name="M:FlatRedBall.IO.FileManager.GetAllFilesInDirectory(System.String)">
            <summary>
            Returns a List containing all of the files found in a particular directory and its subdirectories.
            </summary>
            <param name="directory">The directory to search in.</param>
            <returns></returns>
        </member>
        <member name="M:FlatRedBall.IO.FileManager.GetAllFilesInDirectory(System.String,System.String)">
            <summary>
            Returns a List containing all files which match the fileType argument which are 
            in the directory argument or a subfolder.  This recurs, returning all files.
            </summary>
            <param name="directory">String representing the directory to search.  If an empty
            string is passed, the method will search starting in the directory holding the .exe.</param>
            <param name="fileType">The file type to search for specified as an extension.  The extension
            can either have a period or not.  That is ".jpg" and "jpg" are both valid fileType arguments.  An empty
            or null value for this parameter will return all files regardless of file type.</param>
            <returns>A list containing all of the files found which match the fileType.</returns>
        </member>
        <member name="M:FlatRedBall.IO.FileManager.GetAllFilesInDirectory(System.String,System.String,System.Int32)">
            <summary>
            Returns a List containing all files which match the fileType argument which are within
            the depthToSearch folder range relative to the directory argument.
            </summary>
            <param name="directory">String representing the directory to search.  If an empty
            string is passed, the method will search starting in the directory holding the .exe.</param>
            <param name="fileType">The file type to search for specified as an extension.  The extension
            can either have a period or not.  That is ".jpg" and "jpg" are both valid fileType arguments.  An empty
            or null value for this parameter will return all files regardless of file type.</param>
            <param name="depthToSearch">The depth to search through.  If the depthToSearch
            is 0, only the argument directory will be searched.</param>
            <returns>A list containing all of the files found which match the fileType.</returns>
        </member>
        <member name="M:FlatRedBall.IO.FileManager.GetUserFolder(System.String)">
            <summary>
            Gets a folder for the user name. This user is a unique key specific to this game.
            </summary>
            <param name="userName">The user name, which can be anything for a particular game. If multiple profiles are not stored, then a name like "global" can be used.</param>
            <returns>The folder for the current user.</returns>
        </member>
        <member name="M:FlatRedBall.IO.FileManager.InitializeUserFolder(System.String)">
            <summary>
            Creates a folder for the given user name, which is a unique key for the current app.
            This method must be called before GetUserFolder is called.
            </summary>
            <param name="userName">The user name, which can be anything for a particular game. If multiple profiles are not stored, then a name like "global" can be used.</param>
        </member>
        <member name="M:FlatRedBall.IO.FileManager.IsGraphicFile(System.String)">
            <summary>
            Determines whether a particular file is a graphical file that can be loaded by the FRB Engine.
            </summary>
            <remarks>
            This method does conducts the simple test of looking at the extension of the filename.  If the extension inaccurately
            represents the actual format of the file, the method may also inaccurately report whether the file is graphical.
            </remarks>
            <param name="fileToTest">The file name to test.</param>
            <returns>Whether the file is a graphic file.</returns>
        </member>
        <member name="M:FlatRedBall.IO.FileManager.RemoveExtension(System.String)">
            <summary>
            Returns the fileName without an extension, or makes no changes if fileName has no extension.
            </summary>
            <param name="fileName">The file name.</param>
            <returns>The file name with extension removed if an extension existed.</returns>
        </member>
        <member name="M:FlatRedBall.IO.FileManager.RemovePath(System.String@)">
            <summary>
            Modifies the fileName by removing its path, or makes no changes if the fileName has no path.
            </summary>
            <param name="fileName">The file name to change</param>
        </member>
        <member name="M:FlatRedBall.IO.FileManager.RemovePath(System.String)">
            <summary>
            Returns the fileName without a path, or makes no changes if the fileName has no path.
            </summary>
            <param name="fileName">The file name.</param>
            <returns>The modified fileName if a path is found.</returns>
        </member>
        <member name="M:FlatRedBall.IO.FileManager.ResetRelativeToCurrentDirectory">
            <summary>
            Sets the relative directory to the current directory.
            </summary>
            <remarks>
            The current directory is not necessarily the same as the directory of the .exe.  If the 
            .exe is called from a different location (such as the command line in a different folder),
            the current directory will differ.
            </remarks>
        </member>
        <member name="M:FlatRedBall.IO.FileManager.ReplaceSlashes(System.String@)">
            <summary>
            Replaces back slashes with forward slashes, but
            doesn't break network addresses.
            </summary>
            <param name="stringToReplace">The string to replace slashes in.</param>
        </member>
        <member name="M:FlatRedBall.IO.FilePath.#ctor(System.String)">
            <summary>
            Creates a file path for the original.
            If this is an absolute file, then it is stored as such and the Standaridzed property will return the same absolute file. 
            If it is relative, then Standardized prepends the current relative directory.
            </summary>
            <param name="path">the absolute or relative path</param>
        </member>
        <member name="T:FlatRedBall.IO.PaletteInfo">
            <summary>
            Contains an indexed array of Colors to be used by images with ColorType 3 and possibly ColorTypes
            2 and 6.
            </summary>
        </member>
        <member name="T:FlatRedBall.IO.RGB">
            <summary>
            Simple struct used to hold sample values.
            </summary>
        </member>
        <member name="T:FlatRedBall.IO.GifLoader">
            <summary>
            Class responsible for loading GIF files.
            </summary>
            <remarks>
            For information, see:
            http://www.fileformat.info/format/gif/
            </remarks>
        </member>
        <member name="T:FlatRedBall.IO.Gif.ImageDataList">
            <summary>
            A list of ImageDatas with timing information on each element.
            </summary>
            <remarks>
            This class is used when loading GIF files to an AnimationChain.
            </remarks>
        </member>
        <member name="T:FlatRedBall.IO.StateManager">
            <summary>Note: this class will box value types, use only to store system state to allow recovery, 
            not in-game state while in a loop.</summary>
        </member>
        <member name="E:FlatRedBall.IO.StateManager.Activating">
            <summary>This event is raised when the game is being resumed after being deactivated.</summary>
        </member>
        <member name="E:FlatRedBall.IO.StateManager.Deactivating">
            <summary>This event is raised when state should be saved.</summary>
        </member>
        <member name="P:FlatRedBall.IO.StateManager.WasActivated">
            <summary>Will be true of the Activating event was raised.</summary>
        </member>
        <member name="M:FlatRedBall.IO.StateManager.Get``1(System.String)">
            <summary>Casts the key value to "T".</summary>
            <returns>default(T) if the value is not found in state manager.</returns>
        </member>
        <member name="P:FlatRedBall.IO.StateManager.Item(System.String)">
            <returns>Returns the key value, null if not found</returns>
        </member>
        <member name="M:FlatRedBall.IO.StateManager.Initialize">
            <summary>should be after events are subscribed to.</summary>
        </member>
        <member name="M:FlatRedBall.IO.StateManager.OnActivating">
            <summary>Raises the Activating event.</summary>
        </member>
        <member name="M:FlatRedBall.IO.StateManager.OnDeactivating">
            <summary>Raises the Deactivating event.</summary>
        </member>
        <member name="P:FlatRedBall.IO.StateManager.Current">
            <summary>Singleton instance</summary>
        </member>
        <member name="T:FlatRedBall.IO.StateManager.DefaultStateManager">
            <summary>Simple implementation ... keeps state in memory, does not save anywhere.
            Also, Activated and Deactivated events will never raise.</summary>
            <remarks>This implementation is for cross platform support on non-windows phone platforms</remarks>
        </member>
        <member name="M:FlatRedBall.Localization.LocalizationManager.TranslateForLanguage(System.String,System.Int32)">
            <summary>
            Returns the translated string for the argument language. If stringId is null, "NULL STRING" is returned.
            </summary>
            <param name="stringID">The stringId to translate.</param>
            <param name="language">The language index. Typically 0 is the string IDs, and languages begin with index 1</param>
            <returns>The translated string.</returns>
        </member>
        <member name="M:FlatRedBall.Localization.LocalizationManager.GetLanguageDatabaseCopy">
            <summary>
            Grabs a dictionary with a copy of all the localization database keys and the current language values. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:FlatRedBall.ManagedSpriteGroups.SpriteFrameCustomBehavior">
            <summary>
            Delegate for methods which can be assigned to the SpriteFrame
            for every-frame custom logic.
            </summary>
            <remarks>
            <seealso cref="!:FlatRedBall.ManagedSpriteGroups.SpriteFrame.CustomBehavior"/>
            </remarks>
            <param name="spriteFrame">The SpriteFrame on which the logic should execute.</param>
        </member>
        <member name="T:FlatRedBall.ManagedSpriteGroups.SpriteFrame">
            <summary>
            Visible object with static-width borders.
            </summary>
            <remarks>
            SpriteFrames are often used for creating UI because their static-width
            borders make single-texture UI entities easy to construct and manage.
            <para>
            SpriteFrames achieve a static-width border by 
            
            </para>
            </remarks>
        </member>
        <member name="T:FlatRedBall.ManagedSpriteGroups.SpriteFrame.BorderSides">
            <summary>
            Defines sides which can be combined to speicfy borders on SpriteFrames.
            </summary>
            <remarks>
            The most common combinations are BorderSides.All, 
            BorderSides.Left | BorderSides.Right, and BorderSides.Top | BorderSides.Bottom.
            </remarks>
        </member>
        <member name="F:FlatRedBall.ManagedSpriteGroups.SpriteFrame.BorderSides.None">
            <summary>
            No border sides - the SpriteFrame will appear similar to a regular Sprite.
            </summary>
        </member>
        <member name="F:FlatRedBall.ManagedSpriteGroups.SpriteFrame.BorderSides.Top">
            <summary>
            Include a border on the top of the SpriteFrame.
            </summary>
        </member>
        <member name="F:FlatRedBall.ManagedSpriteGroups.SpriteFrame.BorderSides.Bottom">
            <summary>
            Include a border on the bottom of the SpriteFrame.
            </summary>
        </member>
        <member name="F:FlatRedBall.ManagedSpriteGroups.SpriteFrame.BorderSides.TopBottom">
            <summary>
            Include a border on the top and bottom of the SpriteFrame.  This is equivalent to 
            BorderSides.Top | BorderSides.Bottom
            </summary>
        </member>
        <member name="F:FlatRedBall.ManagedSpriteGroups.SpriteFrame.BorderSides.Left">
            <summary>
            Include a border on the left of the SpriteFrame.
            </summary>
        </member>
        <member name="F:FlatRedBall.ManagedSpriteGroups.SpriteFrame.BorderSides.Right">
            <summary>
            Include a border on the right of the SpriteFrame.
            </summary>
        </member>
        <member name="F:FlatRedBall.ManagedSpriteGroups.SpriteFrame.BorderSides.LeftRight">
            <summary>
            Include a border on the left and right of the SpriteFrame.  This is equivalent to 
            BorderSides.Right | BorderSides.Left
            </summary>
        </member>
        <member name="F:FlatRedBall.ManagedSpriteGroups.SpriteFrame.BorderSides.TopLeftRight">
            <summary>
            Include a border on the top, left, and right of the SpriteFrame.  This is 
            equivalent to BorderSides.Left | BorderSides.Right | borderSides.Top.
            </summary>
        </member>
        <member name="F:FlatRedBall.ManagedSpriteGroups.SpriteFrame.BorderSides.All">
            <summary>
            Include borders on all sides of the SpriteFrame.  This is equivalent to 
            BorderSides.Right | BorderSides.Left | BorderSides.Top | BorderSides.Bottom.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.Alpha">
            <summary>
            Controls the SpriteFrame's transparency.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.AlphaRate">
            <summary>
            The rate of change of the alpha component in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.Red">
            <summary>
            The red value to use with the ColorOperation.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.Green">
            <summary>
            The green value to use with the ColorOperation.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.Blue">
            <summary>
            The blue value to use with the color operation.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.RedRate">
            <summary>
            The rate of change of the red component in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.GreenRate">
            <summary>
            The rate of change of the green component in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.BlueRate">
            <summary>
            The rate of change of the blue component in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.ColorOperation">
            <summary>
            The color operation to perform using the color component values and 
            Texture (if available).
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.BlendOperation">
            <summary>
            The blend operation to perform using the alpha component value and
            Texture (if available).
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.Animate">
            <summary>
            Whether animation is currently turned on.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.AnimationChains">
            <summary>
            Gets all animations stored in this.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.AnimationSpeed">
            <summary>
            Gets and sets how fast AnimationChains will animate.  Default is 1.  A value
            of 2 will result in AnimationChains animating twice as fast.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.CurrentChain">
            <summary>
            Gets the current AnimationChain.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.CurrentChainIndex">
            <summary>
            Gets and sets the index of the current AnimationChain.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.CurrentChainName">
            <summary>
            Gets the current AnimationChain name or sets the current AnimationChain by name.
            </summary>
            <remarks>
            Setting this property will set the search the SpriteFrame for an AnimationChain with a
            matching name and set it as the current AnimationChain.
            </remarks>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.CurrentFrameIndex">
            <summary>
            Gets and sets the current AnimationFrame index.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.JustChangedFrame">
            <summary>
            Gets whether the current AnimationFrame just changed this frame due to animation.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.JustCycled">
            <summary>
            Gets whether the current AnimationChain just cycled (looped) this frame due to animation.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.UseAnimationRelativePosition">
            <summary>
            Whether the current AnimationFrame's relative position values (RelativeX and RelativeY) are applied
            when animating.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.LayerBelongingTo">
            <summary>
            The Layer that this SpriteFrame belongs to.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.TextureBorderWidth">
            <summary>
            The width of the border in texture coordinates.
            </summary>
            <remarks>
            This defines the section of the texture that should not stretch.  Increasing this value will
            show more of the texture on the outside border Sprites and less on the inside.
            </remarks>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.SpriteBorderWidth">
            <summary>
            The width of the border Sprites in world coordinates.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.Borders">
            <summary>
            The borders that the SpriteFrame uses to display.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.ScaleX">
            <summary>
            The X size of the object.  Measured as the distance from the center of the SpriteFrame 
            to its left and right edges in world coordinates.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.ScaleY">
            <summary>
            The Y size of the SpriteFrame.  Measured as the distance from the center of the SpriteFrame 
            to its top or bottom edges in world coordinates.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.ScaleXVelocity">
            <summary>
            The rate of change of the ScaleX property in units per second.  Default 0.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.ScaleYVelocity">
            <summary>
            The rate of change of the ScaleY property in units per second.  Default 0.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.Visible">
            <summary>
            Whether the SpriteFrame is drawn.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.Texture">
            <summary>
            The texture to be displayed by the SpriteFrame.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.CursorSelectable">
            <summary>
            Whether the instance can be selected by the Cursor.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.CenterSprite">
            <summary>
            Gets the SpriteFrame's center Sprite.
            </summary>
            <remarks>
            This can be used to modify the SpriteFrame's appearance.
            </remarks>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.SpriteFrame.#ctor">
            <summary>
            Constructs a new, empty SpriteFrame.
            </summary>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.SpriteFrame.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,FlatRedBall.ManagedSpriteGroups.SpriteFrame.BorderSides)">
            <summary>
            Constructs a new SpriteFrame using the argument texture and border sides.
            </summary>
            <remarks>
            SpriteFrames are usually created through the SpriteManager's AddSpriteFrame method.
            <seealso cref="M:FlatRedBall.SpriteManager.AddSpriteFrame(Microsoft.Xna.Framework.Graphics.Texture2D,FlatRedBall.ManagedSpriteGroups.SpriteFrame.BorderSides)"/>
            </remarks>
            <param name="textureToUse">The texture that the SpriteFrame will display.</param>
            <param name="borders">Which sides should be used by the SpriteFrame.</param>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.SpriteFrame.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,FlatRedBall.ManagedSpriteGroups.SpriteFrame.BorderSides,FlatRedBall.Graphics.Layer)">
            <summary>
            Constructs a new SpriteFrame using the argument texture, border sides, and Layer.
            </summary>
            <param name="textureToUse">The texture that the SpriteFrame will display.</param>
            <param name="borders">Which sides should be used by the SpriteFrame.</param>
            <param name="layerToAddTo">The Layer that the SpriteFrame will be drawn on.</param>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.SpriteFrame.Clone">
            <summary>
            Creates a copy of the SpriteFrame instance.
            </summary>
            <remarks>
            The cloned SpriteFrame will not belong to any of the lists that the original does.
            Since it will not be added to the SpriteManager it will not be drawn and managed.
            To add the SpriteFrame to the engine, call SpriteManager.AddSpriteFrame passing
            the newly created SpriteFrame as the argument.
            <seealso cref="M:FlatRedBall.SpriteManager.AddSpriteFrame(FlatRedBall.ManagedSpriteGroups.SpriteFrame)"/>
            </remarks>
            <returns>The newly-created SpriteFrame.</returns>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.SpriteFrame.DoesCameraRelativeRayIntersect2D(System.Single,System.Single,System.Single,FlatRedBall.Camera)">
            <summary>
            Returns whether a ray starting at the argument Camera's position and travelling through the
            point relative to the Camera specified by the arguments intersects with this instance.
            </summary>
            <remarks>
            This method does not take the camera's rotation into consideration when calculating the ray.
            </remarks>
            <param name="cameraRelativeX">The X position relative to the argument Camera.</param>
            <param name="cameraRelativeY">The Y position relative to the argument Camera.</param>
            <param name="cameraRelativeZ">The Z position relative to the argument Camera.</param>
            <param name="camera">The camera to use for the intersection test.</param>
            <returns>Whether the ray intersects the SpriteFrame.</returns>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.SpriteFrame.IsSpriteComponentOfThis(FlatRedBall.Sprite)">
            <summary>
            Returns whether the argument Sprite is a Sprite used by this instance.
            </summary>
            <param name="sprite">The Sprite to check.</param>
            <returns>Whether the argument Sprite is a component of this.</returns>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.SpriteFrame.Pause(FlatRedBall.Instructions.InstructionList)">
            <summary>
            Stops all automatic behavior and stores the necessary instructions to 
            resume activity in the argument InstructionList.
            </summary>
            <param name="instructions">The List to store instructions which are executed to
            resume activity.</param>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.SpriteFrame.ToString">
            <summary>
            Returns a string with information about this instance.
            </summary>
            <returns>The string containing information about this instance.</returns>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.SpriteFrame.UpdateInternalSpriteNames">
            <summary>
            Sets the contained DynamicSpriteFrame to help identify SpriteFrame membership and side.
            </summary>
            <remarks>
            If the SpriteFrame's name is "spriteFrame1", each side will have its name be
            the SpriteFrame's name with a suffix indicating the side that the Sprite represents.
            That is, the center Sprite would be named "spriteFrame1_center", the top
            would be "spriteFrame1_top", and so on.
            
            <para>This method can be used in debugging to help identify whether DynamicSprites belong
            to a SpriteFrame, and if so, which side they represent.  Otherwise, this
            method has no engine functionality.</para>
            </remarks>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.SpriteFrame.Manage">
            <summary>
            Performs the necessary every-frame management of the SpriteFrame.  This
            method is automatically called by the SpriteManager.
            </summary>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.SpriteFrame.RefreshBorders(FlatRedBall.ManagedSpriteGroups.SpriteFrame.BorderSides)">
            <summary>
            Updates the SpriteFrame borders.  This method is called automatically
            whenever the Borders property is changed.
            </summary>
            <param name="borderSides">The new BorderSides to use.</param>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteGrid.Layer">
            <summary>
            The layer on which the SpriteGrid should place newly-created Sprites.
            </summary>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.SpriteGrid.#ctor">
            <summary>
            Creates a SpriteGrid using the TextManager's DefaultFont.  This is used because it's the only
            Texture2D stored internally in the engine.  To set the default Texture, use the overload which
            accepts a Texture2D.
            </summary>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.SpriteGrid.#ctor(FlatRedBall.Camera,FlatRedBall.ManagedSpriteGroups.SpriteGrid.Plane,FlatRedBall.Sprite)">
             <summary>
             Creates a new SpriteGrid.
             </summary>
             <remarks>
             The mBlueprintToUse argument Sprite reference is kept internally and used as the blue print.
             In other words, the SpriteGrid does not create a new Sprite internally, but uses the
             arguemnt Sprite.  When creating SpriteGrids in code, it is common to create a new Sprite
             only to serve as a SpriteGrid blue print, then remove it from the SpriteManager's memory. 
             If the Sprite passed as the mBlueprintToUse is modified after the SpriteGrid is created,
             this will change the SpriteGrid bluerint
            
             </remarks>
             <param name="camera">Reference to the camnera used to determine whether a point on the SpriteGrid is in the scren.</param>
             <param name="gridPlane">Whether the SpriteGrid should extend on the XY or XZ plane.</param>
             <param name="blueprintToUse">Reference to a Sprite representing the mBlueprint to be used for the grid.</param>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.SpriteGrid.Destroy">
            <summary>
            Destroys the SpriteGrid by removing all contained Sprites and clearing the TextureGrid.
            </summary>
            <remarks>
            <para>This method will only remove all contained Sprites from the SpriteManager and clear out the
            TextureGrid.  The SpriteGrid will still reference the the blueprint
            Sprite and have the same Bounds and GridSpacing.</para>
            <para>If the Manage method is called after this method is called, 
            the SpriteGrid will throw an out of bounds exception.  To refill the 
            SpriteGrid after this method has been called, it must first be populated.</para>
            </remarks>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.SpriteGrid.PaintSprite(System.Double,System.Double,System.Double,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="textureToPaint"></param>
            <returns>The old FrbTexture at the argument position.</returns>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.SpriteGrid.RemoveSprites">
            <summary>
            Clears all Sprites referenced by the SpriteGrid.
            </summary>
            <remarks>
            This method will only remove all contained Sprites from the SpriteManager.  This method does
            not clear out the TextureGrid.
            
            <para>If the Manage method is called after this method is called, 
            the SpriteGrid will throw an out of bounds exception.  To refill the 
            SpriteGrid after this method has been called, it must first be populated.</para>
            </remarks>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.SpriteGrid.Shift(System.Single,System.Single,System.Single)">
            <summary>
            Moves the grid by the passed variables 
            </summary>
            <remarks>
            This method does not change the bounds of the SpriteGrid; only the actual Sprites in the grid.
            This method is used to change the seed position of the SpriteGrid.  The location of the
            painted Sprites also shifts according to the arguments.
            </remarks>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.SpriteGrid.CreateSpriteBasedOnProperties">
            <summary>
            This is called by CreateSpriteFromBlueprint - and should only be called from there.
            </summary>
            <returns>The newly created Sprite which was created obeying the SpriteGrid's properties.</returns>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.TextureGrid`1.ChangeGrid(System.Single,System.Single)">
            <summary>
            Shifts the position of all textures in the TextureGrid.
            </summary>
            <param name="x">The distance along the x axis to shift the grid.</param>
            <param name="y">The distance along the y axis to shift the grid.</param>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.TextureGrid`1.ReduceGrid(System.Single,System.Single)">
            <summary>
            This "shrinks" the grid if its edges are the same as its baseTexture
            </summary>
            <remarks>
            To use the least amount of memory, TextureGrids only store non-baseTexture strips.
            If the ends of a horizontal strip are the baseTexture, then the strip should be contracted
            inward.  If an entire horizontal strip is the baseTexture, then it should be removed.
            
            Usually, tests should begin from a specific location, as it is usually called after the
            grid is painted.  This method will first check to see if the arguments are on the left or
            right side of a strip.  Then a loop will move inward as long as it continues to encounter
            the base texture.  Once it encounters a non-baseTexture, then it stops, and reduces the
            particular horizontal strip.
            
            If an entire strip is cleared and it is either the top or bottom strip, then it will
            be removed, and the strip above or below (depending on position) will be tested as well.
            If the strip is in the center (not the top or bottom), then it will be reduced, but cannot
            be removed.
            </remarks>
            <param name="yFloat">The y location in absolute coordinates to start the tests at.</param>
            <param name="xFloat">The x location in absolute coordinates to start the tests at.</param>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.TextureGrid`1.ReduceGridAtIndex(System.Int32,System.Int32)">
            <summary>
            This "shrinks" the grid if its edges are the same as its baseTexture
            </summary>
            <remarks>
            To use the least amount of memory, TextureGrids only store non-baseTexture strips.
            If the ends of a horizontal strip are the baseTexture, then the strip should be contracted
            inward.  If an entire horizontal strip is the baseTexture, then it should be removed.
            
            Usually, tests should begin from a specific location, as it is usually called after the
            grid is painted.  This method will first check to see if the arguments are on the left or
            right side of a strip.  Then a loop will move inward as long as it continues to encounter
            the base texture.  Once it encounters a non-baseTexture, then it stops, and reduces the
            particular horizontal strip.
            
            If an entire strip is cleared and it is either the top or bottom strip, then it will
            be removed, and the strip above or below (depending on position) will be tested as well.
            If the strip is in the center (not the top or bottom), then it will be reduced, but cannot
            be removed.
            </remarks>
            <param name="yOn">The y index start the tests at.</param>
            <param name="xOn">The x index to start the tests at.</param>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.TextureGrid`1.TrimGrid">
            <summary>
            Checks the boundaries of the grid and removes any references to textures that match the base Texture2D.
            </summary>
            <remarks>
            This method is called automatically by the ReplaceTexture method so that the structure 
            stays as small as possible afterchanges have been made.  
            </remarks>
        </member>
        <member name="T:FlatRedBall.ManagedSpriteGroups.TextureLocation`1">
            <summary>
            Used to paint SpriteGrids or compare differences between two TextureGrids which can be used for undos.
            </summary>
            <typeparam name="T">The type contained in the TextureLocation.  Currently FlatRedBall uses
            Texture2D, FloatRectangle, and AnimationChain in SpriteGrids.</typeparam>
        </member>
        <member name="T:FlatRedBall.Math.AttachableList`1">
            <summary>
            A list of IAttachables which is by default two-way.
            </summary>
            <typeparam name="T">Type of the list which is of IAttachable.</typeparam>
        </member>
        <member name="P:FlatRedBall.Math.AttachableList`1.Count">
            <summary>
            The number of elements contained in the list.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.AttachableList`1.Name">
            <summary>
            Gets and sets the name of this instance.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.#ctor">
            <summary>
            Creates a new AttachableList.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.#ctor(System.Int32)">
            <summary>
            Creates a new AttachableList with the argument capacity.
            </summary>
            <param name="capacity">The initial capacity of the new AttachableList.</param>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.GetTopParents``2(FlatRedBall.Math.AttachableList{``1})">
            <summary>
            Returns the top parents in the argument AttachableList
            </summary>
            <typeparam name="OutType">The type of object in the returned list.</typeparam>
            <typeparam name="InType">Tye type of object in the argument list</typeparam>
            <param name="poa">The list to search through.</param>
            <returns>List of T's that are the top parents of the objects in the argument AttachableList.</returns>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.Add(`0)">
            <summary>
            Adds the argument to the AttachableList and creates a two-way relationship.
            </summary>
            <param name="attachable">The IAttachable to add.</param>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.AddRange(FlatRedBall.Math.AttachableList{`0})">
            <summary>
            Adds all IAttachables contained in the argument AttachableList to this AttachableList and creates two
            way relationships.
            </summary>
            <param name="listToAdd"></param>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.AddOneWay(`0)">
            <summary>
            Adds the argument attachable to this without creating a two-way relationship.
            </summary>
            <param name="attachable">The IAttachable to add to this.</param>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.AddRangeOneWay(FlatRedBall.Math.AttachableList{`0})">
            <summary>
            Adds all IAttachables contained in the argument AttachableList to this
            without creating two-way relationships.
            </summary>
            <param name="listToAdd">The list of IAttachables to add.</param>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.AddUnique(`0)">
            <summary>
            Adds a new IAttachable if it is not already in the list.
            </summary>
            <param name="attachable">The IAttachable to add.</param>
            <returns>Index where the IAttachable was added.  -1 is returned if the list already contains the argument attachable</returns>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.AddUniqueOneWay(`0)">
            <summary>
            Adds the argument IAttachable to this and creates a two-way relationship if
            this does not already contain the IAttachable.
            </summary>
            <param name="attachable">The IAttachable to add.</param>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.Clear">
            <summary>
            Removes all IAttachables contained in this and eliminates all
            two-way relationships.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.Contains(`0)">
            <summary>
            Returns whether this contains the argument IAttachable.
            </summary>
            <remarks>
            If the argument is part of this instance and the two share a 
            two-way relationship then this method is able to use this two-way
            relationship to speed up the method call.
            </remarks>
            <param name="attachable">The argument IAttachable to search for.</param>
            <returns>Whether the argument attachable is contained in this list.</returns>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.FindByName(System.String)">
            <summary>
            Returns the IAttachable with name matching the argument, or null if not found.
            </summary>
            <remarks>This method performs a case-sensitive search.</remarks>
            <param name="nameToSearchFor">The name to match when searching.</param>
            <returns>The IAttachable with matching name or null if none are found.</returns>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.FindWithNameContaining(System.String)">
            <summary>
            Returns the first IAttachable with a name containing the argument string.
            </summary>
            <remarks>This method returns any IAttachable that has a name that contains the argument.
            For example, an object with the name "MySprite" would return if the argument was "Sprite".</remarks>
            <param name="stringToSearchFor">The string to check IAttachables for.</param>
            <returns>The IAttachable with a name containing the argument string or null if none are found.</returns>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.FindWithNameContainingCaseInsensitive(System.String)">
            <summary>
            Returns the first IAttachable with a name containing the argument string, case insensitive.
            </summary>
            <remarks>This method returns any IAttachable that has a name that contains the argument.
            For example, an object with the name "MySprite" would return if the argument was "Sprite".</remarks>
            <param name="stringToSearchFor">The string to check IAttachables for.</param>
            <returns>The IAttachable with a name containing the argument string or null if none are found.</returns>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the argument IAttachable at the argument index and creates a 
            two-way relationship.
            </summary>
            <param name="index">The index to insert at.</param>
            <param name="attachable">The IAttachable to insert.</param>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.InsertOneWay(System.Int32,`0)">
            <summary>
            Inserts the argument IAttachable at the argument index but does not create
            a two-way relationship.
            </summary>
            <param name="index">The index to insert at.</param>
            <param name="attachable">The IAttachable to insert.</param>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.MakeOneWay">
            <summary>
            Breaks all two-way relationships between this and all contained
            IAttachables.
            </summary>
            <remarks>
            This will still contain the same number of IAttachables before and
            after the call.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.MakeTwoWay">
            <summary>
            Makes the relationship between all contained IAttachables and this a two way relationship.
            </summary>
            <remarks>
            If an IAttachable is added (through the Add method), the relationship is already a
            two-way relationship.  IAttachables which already have two-way relationships will not be affected
            by this call.  IAttachables that have been added through the AddOneWay call or added
            through a call that returns a one-way array will be modified so that they hold a reference to
            this instance in their ListsBelongingTo field.  One-way relationships are often created in
            FRB methods which return AttachableLists.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.MoveBlock(System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves the position of a block of IAttachables beginning at the argument
            sourceIndex of numberToMove count to the argument destinationIndex.
            </summary>
            <param name="sourceIndex">The index of the first IAttachable in the block.</param>
            <param name="numberToMove">The number of elements in the block.</param>
            <param name="destinationIndex">The index to insert the block at.</param>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.Remove(`0)">
            <summary>
            Removes the argument IAttachable from this and clears the two-way relationship.
            </summary>
            <param name="attachable">The IAttachable to remove from this.</param>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.Remove(FlatRedBall.Math.AttachableList{`0})">
            <summary>
            Removes all IAttachables contained in the argument attachableList from this and clears the two-way relationships between
            this and all IAttachables removed.
            </summary>
            <param name="attachableList">The list of IAttachables to remove.</param>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the IAttachable at the argument index and clears two-way relationships.
            </summary>
            <param name="index">The index of the object to remove.</param>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.RemoveAtOneWay(System.Int32)">
            <summary>
            Removes the IAttachable at the argument index from the list, but the IAttachable will continue to reference
            this List in its ListsBelongingTo.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.ToString">
            <summary>
            Returns a string with the name and the number of elements that this contains.
            </summary>
            <returns>The string with this instance's name and element count.</returns>
        </member>
        <member name="T:FlatRedBall.Math.Collision.CollisionEnumerations">
            <summary>
            A class storing enumerations for collisions.
            </summary>
        </member>
        <member name="T:FlatRedBall.Math.Collision.CollisionManager">
            <summary>
            Stores and executes collision relationships.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Collision.CollisionManager.Relationships">
            <summary>
            The relationships which are currently part of the collision manager. This should not be added to
            by regular game code. This is exposed so that collision manager extension methods can add new relationships, and
            so relationships can be cleared.
            </summary>
        </member>
        <member name="F:FlatRedBall.Math.Collision.LoopDirection.BackToFront">
            <summary>
            Indicates that loops will run from back to front (a reverse loop)
            </summary>
        </member>
        <member name="F:FlatRedBall.Math.Collision.LoopDirection.FrontToBack">
            <summary>
            Indicates that loops will run from front to back (normal loop)
            </summary>
        </member>
        <member name="T:FlatRedBall.Math.Collision.CollisionRelationship">
            <summary>
            Base implementation for object which provides collision logic between two objects.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Collision.CollisionRelationship.CollidedThisFrame">
            <summary>
            Whether a collision occurred this frame. This is set when the collision performs its collision logic in DoCollisions, which
            may get called automatically, or may get called manually if IsActive is set to false.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Collision.CollisionRelationship.IsActive">
            <summary>
            Whether the CollisionManager autoamtically calls DoCollisions on this relationship every frame.
            If set to false, the CollisionManager will not call DoCollision, but DoCollision can be called manually
            to perform collision.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Collision.CollisionRelationship.FrameSkip">
            <summary>
            The number of frames to skip after performing collision logic. Default value is 0, which means no values are skipped.
            </summary>
            <remarks>
            A value of 1 will result in 1 frame being skipped after performing collisio logic resulting in collision being performed every other frame.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Math.Collision.CollisionRelationship.DoCollisions">
            <summary>
            Performs the collision logic and returns whether a collision has occurred. This method
            does not need to be called if the CollisionRelationship is part of the CollisionManager
            and if its IsActive is set to true (both of which are the most common setup).
            </summary>
            <returns>Whether collisions occurred this frame.</returns>
        </member>
        <member name="F:FlatRedBall.Math.Collision.ListVsListLoopingMode.PreventDoubleChecksPerFrame">
            <summary>
            When a list is colliding against itself, the indexes will be set such
            that if object A collides against object B, then object B will not also try to collide
            against object A in the same frame. This is desirable when performing collision
            between two objects with no subcollisions, or between two objects with the same subcollision.
            </summary>
        </member>
        <member name="F:FlatRedBall.Math.Collision.ListVsListLoopingMode.AllowDoubleChecksPerFrame">
            <summary>
            When a list is colliding against itself, the indexes will be set such
            that if object A collides against object B, then object B will still attempt
            to collide against object A. This is desirable when performing collision between
            two objects with different subcollisions, such as a player weapon vs the player body.
            </summary>
        </member>
        <member name="T:FlatRedBall.Math.Geometry.AxisAlignedRectangle">
            <summary>
            A rectangle which can be used to perform collison checks against other shapes. The name "axis aligned"
            implies that the rectangle cannot be rotated. Its sides will always be aligned (parallel) with the X and Y
            axes. The AxisAlignedRectangle is a shape commonly used in FlatRedBall Entities to perform collision against
            other entities and TileShapeCollections.
            </summary>
        </member>
        <member name="F:FlatRedBall.Math.Geometry.AxisAlignedRectangle.RepositionHalfSize">
            <summary>
            Whether collision reposition should consider the full size of the AxisAlignedRectangle. If false,
            repositions along one of the directions will only start at the halfway point and move outward.
            </summary>
            <remarks>
            This property is primarily used for "L-shaped" collision areas on tile maps. Tiles which make up the corner
            of the L should have this value set to true. Otherwise, collisions may result in an object tunneling through the collision.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.AxisAlignedRectangle.Left">
            <summary>
            The absolute left edge of the AxisAlignedRectangle, calculated by subtracting half of its width from its position;
            Setting this value will change its Position.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.AxisAlignedRectangle.CollideAgainst(FlatRedBall.Math.Geometry.Circle)">
            <summary>
            Returns whether this instance collides against the argument Circle.
            </summary>
            <param name="circle">The Circle to test collision against.</param>
            <returns>Whether collision has occurred.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.AxisAlignedRectangle.CollideAgainst(FlatRedBall.Math.Geometry.AxisAlignedRectangle)">
            <summary>
            Returns whether this instance collides against the argument AxisAlignedRectangle.
            </summary>
            <param name="rectangle">The AxisAlignedRectangle to test collision against.</param>
            <returns>Whether collision has occurred.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.AxisAlignedRectangle.CollideAgainst(FlatRedBall.Math.Geometry.Polygon)">
            <summary>
            Returns whether this instance collides against the argument Polygon.
            </summary>
            <param name="polygon">The Polygon to test collision against.</param>
            <returns>Whether collision has occurred.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.AxisAlignedRectangle.CollideAgainst(FlatRedBall.Math.Geometry.Line)">
            <summary>
            Returns whether this instance collides against the argument Line.
            </summary>
            <param name="line">The Line to test collision against.</param>
            <returns>Whether collision has occurred.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.AxisAlignedRectangle.CollideAgainst(FlatRedBall.Math.Geometry.Capsule2D)">
            <summary>
            Returns whether this instance collides against the argument Capsule2D.
            </summary>
            <param name="capsule">The Capsule2D to test collision against.</param>
            <returns>Whether collision has occurred.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.AxisAlignedRectangle.CollideAgainst(FlatRedBall.Math.Geometry.ShapeCollection)">
            <summary>
            Returns whether this instance collides against the argument ShapeCollection.
            </summary>
            <param name="shapeCollection">The ShapeCollection to test collision against.</param>
            <returns>Whether collision has occurred.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.AxisAlignedRectangle.CollideAgainst(FlatRedBall.Math.Geometry.ICollidable)">
            <summary>
            Returns whether this intance collides against the argument ICollidable.
            </summary>
            <param name="collidable">The ICollidable to test collision against.</param>
            <returns>Whether collision has occurred.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.AxisAlignedRectangle.CollideAgainstMove(FlatRedBall.Math.Geometry.AxisAlignedRectangle,System.Single,System.Single)">
            <summary>
            Returns whether this AxisAlignedRectangle and the argument AxisAlignedRectangle overkap,
            and reposition sthe two according ot their relative masses.
            </summary>
            <param name="rectangle">The other rectangle to collide against.</param>
            <param name="thisMass">This mass relative to the other rectangle.</param>
            <param name="otherMass">The other rectangle's mass relative to this.</param>
            <returns>Whether collision has occurred.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.AxisAlignedRectangle.CollideAgainstMove(FlatRedBall.Math.Geometry.Polygon,System.Single,System.Single)">
            <summary>
            Performs a "move" collision (a collision that adjusts the Position of the calling objects 
            to separate them if they overlap), moving each object according to its respective mass.
            </summary>
            <param name="polygon">The polygon to collide against.</param>
            <param name="thisMass">The mass of the AxisAlignedRectangle. 
            If value this is 0, the AxisAlignedRectangle will act as if it has no mass - the Polygon will not be pushed or stopped.</param>
            <param name="otherMass">The mass of the Polygon. 
            If this value is 0, The Polygon will act as if it has no mass - the AxisAlignedRectangle will not be pushed or stopped.</param>
            <returns>Whether the caller collides against the argument Polygon.</returns>
            <example>
            // This shows how to perform a collision where the polygon is static - a common
            // situation if the polygon is part of the static environment:
            axisAlignedRectangle.CollideAgainstMove(polygon, 0, 1);
            </example>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.AxisAlignedRectangle.CollideAgainstMoveSoft(FlatRedBall.Math.Geometry.AxisAlignedRectangle,System.Single,System.Single,System.Single)">
            <summary>
            Returns whether this AxisAlignedRectangle and the argument AxisAlignedRectangle overlap, 
            and repositions the two according to their relative masses and the depth of the overlap.
            The more overlap, the faster the two objects will separate.
            </summary>
            <param name="rectangle">The other rectangle to collide against.</param>
            <param name="thisMass">This mass relative to the other rectangle.</param>
            <param name="otherMass">The other rectangle's mass relative to this.</param>
            <param name="separationVelocity">The separation velocity in units per second. This value is 
            multiplied by the overlap amount to result in a velocity. For example, if separationVelocity is 2 and
            the objects overlap by 100 units, then the total separation velocity will be 2*100 = 200. 
            This total separation velocity will be applied proprotionally to this and the other rectangle according
            to their relative masses. Increasing this value will make the separation happen more quickly.</param>
            <returns>Whether collision has occurred.</returns>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.Circle.LastCollisionTangent">
            <summary>
            Returns the tangent (in other words the vector parallel with the surface) where the last collision occurred.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.Circle.Color">
            <summary>
            The (premultiplied alpha) color used to draw this circle.
            </summary>
            
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Circle.DistanceTo(FlatRedBall.Math.Geometry.Line)">
            <summary>
            Returns the distance from this to the argument Line.  If this and the Line
            are colliding, then the value will be 0 or negative.  The smallest the 
            return value can be is -this.Radius.
            </summary>
            <param name="line">The line to test distance from.</param>
            <returns>The distance from the circle to the argument line.  Will be 0 or
            negative if the two are colliding.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Circle.KeepThisInsideOf(FlatRedBall.Math.Geometry.AxisAlignedRectangle)">
            <summary>
            Adjusts the calling Circle's position (or its parent if attached) so that the circle is fully-contained
            in the argument AxisAlignedRectangle.
            </summary>
            <param name="otherAxisAlignedRectangle">The rectangle to keep the circle inside of.</param>
        </member>
        <member name="T:FlatRedBall.Math.Geometry.FloatRectangle">
            <summary>
            A rectangle class using floats for its bounds.  
            </summary>
        </member>
        <member name="F:FlatRedBall.Math.Geometry.FloatRectangle.Default">
            <summary>
            A Rectangle with its top-left point at (0,0) with a width and height of 1.
            </summary>
        </member>
        <member name="T:FlatRedBall.Math.Geometry.Frustum">
            <summary>
            A drawable, 3D volume defining the visible area of a camera.  This can be used to 
            display the visible area of a Camera. 
            </summary>
        </member>
        <member name="T:FlatRedBall.Math.Geometry.IReadOnlyScalable">
            <summary>
            Represents an object which has read-only scale values on two axes.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.IReadOnlyScalable.ScaleX">
            <summary>
            Gets the X Scale of the object.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.IReadOnlyScalable.ScaleY">
            <summary>
            Gets the Y Scale of the object.
            </summary>
        </member>
        <member name="T:FlatRedBall.Math.Geometry.IScalable">
            <summary>
            Represents an object that can be scaled on the X and Y axes and can have
            scale velocity on these two axes.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.IScalable.ScaleX">
            <summary>
            Gets and sets the X Scale of the object.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.IScalable.ScaleY">
            <summary>
            Gets and sets the Y Scale of the object
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.IScalable.ScaleXVelocity">
            <summary>
            Gets and sets the rate at which the X Scale of the object changes in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.IScalable.ScaleYVelocity">
            <summary>
            Gets and sets the rate at which the Y Scale of the object changes in units per second.
            </summary>
        </member>
        <member name="T:FlatRedBall.Math.Geometry.IScalable3D">
            <summary>
            An interface for objects which can be scaled on the X, Y, and Z axes.
            </summary>
        </member>
        <member name="T:FlatRedBall.Math.Geometry.Line">
            <summary>
            Represents a segment with defined endpoints which can be used to
            graphically display lines or to perform segment collision.
            </summary>
        </member>
        <member name="F:FlatRedBall.Math.Geometry.Line.RelativePoint1">
            <summary>
            The first point used to define the line.  This point is relative to the Line's position and rotation.
            <remarks>
            If a line moves or rotates it will visibly change on screen and its collisions will be modified, but the 
            RelativePoint fields will not be modified.
            </remarks>
            </summary>
        </member>
        <member name="F:FlatRedBall.Math.Geometry.Line.RelativePoint2">
            <summary>
            The second point used to define the line.  This point is relative to the Line's position and rotation.
            </summary>
            <remarks>
            If a line moves or rotates it will visibly change on screen and its collisions will be modifed, but the
            RelativePoint fields will not be modified.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.Line.LastCollisionPoint">
            <summary>
            Returns the absolute position of the last collision point.  This will not 
            necessarily return the intersection point of the line with the last collided
            shape.  It may return a point inside the shape.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.Line.Visible">
            <summary>
            Gets or sets the visibility of this line segment
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.Line.Color">
            <summary>
            Gets or sets the color of this line segment. This color is pre-multiplied, so the R,G,B values must be adjusted accordingly if not fully opaque.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Line.#ctor">
            <summary>
            Instantiates a new Line.
            </summary>
            <remarks>
            Lines created through this method will not be visible or managed.  To add management, add
            the line to the ShapeManager through the ShapeManager's AddLine method.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Line.AsSegment">
            <summary>
            Returns a Segment which represents the line.
            </summary>
            <returns>The Segment representing the line.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Line.CollideAgainst(FlatRedBall.Math.Geometry.Circle)">
            <summary>
            Returns whether this instance collides with the argument Circle.
            </summary>
            <param name="circle">The Circle to test collision against.</param>
            <returns>Whether a collision has occurred.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Line.CollideAgainst(FlatRedBall.Math.Geometry.AxisAlignedRectangle)">
            <summary>
            Returns whether this instance collides with the argument AxisAlignedRectangle.
            </summary>
            <param name="rectangle">The AxisAlignedRectangle to test collision against.</param>
            <returns>Whether a collision has occurred.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Line.CollideAgainst(FlatRedBall.Math.Geometry.Line)">
            <summary>
            Returns whether this instance collides with the argument Line.
            </summary>
            <param name="line">The Line to test collision against.</param>
            <returns>Whether a collision has occurred.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Line.CollideAgainst(FlatRedBall.Math.Geometry.Polygon)">
            <summary>
            Returns whether this instance collides with the argument Polygon.
            </summary>
            <param name="polygon">The Polygon to test collision against.</param>
            <returns>Whether a collision has occurred.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Line.CollideAgainstMove(FlatRedBall.Math.Geometry.Circle,System.Single,System.Single)">
            <summary>
            Returns whether this instance collides with the argument Circle.  The two
            shapes are also repositioned so they do not collide after the method is called.
            </summary>
            <param name="circle">The Circle to test collision against.</param>
            <param name="thisMass">The mass of this instance.</param>
            <param name="otherMass">The mass of the other instance.</param>
            <returns>Whether a collision has occurred.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Line.ScaleBy(System.Single)">
            <summary>
            Scales the line by a specified amount
            </summary>
            <param name="scale">The scaling factor</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Line.SetFromAbsoluteEndpoints(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Sets the Line's Position to the average of the two given endpoints and
            it's RelativePoints to be the distance from the new Position to each of the given Vectors.
            </summary>
            <param name="endpoint1">The first endpoint for which to find the midpoint</param>
            <param name="endpoint2">The second endpoint for which to find the midpoint</param>
        </member>
        <member name="F:FlatRedBall.Math.Geometry.Polygon.mPoints">
            <summary>
            The points relative to the center of the Polygon.  These
            define the shape and size of the Polygon.
            </summary>
        </member>
        <member name="F:FlatRedBall.Math.Geometry.Polygon.mCenterPoints">
            <summary>
            The midpoint Points used for collision.  These are updated in CollideAgainstMovePreview.
            </summary>
        </member>
        <member name="F:FlatRedBall.Math.Geometry.Polygon.mVertices">
            <summary>
            The vertices that get fed into the VertexBuffer
            when the polygon is rendered.  The position is calculated
            by positioning the mPoints relative to the polygon using its
            position and rotation properties.  This is done in the
            FillVertexArray method (similar to the Text object)
            </summary>
            <remarks>
            These vertices contain the absolute vertices of the polygon, so they
            can be used in collision requiring these positions (rather than calculating
            them using mPoints and position/rotation values.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.Polygon.RepositionDirections">
            <summary>
            Sets the directions that the polygon can perform collision - this is only considered if the polygon is convex and clockwise.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.Polygon.Points">
            <summary>
            The Position-relative points of the Polygon. A point at 0,0 will be positioned at the center of the Polygon.
            </summary>
            <remarks>
            This value can be assigned to completely replace the points in a polygon.
            Changing this list updates the Vertices internally and immediately
            makes the polygon available for rendering. Note that a closed polygon will have its first point repeated. For example
            a closed rectangle will have 5 points (the normal 4 points, plus the last point repeating the first).
            </remarks>
            <example>
            Point[] points = new Point[5];
            points[0].X = 100;
            points[0].Y = 100;
            
            points[1].X = 100;
            points[1].Y = -100;
            
            ...
            
            polygonInstance.Points = points;
            </example>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.Polygon.LastMoveCollisionReposition">
            <summary>
            Reports the vector along which this polygon was moved along during the last
            CollideAgainstMove method.
            </summary>
            <remarks>
            This value is reset every time CollideAgainstMove is called whether there is a
            successful collision or not.  If there is no collision, this value is set to 
            Vector3.Zero.  If reactions to collisions such as physics are being implemented
            using this value, then the behavior should be tested and applied after every
            call to CollideAgainstMove.
            <para>
            This value is set on both the instance calling the CollideAgainstMove method
            as well as the argument.
            </para>
            </remarks>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.Polygon.LastCollisionPoint">
            <summary>
            The absolute position where the last collision was detected in a CollieAgainst method.
            </summary>
        </member>
        <member name="E:FlatRedBall.Math.Geometry.Polygon.PointsChanged">
            <summary>
            Event raised when the Points property reference is reset or when the
            SetPoint method is called.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Polygon.CreateEquilateral(System.Int32,System.Single,System.Single)">
            <summary>
            Returns an equilateral shape of numberOfSides sides.
            </summary>
            <remarks>
            The newly-created Polygon is invisible and is not part of the ShapeManager.
            </remarks>
            <param name="numberOfSides">The number of sides of the Polygon.  Must be at least 3.</param>
            <param name="angleOfFirstPoint">The angle relative to the polygon of the first point.</param>
            <returns>The newly-created Polygon.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Polygon.AbsolutePointPosition(System.Int32)">
            <summary>
            Returns the absolute (world) position of the point at the argument pointIndex. This considers the Polygon's position and rotation.
            </summary>
            <remarks>
            This method internally uses the vertices of the polygon to return the position. These vertices are updated every frame if the polygon is
            part of the ShapeManager. If a Polygon is not part of the ShapeManager, or if a change (such as position) has been performed on the polygon
            and the AbsolutePointPosition is needed immediately, then ForceUpdateDependencies can be called to update the verts internally.
            </remarks>
            <param name="pointIndex">The 0-based index of the points.</param>
            <returns>The absolute world position of the vert at the argument pointIndex.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Polygon.ArePointsAdjacent(System.Int32,System.Int32)">
            <summary>
            Returns whether two indexes are adjacent.  This considers wrapping and duplicate
            points for closed polygons.
            </summary>
            <param name="firstIndex">The first index.</param>
            <param name="secondIndex">The second index</param>
            <returns>Whether the two points are adjacent.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Polygon.FlipRelativePointsHorizontally">
            <summary>
            Modifies the internal points list to flip horizontally. All X values will be multiplied by -1.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Polygon.FlipRelativePointsVertically">
            <summary>
            Modifies the internal points list to flip vertically. All Y values will be multiplied by -1;
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Polygon.GetPointsInside(FlatRedBall.Math.Geometry.Polygon)">
            <summary>
            Returns a Vector3 array storing all of the points belonging to this instance that are inside the argument
            Polygon.
            </summary>
            <param name="polygon"></param>
            <returns></returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Polygon.GetPoint(System.Int32)">
            <summary>
            Returns the relative position of the point at the argument index.
            </summary>
            <param name="index">The index of the point to get.</param>
            <returns>The point at the argument index.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Polygon.Insert(System.Int32,FlatRedBall.Math.Geometry.Point)">
            <summary>
            Inserts a new point at the given index.  The point will be inserted at object space.
            </summary>
            <remarks>
            This method recreates the internal point list so it is expensive to call repeatedly.
            </remarks>
            <param name="index">Index where the point should be inserted.</param>
            <param name="newPoint">The (object space) point to insert.</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Polygon.IsPointInside(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Returns whether the argument vector is in this polygon.
            </summary>
            <param name="vector">The position of the point</param>
            <returns>Whether the point is inside.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Polygon.ScaleBy(System.Double)">
            <summary>
            Scales all points in the polygon by the argument value. A value of 1 will leave the polygon unchanged.
            </summary>
            <param name="amountToScaleBy">The value to scale by. For example, a value of 2 will double the X and Y values of all points.</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Polygon.ScaleBy(System.Double,System.Double)">
            <summary>
            Scales all points in object space.
            </summary>
            <param name="scaleX">Amount to scale by on the object's X axis. For example, a value of 2 would double the relative X values of all points.</param>
            <param name="scaleY">Amount to scale by on the object's Y axis. For example, a value of 2 would double the relative Y values of all points.</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Polygon.SetPoint(System.Int32,System.Double,System.Double)">
            <summary>
            Changes the position of the point at argument index, recalculates the bounding radius, and raises the
            OnPointsChanged event.
            </summary>
            <param name="index">The index of the point to change.</param>
            <param name="xRelativeToPolygonCenter">The new X position of the point in polygon object space.</param>
            <param name="yRelativeToPolygonCenter">The new Y position of the point in polygon object space.</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Polygon.VectorFrom(FlatRedBall.Math.Geometry.Point3D)">
            <summary>
            Returns a vector from the argument vector to the closest point on the Polygon's edges. This method considers
            only the perimeter, so an argument point inside the polygon will still return a non-zero-length vector.
            </summary>
            <param name="vector">The point to start from.</param>
            <returns>A vector representing the distance from the argument vector to this.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Polygon.VectorFrom(System.Double,System.Double)">
            <summary>
            Returns a vector from the argument vector to the closest point on the Polygon's edges. This method considers
            only the perimeter, so an argument point inside the polygon will still return a non-zero-length vector.
            </summary>
            <param name="x">The absolute X to check against the polygon.</param>
            <param name="y">The absolute Y to check against the polygon.</param>
            <returns>The shortest vector from the argument x,y to the Polygon.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Polygon.VectorFrom(System.Double,System.Double,System.Int32@)">
            <summary>
            Returns a vector from the argument vector to the closest point on the Polygon's edges. This method considers
            only the perimeter, so an argument point inside the polygon will still return a non-zero-length vector.
            </summary>
            <param name="x">The absolute X to check against the polygon.</param>
            <param name="y">The absolute Y to check against the polygon.</param>
            <param name="pointIndexBefore">The index of the point that begins the line on which the closest point falls upon.</param>
            <returns>The shortest vector from the argument x, y to the Polygon.</returns>
        </member>
        <member name="F:FlatRedBall.Math.Geometry.Segment.Point1">
            <summary>
            The first point of the segment.  
            </summary>
        </member>
        <member name="F:FlatRedBall.Math.Geometry.Segment.Point2">
            <summary>
            The second point of the segment.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.Segment.Slope">
            <summary>
            Returns the geometric slope of the segment.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.Segment.YIntercept">
            <summary>
            Returns the y intercept of the slope.
            </summary>
            <remarks>
            This method treats the segment as a line, so this will return a value even
            though the segment may not cross the x=0 line.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Segment.#ctor(FlatRedBall.Math.Geometry.Point,FlatRedBall.Math.Geometry.Point)">
            <summary>
            Creates a new Segment with the argument points as the endpoints.
            </summary>
            <param name="point1">The first Point.</param>
            <param name="point2">The second Point.</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Segment.DistanceTo(FlatRedBall.Math.Geometry.Polygon)">
            <summary>
            Returns the distance from this segment to the argument polygon's edges. If the segment is "inside" the polygon, it will still return the distance to the edge.
            In other words, the polygon is not considered "filled in" when performing these checks.
            </summary>
            <param name="polygon">The polygon to check against.</param>
            <returns>The distance from this segment to the polygon, or float.MaxValue if the polygon does not have any vertices.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Segment.DistanceTo(FlatRedBall.Math.Geometry.Point,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Returns the distance to the argument point as well as
            the connectin Vector3 from the Point to this.
            </summary>
            <param name="point">The point to get the distance to.</param>
            <param name="connectingVector">The connecting vector from the argument Pointn to this.</param>
            <returns>The distance between this and the argument Point.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Segment.GetLength">
            <summary>
            Returns the length of the segment.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Segment.IsClosestPointOnEndpoint(FlatRedBall.Math.Geometry.Point@)">
            <summary>
            Determines whether the closest point on the segment lies on one of the endpoints.
            </summary>
            <param name="point">The point to test to.</param>
            <returns>Whether the closest point on this segment to the argument point lies on the endpoints.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Segment.Intersects(FlatRedBall.Math.Geometry.Segment)">
            <summary>
            Returns whether this segment intersects the argument segment.
            </summary>
            <param name="s2">The segment to test for intersection.</param>
            <returns>Whether the segments intersect (whether they cross).</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Segment.IntersectionPoint(FlatRedBall.Math.Geometry.Segment@,FlatRedBall.Math.Geometry.Point@)">
            <summary>
            Returns the point where this segment intersects the argument segment.
            </summary>
            <param name="s2">The segment to test for intersection.</param>
            <returns>The point where this segment intersects the
            argument segment.  If the two segments do not touch, the point
            will have both values be double.NAN.
            </returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Segment.MoveBy(System.Single,System.Single)">
            <summary>
            Shifts the segment by moving both points by the argument x,y values.
            </summary>
            <param name="x">The number of units to shift the segment by on the x axis.</param>
            <param name="y">The number of units to shift the segment by on the y axis.</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Segment.Normalize">
            <summary>
            Sets the length of the segment to 1 unit by moving the 2nd point.
            </summary>
            <remarks>
            If the segment has 0 length (the endpoints are equal), the method
            does not change the segment; length will remain 0.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeCollection.RemoveFromManagers">
            <summary>
            Removes all contained shapes from the ShapeManager and clears this ShapeCollection.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeCollection.RemoveFromManagers(System.Boolean)">
            <summary>
            Removes all contained shapes from the ShapeManager and optionally clears this ShapeCollection.
            </summary>
            <remarks>
            Removal of shapes removes shapes from every-frame management and visibility.
            </remarks>
            <param name="clearThis">Whether to clear this ShapeCollection.</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeCollection.MakeTwoWay">
            <summary>
            Makes all contained lists (such as for AxisAlignedRectangles and Circles) two-way.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeCollection.MakeOneWay">
            <summary>
            Makes all contained lists (such as for AxisAlignedRectangles and Circles) one-way.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeCollection.Shift(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Changes the absolute Position value of all contained objects by the argument shiftVector.
            </summary>
            <param name="shiftVector">The amount to shift by.</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeCollection.IsPointInside(System.Single,System.Single)">
            <summary>
            Checks if the designated 2D point is in the 2D shapes of the shape collection
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeCollection.CollideAgainstBounceWithoutSnag(FlatRedBall.Math.Geometry.Polygon,System.Boolean,FlatRedBall.Math.Axis,System.Single)">
            <summary>
            Performs a "snagless" collision between this and the argument Polygon.
            </summary>
            <param name="polygon">The Polygon to perform collision against.</param>
            <param name="considerPartitioning">Whether to consider spacial partitioning.</param>
            <param name="axisToUse">If partitioning is used, the axis that the list is already sorted along.</param>
            <param name="elasticity">The elasticity to use in the collision.</param>
            <returns>Whether collision has occurred.</returns>
        </member>
        <member name="T:FlatRedBall.Math.Geometry.ShapeManager">
            <summary>
            Responsible for creating, destroying, and managing shapes (Circle, AxisAlignedRectangle,
            Polygon, Line).
            </summary>
        </member>
        <member name="F:FlatRedBall.Math.Geometry.ShapeManager.NumberOfVerticesForCircles">
            <summary>
            The number of vertices used when drawing a Circle.
            </summary>
        </member>
        <member name="F:FlatRedBall.Math.Geometry.ShapeManager.NumberOfVerticesForCapsule2Ds">
            <summary>
            The number of vertices used when drawing Capsule2Ds.
            </summary>
        </member>
        <member name="F:FlatRedBall.Math.Geometry.ShapeManager.NumberOfVerticesForCubes">
            <summary>
            The number of vertices used when drawing an AxisAlignedCube.
            </summary>
        </member>
        <member name="F:FlatRedBall.Math.Geometry.ShapeManager.NumberOfVerticesForSpheres">
            <summary>
            The number of vertices used when drawing a Sphere.
            </summary>
        </member>
        <member name="F:FlatRedBall.Math.Geometry.ShapeManager.mAutomaticallyUpdated">
            <summary>
            List of all managed objects.  This list contains all types of shapes
            (Circles, Polygons, etc).  This list is only used for the TimedActivity;
            not for drawing.  Therefore, shapes can exist both in this list as well as
            in the type-specific lists (mCircles, mPolygons, etc).
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.ShapeManager.UseZTestingWhenDrawing">
            <summary>
            Controls whether the ZBuffer is tested against when drawing shapes.
            Set to false to have Shapes drawn on top.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.ShapeManager.VisibleCircles">
            <summary>
            A read-only list of visible Circles contained in the ShapeManager.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.ShapeManager.VisibleRectangles">
            <summary>
            A read-only list of visible AxisAlignedRectangles contained in the ShapeManager.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.ShapeManager.VisiblePolygons">
            <summary>
            A read-only list of visible Polygons contained in the ShapeManager.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.ShapeManager.VisibleLines">
            <summary>
            A read-only list of visible Lines contained in the ShapeManager.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.ShapeManager.VisibleSpheres">
            <summary>
            A read-only list of visible Spheres contained in the ShapeManager.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.ShapeManager.VisibleAxisAlignedCubes">
            <summary>
            A read-only list of visible AxisAlignedCubes contained in the ShapeManager.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.ShapeManager.VisibleCapsule2Ds">
            <summary>
            A read-only list of visible Capsules contained in the ShapeManager.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.ShapeManager.AutomaticallyUpdatedShapes">
            <summary>
            A read-only list of shapes updated by the ShapeManager.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.AddAxisAlignedRectangle">
            <summary>
            Creates and returns a new visible, managed AxisAlignedRectangle.
            </summary>
            <remarks>
            The new AxisAlignedRectangle will be visible, white, and have a ScaleX and ScaleY of 1.
            </remarks>
            <returns>The new AxisAlignedRectangle.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.AddAxisAlignedRectangle(FlatRedBall.Math.Geometry.AxisAlignedRectangle)">
            <summary>
            Adds an already-created AxisAlignedRectangle to the ShapeManager.
            The newly-added AxisAlignedRectangle will be made visible by this method.
            </summary>
            <param name="axisAlignedRectangle">The AxisAlignedRectangle to add.</param>
            <returns>The same AxisAlignedRectangle as was passed to the method.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.AddAxisAlignedRectangleList(FlatRedBall.Math.PositionedObjectList{FlatRedBall.Math.Geometry.AxisAlignedRectangle})">
            <summary>
            Adds all AxisAlignedRectangles contained in the argument axisAlignedRectangleList to the ShapeManager.
            </summary>
            <param name="axisAlignedRectangleList">The list containing the AxisAlignedRectangles.</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.AddCapsule2D">
            <summary>
            Adds and returns a new visible, managed Capsule2D.
            </summary>
            <remarks>
            The new Capsule2D will be visible, white, and have an EndpointRadius of 1.
            </remarks>
            <returns>The new Capsule2D.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.AddCapsule2D(FlatRedBall.Math.Geometry.Capsule2D)">
            <summary>
            Adds an already-created Capsule2D to the ShapeManager.
            The newly-added Capsule2D will be made visible by this method.
            </summary>
            <param name="capsule2D">The Capsule2D to add.</param>
            <returns>The instance that was just added.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.AddCircle">
            <summary>
            Adds and returns a new visible, managed Circle.
            </summary>
            <remarks>
            The new Circle will be visible, white, and have a Radius of 1.
            </remarks>
            <returns>The new Circle.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.AddCircle(FlatRedBall.Math.Geometry.Circle)">
            <summary>
            Adds an already-created Circle to the ShapeManager.
            The newly-added Circle will be made visible by this method.
            </summary>
            <param name="circle">The Circle to add.</param>
            <returns>The instance that was just added.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.AddCircleList(FlatRedBall.Math.PositionedObjectList{FlatRedBall.Math.Geometry.Circle})">
            <summary>
            Adds all Circles contained in the argument circleList to the ShapeManager.
            </summary>
            <param name="circleList">The list containing the Circles.</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.AddSphere">
            <summary>
            Adds and returns a new visible, managed Sphere.
            </summary>
            <remarks>
            The new Sphere will be visible, white, and have a Radius of 1.
            </remarks>
            <returns>The new Sphere.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.AddSphere(FlatRedBall.Math.Geometry.Sphere)">
            <summary>
            Adds an already-created Sphere to the ShapeManager.
            The newly-added Sphere will be made visible by this method.
            </summary>
            <param name="sphere">The Sphere to add.</param>
            <returns>The instance that was just added.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.AddAxisAlignedCube">
            <summary>
            Adds a new visible, managed AxisAlignedCube.
            </summary>
            <returns>The new AxisAlignedCube</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.AddAxisAlignedCube(FlatRedBall.Math.Geometry.AxisAlignedCube)">
            <summary>
            Adds an already-created AxisAlignedCube to the ShapeManager.
            The newly-added AxisAlignedCube will be made visible by this method.
            </summary>
            <param name="axisAlignedCube">The AxisAlignedCube to add.</param>
            <returns>The instance that was just added.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.AddPolygon">
            <summary>
            Adds a new 0-point Polygon to the ShapeManager.
            The newly-added Polygon must have its Points property
            set to be visible and functional.
            </summary>
            <returns>The new Polygon.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.AddPolygon(FlatRedBall.Math.Geometry.Polygon)">
            <summary>
            Adds an already-created Polygon to the ShapeManager.
            The newly-added Polygon will be made visible by this method 
            if it has any points.
            </summary>
            <param name="polygon">The Polygon to add.</param>
            <returns>The instance that was just added.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.AddPolygonList``1(System.Collections.Generic.IList{``0})">
            <summary>
            Adds all Polygons contained in the argument polygonList to the ShapeManager.
            </summary>
            <param name="polygonList">The list containing the Polygons.</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.AddLine">
            <summary>
            Adds and returns a new visible, managed Line.
            </summary>
            <remarks>
            The new Line will be visible, white, horizontal,
            and have a length of 2 units.
            </remarks>
            <returns>The new Line.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.AddLine(FlatRedBall.Math.Geometry.Line)">
            <summary>
            Adds an already-created Line to the ShapeManager.
            The newly-added Line will be made visible by this method.
            </summary>
            <param name="line">The Line to add.</param>
            <returns>The instance that was just added.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.AddToLayer(FlatRedBall.Math.Geometry.AxisAlignedRectangle,FlatRedBall.Graphics.Layer,System.Boolean)">
            <summary>
            Adds the argument rectangle to the layer and optionally makes the rectangle automatically managed.
            </summary>
            <remarks>If the rectnagle's Visible property is set to false, the rectangle will not be added to the layer, but it will
            set an internal value so that it will show up on teh layer when its Visibility is set to true.</remarks>
            <param name="rectangle">The rectangle to add.</param>
            <param name="layer">The layer to add to.</param>
            <param name="makeAutomaticallyUpdated">Whether the rectangle should also be automatically managed by the ShapeManager.</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.BringToFront(FlatRedBall.Math.Geometry.AxisAlignedRectangle)">
            <summary>
            Brings the passed in Shape to the front so it's drawn on top.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.BringToFront(FlatRedBall.Math.Geometry.Capsule2D)">
            <summary>
            Brings the passed in Shape to the front so it's drawn on top.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.BringToFront(FlatRedBall.Math.Geometry.Circle)">
            <summary>
            Brings the passed in Shape to the front so it's drawn on top.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.BringToFront(FlatRedBall.Math.Geometry.Sphere)">
            <summary>
            Brings the passed in Shape to the front so it's drawn on top.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.BringToFront(FlatRedBall.Math.Geometry.AxisAlignedCube)">
            <summary>
            Brings the passed in Shape to the front so it's drawn on top.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.BringToFront(FlatRedBall.Math.Geometry.Polygon)">
            <summary>
            Brings the passed in Shape to the front so it's drawn on top.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.BringToFront(FlatRedBall.Math.Geometry.Line)">
            <summary>
            Brings the passed in Shape to the front so it's drawn on top.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.Remove(FlatRedBall.Math.Geometry.AxisAlignedRectangle)">
            <summary>
            Removes the argument AxisAlignedRectangle from the ShapeManager and any 2-way PositionedObjectLists it belongs to.
            </summary>
            <param name="axisAlignedRectangleToRemove">The AxisAlignedRectangle to remove.  Cannot be null.</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.Remove(FlatRedBall.Math.Geometry.AxisAlignedCube)">
            <summary>
            Removes the argument AxisAlignedCube from the ShapeManager and any 2-way PositionedObjectLists it belongs to.
            </summary>
            <param name="axisAlignedCubeToRemove">The AxisAlignedCube to remove.  Cannot be null.</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.Remove(FlatRedBall.Math.Geometry.Capsule2D)">
            <summary>
            Removes the argument Capsule2D from the ShapeManager and any 2-way
            PositionedObjectLists it belongs to.
            </summary>
            <param name="capsule2DToRemove">The Capsule2D to remove.  Should not be null.</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.Remove(FlatRedBall.Math.Geometry.Circle)">
            <summary>
            Removes the argument Circle from the ShapeManager and any 2-way PositionedObjectLists it belongs to.
            </summary>
            <param name="circleToRemove">The Circle to remove.  Should not be null.</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.Remove(FlatRedBall.Math.Geometry.Sphere)">
            <summary>
            Removes the argument Sphere from the ShapeManager and any 2-way PositionedObjectLists it belongs to.
            </summary>
            <param name="sphereToRemove">The Sphere to remove.  Should not be null.</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.Remove(FlatRedBall.Math.Geometry.Polygon)">
            <summary>
            Removes the argument Polygon from the ShapeManager and any 2-way PositionedObjectLists it belongs to.
            </summary>
            <param name="polygonToRemove">The Polygon to remove.  Should not be null.</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.Remove(FlatRedBall.Math.Geometry.Line)">
            <summary>
            Removes the argument Line from the ShapeManager and any 2-way PositionedObjectLists it belongs to.
            </summary>
            <param name="lineToRemove">The Line to remove.  Should not be null.</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.RemoveOneWay(FlatRedBall.Math.Geometry.Polygon)">
            <summary>
            Removes the argument Polygon from the ShapeManager.
            </summary>
            <param name="polygonToRemove">The Polygon to remove.  Should not be null.</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.RemoveOneWay(FlatRedBall.Math.Geometry.AxisAlignedRectangle)">
            <summary>
            Removes the argument AxisAlignedRectangle from the ShapeManager.
            </summary>
            <param name="axisAlignedRectangleToRemove">The AxisAlignedRectangle to remove.  Cannot be null.</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.Remove``1(System.Collections.Generic.IList{``0})">
            <summary>
            Removes all Polygons held in the argument listToRemove from the Shapemanager and any 2-way PositionedObjectLists they belong to.
            </summary>
            <typeparam name="T">The type of object which must be a Polygon.</typeparam>
            <param name="listToRemove">The list of objects to remove.</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.ToString">
            <summary>
            Returns information about the ShapeManager.
            </summary>
            <returns>A string containing information about the ShapeManager.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeMerger.Merge(FlatRedBall.Math.Geometry.Polygon,FlatRedBall.Math.Geometry.Polygon)">
            <summary>
            Modifies the first Polygon so that it is the result of both merged polygons.  
            This method assumes that the polygons collide and that both are drawn
            clockwise.
            </summary>
            <param name="polygon">The first polygon.  This one will be modified.</param>
            <param name="otherPolygon">The second polygon which will not be modified.</param>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.Sphere.Color">
            <summary>
            The Sphere's Color to use when being rendered.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.Sphere.RadiusVelocity">
            <summary>
            The rate at which the velocity is increasing - this is 0 by default.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.Sphere.Visible">
            <summary>
            Whether this instance is visible.  Setting this to true will add this instance to the ShapeManager's drawn list.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Sphere.Pause(FlatRedBall.Instructions.InstructionList)">
            <summary>
            Pauses this instance and stores the unpause instructions in the argument InstructionList
            </summary>
            <param name="instructions">The list to fill</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Sphere.TimedActivity(System.Single,System.Double,System.Single)">
            <summary>
            Applies the every-frame activity for moving the object.  This is automatically called every frame by the engine if this object is part of the ShapeManager.
            </summary>
            <param name="secondDifference">The number of seconds that have passed since last frame</param>
            <param name="secondDifferenceSquaredDividedByTwo">SecondDifference * secondDifference / 2 - used for integrating acceleration.</param>
            <param name="lastSecondDifference">How much time passed last frame.</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Sphere.AsBoundingSphere">
            <summary>
            Constructs a BoundingSphere instance form this.
            </summary>
            <returns>The created instance</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Sphere.CollideAgainst(FlatRedBall.Math.Geometry.Sphere)">
            <summary>
            Returns whether this instance overlaps the argument Sphere.
            </summary>
            <param name="sphere">The other Sphere to test against.</param>
            <returns>Whether collision has occurred.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Sphere.CollideAgainstMove(FlatRedBall.Math.Geometry.Sphere,System.Single,System.Single)">
            <summary>
            Collision method that returns whether collision has occurred and repositions this and the
            argument Sphere to prevent overlap.
            </summary>
            <param name="sphere">The other Sphere to collide against.</param>
            <param name="thisMass">The mass of the calling Sphere.  This value is used relative to "otherMass".  Both cannot be 0.</param>
            <param name="otherMass">The mass of the argument Sphere.  This value is used relative to "thisMass".  Both cannot be 0.</param>
            <returns>Whether the calling Sphere and the argument Sphere are touching.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Sphere.CollideAgainst(FlatRedBall.Math.Geometry.AxisAlignedCube)">
            <summary>
            Returns whether this instance overlaps the argument AxisAlignedCube
            </summary>
            <param name="cube">The instance AxisAlignedCube to test against.</param>
            <returns>Whether collision has occurred</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Sphere.CollideAgainstMove(FlatRedBall.Math.Geometry.AxisAlignedCube,System.Single,System.Single)">
            <summary>
            Returns whether this instance overlaps the argument cube, and separates the two instances according to their relative masses.
            </summary>
            <param name="cube">The cube to perform collision against.</param>
            <param name="thisMass">The mass of this instance.</param>
            <param name="otherMass">The mass of the cube.</param>
            <returns>Whether the objects were overlapping before the reposition.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Sphere.CollideAgainstBounce(FlatRedBall.Math.Geometry.AxisAlignedCube,System.Single,System.Single,System.Single)">
            <summary>
            Performs a bounce collision (a collision which modifies velocity and acceleration), and separates the objects if so.
            </summary>
            <param name="cube">The cube to perform collision against.</param>
            <param name="thisMass">The mass of this instance.</param>
            <param name="otherMass">Th e mass of the argument cube.</param>
            <param name="elasticity">The ratio of velocity to preserve.</param>
            <returns>Whether a collision occurred.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Sphere.CollideAgainstBounce(FlatRedBall.Math.Geometry.Sphere,System.Single,System.Single,System.Single)">
            <summary>
            Performs a bounce collision (a collision which modifies velocity and acceleration), and separates the objects if so.
            </summary>
            <param name="sphere">The Sphere to perform collision against.</param>
            <param name="thisMass">The mass of this instance.</param>
            <param name="otherMass">Th e mass of the argument cube.</param>
            <param name="elasticity">The ratio of velocity to preserve.</param>
            <returns>Whether a collision occurred.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Sphere.IsPointInside(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Returns whether the argument point is inside this instance.
            </summary>
            <param name="point">The point in world coordinates.</param>
            <returns>Whether the point is inside this.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Sphere.IsMouseOver(FlatRedBall.Gui.Cursor)">
            <summary>
            Returns whether the argument cursor is over this instance.
            </summary>
            <param name="cursor">The cursor to check.</param>
            <returns></returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Sphere.IsMouseOver(FlatRedBall.Gui.Cursor,FlatRedBall.Graphics.Layer)">
            <summary>
            Returns whether the argument cursor is over this instance considering Layer coordinates.
            </summary>
            <param name="cursor">The cursor to check.</param>
            <param name="layer">The layer that this instance sits on.</param>
            <returns>Whether the mouse is over this.</returns>
        </member>
        <member name="T:FlatRedBall.Math.IAttachable">
            <summary>
            Interface for an object which can be attached to a parent.
            </summary>
            <remarks>
            IAttachables do not necessarily have to be positioned objects - they
            can also be objects which have un-positioned attachments.  For example,
            an event in a scripted sequence might have a parent event which it executes
            after.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Math.IAttachable.ListsBelongingTo">
            <summary>
            Gets all lists that the instance belongs to.
            </summary>
            <remarks>
            This property provides the two-way relationship between IAttachables and
            and common FlatRedBall Lists.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Math.IAttachable.ClearRelationships">
            <summary>
            Clears all attachments to parents and removes all attached Children.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.IAttachable.Detach">
            <summary>
            Detaches the instance from its parent and removes it from its parent's Children List.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.IAttachable.ForceUpdateDependencies">
            <summary>
            Forces an update of the instance and calls ForceUpdateDependencies on its parent.
            </summary>
            <remarks>
            This method will recursively crawl up the Parent property until it reaches the TopParent.
            </remarks>
        </member>
        <member name="T:FlatRedBall.Math.IAttachableRemovable">
            <summary>
            Interface defining that an object has a RemoveObject method.  This standardizes the way that objects remove themselves from
            two-way lists.
            </summary>
            <remarks>
            This should not be implemented outside of the FlatRedBall Engine, but is public so that PositionedOjbect-inheriting
            objects can access the lists of objects that they belong to.
            </remarks>
        </member>
        <member name="T:FlatRedBall.Math.IPositionable">
            <summary>
            Provides an interface for 3D position, velocity, and acceleration.
            </summary>
            <remarks>
            For an interface which provides only and no velocity and acceleration, see
            FlatRedBall.Math.IStaticPositionable.
            <seealso cref="T:FlatRedBall.Math.IStaticPositionable"/>
            </remarks>
        </member>
        <member name="P:FlatRedBall.Math.IPositionable.XVelocity">
            <summary>
            Gets and sets the absolute X Velocity.  Measured in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.IPositionable.YVelocity">
            <summary>
            Gets and sets the absolute Y Velocity.  Measured in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.IPositionable.ZVelocity">
            <summary>
            Gets and sets the absolute Z Velocity.  Measured in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.IPositionable.XAcceleration">
            <summary>
            Gets and sets the absolute X Acceleration.  Measured in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.IPositionable.YAcceleration">
            <summary>
            Gets and sets the absolute Y Acceleration.  Measured in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.IPositionable.ZAcceleration">
            <summary>
            Gets and sets the absolute Z Acceleration.  Measured in units per second.
            </summary>
        </member>
        <member name="T:FlatRedBall.Math.IRotatable">
            <summary>
            Provides an interface for objects which can be rotated in 3D space.  Includes
            absolute rotation values and rotational velocity values.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.IRotatable.RotationMatrix">
            <summary>
            Gets and sets the absolute rotation matrix.
            </summary>
            <remarks>
            Implementers should mirror changes to the RotationMatrix in the
            individual rotation values.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Math.IRotatable.RotationX">
            <summary>
            Gets and sets the rotation on the X Axis.
            </summary>
            <remarks>
            Implementors should mirror changes to invididual rotation values in the
            RotationMatrix property.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Math.IRotatable.RotationY">
            <summary>
            Gets and sets the rotation on the Y Axis.
            </summary>
            <remarks>
            Implementors should mirror changes to invididual rotation values in the
            RotationMatrix property.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Math.IRotatable.RotationZ">
            <summary>
            Gets and sets the rotation on the Z Axis.
            </summary>
            <remarks>
            Implementors should mirror changes to invididual rotation values in the
            RotationMatrix property.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Math.IRotatable.RotationXVelocity">
            <summary>
            Gets and sets the rotational velocity on the X Axis.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.IRotatable.RotationYVelocity">
            <summary>
            Gets and sets the rotational velocity on the Y Axis.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.IRotatable.RotationZVelocity">
            <summary>
            Gets and sets the rotational velocity on the Z Axis.
            </summary>
        </member>
        <member name="T:FlatRedBall.Math.IStaticPositionable">
            <summary>
            Provides an interface for 3D position.
            </summary>
            <remarks>
            Does not include Velocity and Acceleration like IPositionable.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Math.IStaticPositionable.X">
            <summary>
            The absolute X position.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.IStaticPositionable.Y">
            <summary>
            The absolute Y position.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.IStaticPositionable.Z">
            <summary>
            The absolute Z position.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.MathFunctions.AngleToAngle(System.Single,System.Single)">
            <summary>
            Determines the shortest absolute difference between two angles. For example, AngleToAngle(PI/4, -PI/4) will return -PI/2
            </summary>
            <remarks>
            This method will never return a value with absolute value greater than PI.  It will return 
            either a positive or negative value, keeping all values between positive and negative PI.
            </remarks>
            <param name="angle1">Starting angle in radians.</param>
            <param name="angle2">Ending angle in radians.</param>
            <returns>The number of radians between the two angles.</returns>
        </member>
        <member name="M:FlatRedBall.Math.MathFunctions.ExtractRotationValuesFromMatrix(Microsoft.Xna.Framework.Matrix,System.Single@,System.Single@,System.Single@)">
            <summary>
            Extracts the RotationX, RotationY, and RotationZ values out of a 
            </summary>
            <param name="matrixToExtractFrom">The matrix to get the rotation values out of.</param>
            <param name="rotationX">The RotationX of the Matrix.</param>
            <param name="rotationY">The RotationY of the Matrix.</param>
            <param name="rotationZ">The RotationZ of the Matrix.</param>
        </member>
        <member name="M:FlatRedBall.Math.MathFunctions.FrameToFrame(FlatRedBall.Graphics.Animation.AnimationChain,System.Int32,System.Int32)">
            <summary>
            Determines the shortest absolute difference between two frames.
            </summary>
            <remarks>
            This method will consider moving forward and backward, as well as cycling from the end
            to the beginning of an AnimationChain.
            </remarks>
            <param name="ac">The animationChain to use when determining the distance.</param>
            <param name="frame1">The first frame.</param>
            <param name="frame2">the second frame.</param>
            <returns></returns>
        </member>
        <member name="M:FlatRedBall.Math.MathFunctions.GetPointOnUnitSphere(System.Random,System.Single@,System.Single@,System.Single@)">
            <summary>
            Returns a random point on the surface of a unit sphere.
            </summary>
            <param name="random">Reference to a Random instance.</param>
            <param name="xPos">The resulting X value.</param>
            <param name="yPos">The resulting Y value.</param>
            <param name="zPos">The resulting Z value.</param>
        </member>
        <member name="M:FlatRedBall.Math.MathFunctions.RegulateAngle(System.Single@)">
            <summary>
            Keeps an angle between 0 and 2*PI.
            </summary>
            <param name="angleToRegulate">The angle to regulate.</param>
        </member>
        <member name="M:FlatRedBall.Math.MathFunctions.RotatePointAroundPoint(System.Single,System.Single,System.Single@,System.Single@,System.Single)">
            <summary>
            Rotates a point around another point by a given number of radians.
            </summary>
            <param name="xBase">X position to rotate around.</param>
            <param name="yBase">Y position to rotate around.</param>
            <param name="xToRotate">X position to rotate (changes).</param>
            <param name="yToRotate">Y position to rotate (changes).</param>
            <param name="radiansToChangeBy">Radians to rotate by.</param>
        </member>
        <member name="M:FlatRedBall.Math.MathFunctions.RotatePointAroundPoint(FlatRedBall.Math.Geometry.Point,FlatRedBall.Math.Geometry.Point@,System.Single)">
            <summary>
            Rotates a Point around another Point by a given number of radians.
            </summary>
            <param name="basePoint">Point to rotate around.</param>
            <param name="pointToRotate">Point to rotate (changes position).</param>
            <param name="radiansToChangeBy">Radians to rotate by.</param>
        </member>
        <member name="M:FlatRedBall.Math.MathFunctions.RoundFloat(System.Single,System.Single)">
            <summary>
            Returns a value which has been rounded to the nearest mulitple of the mulipleOf value.
            </summary>
            <param name="valueToRound">The value to round, such as the position of an object.</param>
            <param name="multipleOf">The multiple of value, such as the size of a tile.</param>
            <returns>The rounded value.</returns>
        </member>
        <member name="M:FlatRedBall.Math.MathFunctions.RoundToInt(System.Single)">
            <summary>
            Rounds the argument floatToRound to an integer.
            </summary>
            <param name="floatToRound">The float value.</param>
            <returns>The rounded value as an integer.</returns>
        </member>
        <member name="M:FlatRedBall.Math.MathFunctions.RoundToInt(System.Double)">
            <summary>
            Rounds the argument doubleToRound to an integer.
            </summary>
            <param name="doubleToRound">The double value.</param>
            <returns>The rounded value as an integer.</returns>
        </member>
        <member name="M:FlatRedBall.Math.MathFunctions.RoundToInt(System.Decimal)">
            <summary>
            Rounds the argument decimalToRound to an integer.
            </summary>
            <param name="decimalToRound">The decimal value.</param>
            <returns>The rounded value as a decimal.</returns>
        </member>
        <member name="M:FlatRedBall.Math.MathFunctions.NormalizeAngle(System.Single)">
            <summary>
            Wraps an angle from 0 to TwoPi
            </summary>
            <param name="angle">The angle to wrap</param>
            <returns>The new angle</returns>
        </member>
        <member name="F:FlatRedBall.Math.Paths.PathSegment.ArcAngle">
            <summary>
            The angle of the arc, which may be in degrees or radians depending on the AngleUnit value.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.Paths.Path.Clear">
            <summary>
            Clears all contained segments, resets the TotalLength to 0, and sets the current X and Y values for the next segment to 0.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.Paths.Path.TangentAtLength(System.Single,System.Single)">
            <summary>
            Returns the tangent unit vector at the argument length. If the tangent cannot be calculated, then a unit vector
            pointing to the right will be returned (a unit vector at angle 0).
            </summary>
            <remarks>
            The tangent is calculated by looking slightly in front and slightly behind the path. Therefore, values near sharp corners,
            or paths with wavy paths may return incorrect values.
            </remarks>
            <param name="length">The location along the Path.</param>
            <param name="epsilon">The amount of distance to look in front and behind. Values which are very wavy may require a smaller epsilon. Paths with very large values may require a larger epsilon.</param>
            <returns>A tangent unit vector, or a unit vector pointing to the right if a tangent cannot be calculated.</returns>
        </member>
        <member name="M:FlatRedBall.Math.PositionedObjectList`1.GetFirstAfterPosition(System.Single,FlatRedBall.Math.Axis,System.Int32,System.Int32)">
            <summary>
            Gets the first object found after the argument "value" on the argument "axis".  Lists
            must be sorted for this method to work effectively.  WARNING:  This method uses an inclusive upper bound.  Use GetFirstAfter instead which uses an exclusive upper bound.
            </summary>
            <param name="value">The value to search after.  For example, this method will return objects with their position values greater than
            the argument value.  In other words, if 0 is passed as the value, then objects with position values greater than (not equal to) will be returned.</param>
            <param name="axis">The axis representing the value to use (x, y, or z)</param>
            <param name="lowBound">The lower (inclusive) bound.</param>
            <param name="highBound">The upper (inclusive) bound.  This argument is why GetFirstAfterPosition is obsolete.</param>
            <returns>The index of the first object after the given value.</returns>
        </member>
        <member name="M:FlatRedBall.Math.PositionedObjectList`1.GetFirstAfter(System.Single,FlatRedBall.Math.Axis,System.Int32,System.Int32)">
            <summary>
            Gets the first object found after the argument "value" on the argument "axis".  Lists
            must be sorted ascending for this method to work effectively.
            </summary>
            <remarks>
            This method is useful when searching for items in a list after a given value.  
            </remarks>
            <param name="value">The value to search after.  For example, this method will return objects with their position values greater than
            the argument value.  In other words, if 0 is passed as the value, then objects with position values greater than (not equal to) will be returned.</param>
            <param name="axis">The axis representing the value to use (x, y, or z)</param>
            <param name="lowBoundIndex">The lower (inclusive) bound.</param>
            <param name="highBoundIndexExclusive">The upper (exclusive) bound.</param>
            <returns>The index of the first object after the given value. If low bound equals high bound, then the low bound is returned.</returns>
        </member>
        <member name="M:FlatRedBall.Math.PositionedObjectList`1.GetTopParents">
            <summary>
            Returns a one-way List containing the TopParents of all items in the list without duplication.
            </summary>
            <returns>The list of parents.</returns>
        </member>
        <member name="M:FlatRedBall.Math.PositionedObjectList`1.GetZBreaks(System.Collections.Generic.List{System.Int32})">
            <summary>
            Fills a list of indexes containing where the Z values change. 
            </summary>
            <param name="zBreaks">The list of indexes to fill.</param>
        </member>
        <member name="M:FlatRedBall.Math.PositionedObjectList`1.ForEach(System.Action{`0})">
            <summary>
            Performs the argument action on each instance in this list. This performs a forward loop,
            so it may skip instances if Destroy is called in the argument Action.
            </summary>
            <seealso cref="M:FlatRedBall.Math.PositionedObjectList`1.ForEachReverse(System.Action{`0})"/>
            <param name="action">The action to perform on each instance in this.</param>
        </member>
        <member name="M:FlatRedBall.Math.PositionedObjectList`1.ForEachReverse(System.Action{`0})">
            <summary>
            Performans the argument action on each instance in this list. This performs a reverse loop,
            allowing Destroy to be called.
            </summary>
            <param name="action">The action to perform on each instance in this list.</param>
        </member>
        <member name="M:FlatRedBall.Math.PositionedObjectList`1.Shift(System.Single,System.Single,System.Single)">
            <summary>
            Shifts all contained objects' Position by the arguments x,y,z.
            </summary>
            <param name="x">Amount to move on the X axis.</param>
            <param name="y">Amount to move on the Y axis.</param>
            <param name="z">Amount to move on the Z axis.</param>
        </member>
        <member name="M:FlatRedBall.Math.PositionedObjectList`1.Shift(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Shifts all contained objects' Position by the argument vector.
            </summary>
            <param name="vector">The amount to change Position by.</param>
        </member>
        <member name="M:FlatRedBall.Math.PositionedObjectList`1.ShiftRelative(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Shifts all contained objects' RelativePosition by the argument vector.
            </summary>
            <param name="vector">The amount to change RelativePosition by.</param>
        </member>
        <member name="M:FlatRedBall.Math.PositionedObjectList`1.Shuffle">
            <summary>
            Shuffles all elements in the list such that the are in random order afer the call finishes.
            </summary>
            <remarks>
            The Shuffle method can be used for elements which should be presented in a random order. For example,
            a list of players may be shuffled before a game begins to randomize the turn order to prevent one player from
            always going first.
            </remarks>
        </member>
        <member name="T:FlatRedBall.Math.RollingAverage">
            <summary>
            A class which can be used to store and calculate rolling averages for regular numbers and radians.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.RollingAverage.Average">
            <summary>
            Gets the rolling average using the values currently stored, or 0 if no values have been added.
            </summary>
            <remarks>
            The rolling average is calculated using the Capacity number of
            values.  If AddValue has not been called enough times to fill the
            Capacity, then the number of values stored are used.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Math.RollingAverage.Capacity">
            <summary>
            Gets the number of values that are used when calculating a rolling average.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.RollingAverage.IsRadian">
            <summary>
            Gets and sets whether the average value is calculated as radians.
            </summary>
            <remarks>
            This is important for radian values because rotation values reported
            by FlatRedBall loop every 2*PI
            </remarks>
        </member>
        <member name="M:FlatRedBall.Math.RollingAverage.#ctor(System.Int32)">
            <summary>
            Creates a new RolllingAverage with capacity equalling the argument capacity value.
            </summary>
            <param name="capacity">The maximum number of values that the RollingAverage can store.</param>
        </member>
        <member name="M:FlatRedBall.Math.RollingAverage.AddValue(System.Single)">
            <summary>
            Adds a value to the RollingAverage.  The oldest value is discarded if the Capacity has been reached. 
            </summary>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:FlatRedBall.Math.RollingAverage.Clear">
            <summary>
            Clears all values from the rolling average.
            </summary>
        </member>
        <member name="T:FlatRedBall.Math.Splines.Spline">
            <summary>
            A curved line which can be used to move objects, direct AI, or create special effects.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Splines.Spline.PointFrequency">
            <summary>
            The frequency (in time) to create shapes when Visible is set to true.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Splines.Spline.Duration">
            <summary>
            The duration of the spline in time, calculated as the amount of time between the first spline point and the last.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Splines.Spline.Length">
            <summary>
            The estimated length of the spline, as determined by calling CalculateDistanceTimeRelationships. This value
            is not available until CalculateDistanceTimeRelationships is called. CalculateDistanceTimeRelationships must be
            called if the spline changes or else this value may not be accurate.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.Splines.Spline.#ctor">
            <summary>
            Constructs a Spline with no points. Points can be added by calling the Add method.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.Splines.Spline.#ctor(System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector3},System.Double)">
            <summary>
            Creates a spline given a set of points and a time to take. The time assigned to each point is evenly spaced.
            The first point will have a Time of 0, the last will have a time of timeToTake.
            </summary>
            <param name="points">The points, evenly distributed over timeToTake.</param>
            <param name="timeToTake">The duration in time of the entire spline.</param>
        </member>
        <member name="M:FlatRedBall.Math.Splines.Spline.CalculateDistanceTimeRelationships(System.Single)">
            <summary>
            Calculates the position along the spline given a time interval. 
            The smaller the time interval, the smoother the spline. The larger the time interval, the
            faster CalculateDistanceTimeRelationships will execute and the less internal memory will be used to store points.
            </summary>
            <param name="timeInterval">The time interval in seconds. 
            For splines which have very sharp curves this value may need to be smaller to give a smoother curve. 
            Trial and error may be required to get a smooth spline, but a value of 0.1 seconds is a good starting point.</param>
        </member>
        <member name="T:FlatRedBall.Math.Splines.SplineList">
            <summary>
            A List of Splines.  This inherits from a generic List of Splines, but provides
            extra functionality.  This is the runtime type for the .splx format.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Splines.SplineList.Name">
            <summary>
            The name of the SplineList.  Can be used to provide debug
            and identification information.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.Splines.SplineList.#ctor">
            <summary>
            Instantiates an empty SplineList
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.Splines.SplineList.#ctor(System.Int32)">
            <summary>
            Instantiates a SplineList and sets its capacity.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:FlatRedBall.Math.Splines.SplineList.#ctor(System.Collections.Generic.IEnumerable{FlatRedBall.Math.Splines.Spline})">
            <summary>
            Instantiates a SplineList and populates it with the Splines contained in the argument IEnumerable.
            </summary>
            <param name="collection">The Splines to add to the newly-created SplineList.</param>
        </member>
        <member name="M:FlatRedBall.Math.Splines.SplineList.FindByName(System.String)">
            <summary>
            Searches for and returns the first Spline with the name matching the argument, or
            null if no matches are found.
            </summary>
            <param name="name">The name to search for.</param>
            <returns>The contained Spline with the matching name, or null.</returns>
        </member>
        <member name="T:FlatRedBall.Math.Splines.SplinePoint">
            <summary>
            A point in a Spline storing position, velocity, acceleration, and time information.
            </summary>
        </member>
        <member name="F:FlatRedBall.Math.Splines.SplinePoint.Position">
            <summary>
            The position of the SplinePoint in absolute world coordinates.
            </summary>
        </member>
        <member name="F:FlatRedBall.Math.Splines.SplinePoint.Velocity">
            <summary>
            The velocity of an object as it passes through this SplinePoint when moving along a Spline.
            </summary>
        </member>
        <member name="F:FlatRedBall.Math.Splines.SplinePoint.Acceleration">
            <summary>
            The acceleration set when passing through this SplinePoint.  This property is usually
            automatically set by the containing Spline.
            </summary>
        </member>
        <member name="F:FlatRedBall.Math.Splines.SplinePoint.Time">
            <summary>
            The time relative to the start of the Spline when an object moving through the Spline
            will pass through this point.
            </summary>
        </member>
        <member name="F:FlatRedBall.Math.Splines.SplinePoint.UseCustomVelocityValue">
            <summary>
            Controls whether the Velocity value is unchanged by calling
            CalculateVelocities on the Spline.  By default this is false,
            which means velocity on this SplinePoint will be set according
            to the position of the neighboring SplinePoints.  If this value
            is true, then the velocity on this will not be changed by Spline.CalculateVelocities.
            </summary>
        </member>
        <member name="T:FlatRedBall.Math.Statistics.LinearRegression">
            <summary>
            A class which can be used to calculate a best-fit line given a set of points.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.Statistics.RandomExtensions.NextFloat(System.Random,System.Single)">
            <summary>
            Returns a float value between 0 and the argument maxValue;
            </summary>
            <param name="random">The random instance to use.</param>
            <param name="maxValue">The max value to return.</param>
            <returns>A value between 0 and the max value.</returns>
        </member>
        <member name="T:FlatRedBall.PositionedObject">
            <summary>
            Represents an object with position, rotation, ability to 
            store instructions, and attachment abilities.
            </summary>
            <remarks>
            The PositionedObject is a common object in FlatRedBall.  It is the root class
            for a number of FlatRedBall classes including Sprites, Texts, SpriteFrames, PositionedModels,
            and all Shapes.
            <para>
            The PositionedObject class is also used as the base class for Glue entities.
            </para>
            <para>
            PositionedObjects can be automatically managed by being added to the SpriteManager.
            </para>
            </remarks>
        </member>
        <member name="F:FlatRedBall.PositionedObject.Position">
            <summary>
            The absolute world position of the instance.
            </summary>
            <remarks>
            This mirrors the X, Y, and Z properties.  This value essentially becomes
            read-only if this object has a Parent.
            </remarks>
        </member>
        <member name="F:FlatRedBall.PositionedObject.RelativePosition">
            <summary>
            The position of the object relative to its Parent in its Parent's coordinate space.
            </summary>
            <remarks>
            These values become the dominant controller of absolute Position if this
            instance has a Parent.  These values have no impact if the instance does not
            have a Parent.
            </remarks>
        </member>
        <member name="F:FlatRedBall.PositionedObject.Velocity">
            <summary>
            The absolute world velocity of the instance measured in units per second.
            </summary>
            <remarks>
            This mirrors the XVelocity, YVelocity, and ZVelocity properties.  This value is essentially
            invalid if this instance has a Parent.
            </remarks>
        </member>
        <member name="F:FlatRedBall.PositionedObject.RelativeVelocity">
            <summary>
            The velocity of the object relative to its Parent in its Parent's cooridnate space.
            </summary>
            <remarks>
            This value modifies the RelativePosition field even if the object does not have a Parent.
            </remarks>
        </member>
        <member name="F:FlatRedBall.PositionedObject.Acceleration">
            <summary>
            The absolute world acceleration of the instance measured in units per second per second.
            </summary>
            <remarks>
            This mirrors the XAcceleration, YAcceleration, and ZAcceleration properties.  This value is
            essentially invalid if the instance has a Parent; however, it can still build up the Velocity
            value.  
            <para>
            If an object with a parent has a non-zero Acceleration for a significant amount of time, then is
            detached, the Velocity will likely be non-zero and may be very large causing the object to move
            rapidly.
            </para>
            </remarks>
        </member>
        <member name="F:FlatRedBall.PositionedObject.RelativeAcceleration">
            <summary>
            The acceleration of the object relative to its Parent in its Parent's coordinate space.
            </summary>
            <remarks>
            This value modifies the RelativeVelocity field even if the object does not have a Parent.
            </remarks>
        </member>
        <member name="F:FlatRedBall.PositionedObject.RealVelocity">
            <summary>
            The actual velocity of the object from the last frame to this frame.  This value is only valid
            if the KeepTrackOfReal property has been true for over one frame.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.RealAcceleration">
            <summary>
            The actualy acceleration of the object from the last frame to this frame.  This value is only valid
            if the KeepTrackOfReal property has been set to true for over two frames.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.LastPosition">
            <summary>
            The last Position of the object - used to calculate the RealVelocity field.  This is
            valid only if the KeepTrackOfReal property is true.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.LastVelocity">
            <summary>
            The last Velocity of the object - this is used to calculate the RealAcceleration field.  This is
            valid only if the KeepTrackOfReal property is true.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.mDrag">
            <summary>
            The drag of the instance.
            </summary>
            <remarks>
            <seealso cref="P:FlatRedBall.PositionedObject.Drag"/>
            </remarks>
        </member>
        <member name="F:FlatRedBall.PositionedObject.mName">
            <summary>
            The name of the instance.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.mRotationX">
            <summary>
            The X component of the object's absolute rotation.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.mRotationY">
            <summary>
            The Y component of the object's absolute rotation.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.mRotationZ">
            <summary>
            The Z component of the object's absolute rotation.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.mRotationXVelocity">
            <summary>
            The X component of the object's absolute rotational velocity.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.mRotationYVelocity">
            <summary>
            The Y component of the object's absolute rotational velocity.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.mRotationZVelocity">
            <summary>
            The Z component of the object's absolute rotational velocity.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.mRelativeRotationX">
            <summary>
            The X component of the object's relative rotation.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.mRelativeRotationY">
            <summary>
            The Y component of the object's relative rotation.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.mRelativeRotationZ">
            <summary>
            The z component of relative rotation in radians
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.mRelativeRotationXVelocity">
            <summary>
            The X component of the object's relative rotational velocity.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.mRelativeRotationYVelocity">
            <summary>
            The Y component of the object's relative rotational velocity.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.mRelativeRotationZVelocity">
            <summary>
            The Z component of the object's relative rotational velocity.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.mRotationMatrix">
            <summary>
            The matrix representing the absolute orientation of the instance.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.mRelativeRotationMatrix">
            <summary>
            The matrix representing the relative orientation of the object in parent space.  This
            has no impact if the Parent is null.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.mListsBelongingTo">
            <summary>
            The lists that this instance belongs to.  This is how two-way relationships are implemented.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.mParent">
            <summary>
            The PositionedObject that this is attached to.  If it is null then this does not
            follow any relative properties.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.mChildren">
            <summary>
            The objects that are attached to this instance.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.IgnoreParentPosition">
            <summary>
            Controls whether this instance ignores parent positioning. This is false by default, which means Relative values are used
            to determine this instance's absolute positions when it has a parent. If this is set to true, then the positioning of this
            object behaves as if it was not attached. Rotation and other properties which may be affected by a Parent still apply.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.mLastDependencyUpdate">
            <summary>
            The value that was last used when calling UpdateDependencies.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.mInstructions">
            <summary>
            The instructions that belong to this instance.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.Children">
            <summary>
            The list of PositionedObjects that are attached to this instance.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.ListsBelongingTo">
            <summary>
            The List of lists that this belongs to. This member is how two-way relationships are established.
            If an object is added to a list using a "one-way" add, then that list will not be in the 
            object's ListsBelongingTo.
            </summary>
            <remarks>
            PositionedObjects are typically added to managers, children, and Glue lists using two-way relationships, so this
            member provides information about where this object is referenced.
            </remarks>
        </member>
        <member name="P:FlatRedBall.PositionedObject.Name">
            <summary>
            The instance's name.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.Parent">
            <summary>
            The PositionedObject that this instance is attached to.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.ParentRotationChangesPosition">
            <summary>
            Whether the parent's rotation should change the object's position.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.ParentRotationChangesRotation">
            <summary>
            Gets and sets whether the parent's rotation should change the object's rotation. The default is true, which means
            if this is attached to a parent, it will rotate along with the parent, and it can have additional rotation applied through
            its relative rotation values.
            If this value is false, then the relative values are applied directly to the absolute values, ignoring the parent's rotation.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RelativeX">
            <summary>
            Gets and sets the X position relative to the instance's parent.
            </summary>
            <remarks>
            If the instance does not have a parent this property has no effect.
            </remarks>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RelativeY">
            <summary>
            Gets and sets the Y position relative to the instance's parent.
            </summary>
            <remarks>
            If the instance does not have a parent this property has no effect.
            </remarks>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RelativeZ">
            <summary>
            Gets and sets the Z position relative to the instance's parent.
            </summary>
            <remarks>
            If the instance does not have a parent this property has no effect.
            </remarks>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RelativeXVelocity">
            <summary>
            Gets and sets the rate of change of the RelativeX property in units per second. 
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RelativeYVelocity">
            <summary>
            Gets and sets the rate of change of the RelativeY property in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RelativeZVelocity">
            <summary>
            Gets and sets the rate of change of the RelativeZ property in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RelativeXAcceleration">
            <summary>
            Gets and sets the rate of change of the RelativeXVelocity property in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RelativeYAcceleration">
            <summary>
            Gets and sets the rate of change of the RelativeYVelocity property in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RelativeZAcceleration">
            <summary>
            Gets and sets the rate of change of the RelativeZVelocity property in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RelativeRotationX">
            <summary>
            Gets and sets the rotation on the X axis relative to the instance's parent.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RelativeRotationY">
            <summary>
            Gets and sets the rotation on the Y axis relative to the instance's parent.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RelativeRotationZ">
            <summary>
            The z rotation of a PositionedObject relative to its parent in radians. Only applies if this instance is attached to a parent.
            </summary>
            <remarks>
            This rotates the PositionedObject about the Z axis if it is attached to a parent.  Rotation is represented in 
            radians.  Angles will always be greater than or equal to 0 and less than
            two times PI.  Values outside of these bounds will be regulated by the
            set property.
            
            RelativeRotationZ can be used to "spin" a PositionedObject, with a positive variable spinning
            counterclockwise.  
            </remarks>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RelativeRotationMatrix">
            <summary>
            The rotation representing the orientation relative to the instance's Parent.
            </summary>
            <remarks>
            If the instance does not have a Parent then this property has no effect.
            </remarks>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RelativeRotationXVelocity">
            <summary>
            Gets and sets the rate of change of the RelativeRotationX property in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RelativeRotationYVelocity">
            <summary>
            Gets and sets the rate of change of the RelativeRotationY property in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RelativeRotationZVelocity">
            <summary>
            Gets and sets the rate of change of the RelativeRotationZ property in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.LastDependencyUpdate">
            <summary>
            The last time Update was called.
            </summary>
            <remarks>
            This value is set through the TimeManager's CurrentTime property.
            </remarks>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RotationX">
            <summary>
            The x rotation of a PositionedObject
            </summary>
            <remarks>
            This rotates the PositionedObject about the X axis.  Rotation is represented in 
            radians.  Angles will always be greater than or equal to 0 and less than
            two times PI.  Values outside of these bounds will be regulated by the
            set property.
            
            RotationX can be used to flip an image of a PositionedObject, but a PositionedObject should not 
            be flipped during animation (if it is a Sprite).  AnimationFrames can be flipped without 
            setting a Sprite's Rotation values.
            </remarks>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RotationY">
            <summary>
            The y rotation of a PositionedObject
            </summary>
            <remarks>
            This rotates the PositionedObject about the Y axis.  Rotation is represented in 
            radians.  Angles will always be greater than or equal to 0 and less than
            two times PI.  Values outside of these bounds will be regulated by the
            set property.
            
            RotationY can be used to flip an image and set it upside down, but a PositionedObject
            should not be flipped during animation (if it is a Sprite).  AnimationFrames can be flipped without
            setting a Sprite's Rotation values.
            </remarks>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RotationZ">
            <summary>
            The z rotation of a PositionedObject in radians.
            </summary>
            <remarks>
            This rotates the PositionedObject about the Z axis.  Rotation is represented in 
            radians.  Angles will always be greater than or equal to 0 and less than
            two times PI.  Values outside of these bounds will be regulated by the
            set property.
            
            RotationZ can be used to "spin" a PositionedObject, with a positive variable spinning
            counterclockwise.  
            </remarks>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RotationMatrix">
            <summary>
            The matrix applied to the object resulting in its final orientation.
            </summary>
            <remarks>
            The RotationMatrix and RotationX, RotationY, RotationZ reflect eachother.  Changing one will change the other.
            <seealso cref="P:FlatRedBall.PositionedObject.RotationX"/>
            <seealso cref="P:FlatRedBall.PositionedObject.RotationY"/>
            <seealso cref="P:FlatRedBall.PositionedObject.RotationZ"/>
            </remarks>
        </member>
        <member name="P:FlatRedBall.PositionedObject.TransformationMatrix">
            <summary>
            Gets or sets the overall transformation of this object
            </summary>
            <remarks>
            Changing the transformation matrix will change rotation, position and scaling
            </remarks>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RelativeTransformationMatrix">
            <summary>
            Gets or sets the overall transformation of this object, relative to its parent
            </summary>
            <remarks>
            Changing the transformation matrix will change rotation, position and scaling
            </remarks>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RotationXVelocity">
            <summary>
            The absolute X rotation speed measured in radians per second
            </summary>
            <remarks>
            The RotationXVelocity variable is how fast a PositionedObject is rotating on the X axis. It is
            measured in radians per second.
            </remarks>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RotationYVelocity">
            <summary>
            The absolute Y rotation speed measured in radians per second
            </summary>
            <remarks>
            The RotationYVelocity variable is how fast a PositionedObject is rotating on the Y axis. It is
            measured in radians per second.
            </remarks>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RotationZVelocity">
            <summary>
            The absolute Z rotation speed measured in radians per second
            </summary>
            <remarks>
            The RotationZVelocity variable is how fast a PositionedObject is rotating on the Z axis. It is
            measured in radians per second.
            </remarks>
            
        </member>
        <member name="P:FlatRedBall.PositionedObject.TopParent">
            <summary>
            Returns the top node in the attachment hierarchical relationship
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.X">
            <summary>
            The absolute X position.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.Y">
            <summary>
            The absolute Y position.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.Z">
            <summary>
            The absolute Z position.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.XVelocity">
            <summary>
            Gets and sets the absolute X Velocity.  Measured in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.YVelocity">
            <summary>
            Gets and sets the absolute Y Velocity.  Measured in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.ZVelocity">
            <summary>
            Gets and sets the absolute Z Velocity.  Measured in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.XAcceleration">
            <summary>
            Gets and sets the absolute X Acceleration.  Measured in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.YAcceleration">
            <summary>
            Gets and sets the absolute Y Acceleration.  Measured in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.ZAcceleration">
            <summary>
            Gets and sets the absolute Z Acceleration.  Measured in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.KeepTrackOfReal">
            <summary>
            Whether the PositionedObject's RealVelocity and RealAcceleration are
            updated every frame.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.Drag">
            <summary>
            Linear approximation of drag.  This reduces the Velocity of the
            instance according to its absolute Velocity.  
            </summary>
            <remarks>
            The following formula is applied to apply Drag:
            <para>
            Velocity -= Velocity * Drag * TimeManager.SecondDifference;
            Note that a very large Drag value may result in an object moving in the opposite 
            direction.
            </para>
            </remarks>
        </member>
        <member name="P:FlatRedBall.PositionedObject.Instructions">
            <summary>
            The list of Instructions that this instance owns.  These instructions usually
            will execute on this instance; however, this is not a requirement.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.CreationSource">
            <summary>
            Where the PositionedObject was created. This can be Glue, Tiled, or other tools. It is used
            when the game is in edit mode to determine if the PositionedObject can be edited.
            </summary>
        </member>
        <member name="M:FlatRedBall.PositionedObject.#ctor">
            <summary>
            Creates a new PositionedObject instance.
            </summary>
        </member>
        <member name="M:FlatRedBall.PositionedObject.AreSubHierarchiesIdentical(FlatRedBall.PositionedObject,FlatRedBall.PositionedObject)">
            <summary>
            Determines whether the tree structure created by attachments of two PositionedObjects are identical.
            </summary>
            <remarks>
            This method does not investigate the PositionedObjects any more than looking at their children.  It traverses
            through the trees multiple times, and can be a very slow method if the PositionedObjects have large subtrees.  
            The subtrees are small enough in most cases
            where there won't be a performance issue.
            </remarks>
            <param name="s1">The first PositionedObject.</param>
            <param name="s2">The second PositionedObject.</param>
            <returns>Whether the tree structure created by attachments is the same.</returns>
        </member>
        <member name="M:FlatRedBall.PositionedObject.AttachTo(FlatRedBall.PositionedObject,System.Boolean)">
            <summary>
            Attaches this PositionedObject to the argument newParent.
            </summary>
            <remarks>
            <para>A useful way to understand the affect of changeRelative is to consider that it is the opposite of whether 
            absolute values change.  That is, if the relative values do not change upon attachment, the absolute values
            will change.</para>
            <para>
            For an example, consider a situation where a child has an absolute x value of 5 and a relative value of 0 and
            a parent has an absolute x value of 0.  If the child is attached to the parent
            and relative is not changed (relative x remains at 0), then the child's x will be 
            parent.x + child.relX, or 0 + 0 = 0.  We see that the relative value didn't 
            change, so the absolute did.
            </para>
            <para>
            If, on the other hand, the relative was changed, the absolute position would be the same.
            Since the parent's absolute position was 0 and the absolute position of the 
            child should remain at 5, then the relX value would change to 5 (assuming 
            the parent isn't rotated).
            </para>
            </remarks>
            <param name="newParent">The PositionedObject to attach to.</param>
            <param name="changeRelative">Whether relative values should change so that absolute values stay the same.</param>
        </member>
        <member name="M:FlatRedBall.PositionedObject.ClearRelationships">
            <summary>
            Detaches this PositionedObject from its parent and detaches all of the PositionedObject's 
            Children.
            </summary>
        </member>
        <member name="M:FlatRedBall.PositionedObject.CopyFieldsTo(FlatRedBall.PositionedObject)">
            <summary>
            Copies most internal fields of this instance to the argument PositionedObjects.
            </summary>
            <remarks>
            The following fields are not copied:
            <para>* Name</para>
            <para>* ListsBelongingTo</para>
            <para>* Parent</para>
            <para>* Children</para>
            <para>* Instructions</para>
            </remarks>
            <param name="positionedObject"></param>
        </member>
        <member name="M:FlatRedBall.PositionedObject.CopyAbsoluteToRelative">
            <summary>
            Copies the absolute position and rotation values to the relative values.
            </summary>
        </member>
        <member name="M:FlatRedBall.PositionedObject.Clone``1">
            <summary>
            Creates a clone of this instance typed as a T.
            </summary>
            <typeparam name="T">The type of the new object.</typeparam>
            <returns>The newly created instance.</returns>
        </member>
        <member name="M:FlatRedBall.PositionedObject.CreateNewChildrenList">
            <summary>
            Creates a new Children PositionedObjectList.
            </summary>
            <remarks>
            This method is only necessary if a PositionedObject
            is manually cloned by calling MemberwiseClone.  This
            should not be called to detach children as the two-way
            relationship between PositionedObject and PositionedObjectList
            will keep the old Children PositionedObjectList in scope resulting
            in a memory leak.
            </remarks>
        </member>
        <member name="M:FlatRedBall.PositionedObject.CreateNewInstructionsList">
            <summary>
            Creates a new InstructionList.
            </summary>
            <remarks>
            This method is only necessary if a PositionedObject
            is manually cloned by calling MemberwiseClone.  This
            should not be called to clear the Instructions property
            as it will create a new instance and get rid fo the old one
            resulting in unnecessary garbage collection.
            </remarks>
        </member>
        <member name="M:FlatRedBall.PositionedObject.Detach">
            <summary>
            Detaches the PositionedObject from its parent PositionedObject.
            </summary>
            <remarks>
            This method cleans up the two way relationship between parent and child.
            </remarks>
        </member>
        <member name="M:FlatRedBall.PositionedObject.ExecuteInstructions(System.Double)">
            <summary>
            Executes instructions according to the argument currentTime and cycles and reorders
            Instructions as necessary.
            </summary>
            <param name="currentTime">The current time to compare the instruction's TimeToExecute against.</param>
        </member>
        <member name="M:FlatRedBall.PositionedObject.ForceUpdateDependencies">
            <summary>
            Forces an update of the PositionedObject's absolute position and rotation values 
            according to its attachment and relative values.
            </summary>
            <remarks>
            The absolute positions and rotations of Sprites are updated in the 
            Sprite.UpdateDependencies method which is
            called in the SpriteManager.UpdateDependencies.  The SpriteManager.UpdateDependencies is called
            once per frame by default in the Sprite's regular activity.  This method only needs to be called 
            if changes are made after
            the UpdateDependencies method has been called for that particular frame or if updated 
            positions are needed
            immediately after relative values or attachments have been changed.
            
            <para>This method will recur up the hierarchical PositionedObject struture stopping 
            when it hits the top parent.</para>
            </remarks>
        </member>
        <member name="M:FlatRedBall.PositionedObject.GetAllDescendantsOneWay(FlatRedBall.Math.AttachableList{FlatRedBall.PositionedObject})">
            <summary>
            Fills the argument list with the instance's parent, grandparent, etc. recursively.
            </summary>
            <param name="positionedObjects">The list to fill.</param>
        </member>
        <member name="M:FlatRedBall.PositionedObject.Initialize">
            <summary>
            Resets all properties to their default values and clears the ListsBelongingTo property.
            </summary>
        </member>
        <member name="M:FlatRedBall.PositionedObject.Initialize(System.Boolean)">
            <summary>
            Resets all properties to their default values.
            </summary>
            <param name="clearListsBelongingTo">Whether the instance should clear its ListsBelongingTo property.</param>
        </member>
        <member name="M:FlatRedBall.PositionedObject.IsParentOf(FlatRedBall.Math.IAttachable)">
            <summary>
            Determines whether this is a parent (or grandparent of any level) of the argument
            PositionedObject
            </summary>
            <param name="attachable">The PositionedObject to test whether it is lower 
            in the same hiearchical structure.</param>
            <returns>Whether the attachable argument is a child of this instance.</returns>
        </member>
        <member name="M:FlatRedBall.PositionedObject.Pause(FlatRedBall.Instructions.InstructionList)">
            <summary>
            Stops all automatic behavior and stores the necessary instructions to 
            resume activity in the argument InstructionList.
            </summary>
            <param name="instructions">The List to store instructions which are executed to
            resume activity.</param>
        </member>
        <member name="M:FlatRedBall.PositionedObject.RemoveSelfFromListsBelongingTo">
            <summary>
            Removes this instance from all Lists that it shares two-way
            relationships with.
            </summary>
            <remarks>
            FlatRedBall managers use this method in Remove methods.
            </remarks>
        </member>
        <member name="M:FlatRedBall.PositionedObject.ResetRealValues">
            <summary>
            Sets the internal storage of the last frame's position and velocity
            so that the next frame's real velocity and acceleration values will be
            Vector3.Zero.
            </summary>
        </member>
        <member name="M:FlatRedBall.PositionedObject.SetRealValuesFrom(FlatRedBall.PositionedObject)">
            <summary>
            Copies all values related to "Real" values from the argument
            PositionedObject to this instance.
            </summary>
            <param name="positionedObject">The PositionedObject to copy Real values from.</param>
        </member>
        <member name="M:FlatRedBall.PositionedObject.SetRelativeFromAbsolute">
            <summary>
            Uses the object's absolute position and orientation along with its
            Parent's orientation and position to update its relative position and orientation.
            </summary>
        </member>
        <member name="M:FlatRedBall.PositionedObject.TimedActivity(System.Single,System.Double,System.Single)">
            <summary>
            Performs the every-frame position and rotation changing activity.
            </summary>
            <remarks>
            This method does not need to be explicitly called
            for managed objects such as Sprites and collision shapes.
            This method is exposed for custom PositionedObjects which
            are not added to a Manager.
            </remarks>
            <param name="secondDifference">The amount of time since last frame.</param>
            <param name="secondDifferenceSquaredDividedByTwo">Pre-calculated ((secondDifference*secondDifference) ^2) / 2.</param>
            <param name="secondsPassedLastFrame">The last frame secondDifference.</param>
        </member>
        <member name="M:FlatRedBall.PositionedObject.TimedActivityRelative(System.Single,System.Double)">
            <summary>
            Performs the every-frame relative position and relative rotation changing activity.
            </summary>
            <remarks>
            This method does not need to be explicitly called
            for managed objects such as Sprites and collision shapes.
            This method is exposed for custom PositionedObjects which
            are not added to a Manager.
            </remarks>
            <param name="secondDifference">The amount of time since last frame.</param>
            <param name="secondDifferenceSquaredDividedByTwo">Pre-calculated ((secondDifference*secondDifference) ^2) / 2.</param>
        </member>
        <member name="M:FlatRedBall.PositionedObject.ToString">
            <summary>
            Returns a string containing common information about the PositionedObject.
            </summary>
            <returns>The string containing the information about this object.</returns>
        </member>
        <member name="M:FlatRedBall.PositionedObject.UpdateDependencies(System.Double)">
            <summary>
            Updates the absolute position and rotation using relative values and the Parent PositionedObject.
            </summary>
            <remarks>
            This method recurs up the hierarchical chain calling UpdateDependencies so that the entire family of 
            PositionedObjects is positioned appropriately.
            </remarks>
        </member>
        <member name="M:FlatRedBall.PositionedObject.UpdateRotationValuesAccordingToMatrix">
            <summary>
            Sets the absolute rotation values according to the object's RotationMatrix.
            </summary>
        </member>
        <member name="T:FlatRedBall.Screens.Screen">
            <summary>
            Base class for screens typically defined through Glue.
            </summary>
        </member>
        <member name="F:FlatRedBall.Screens.Screen.mTimeScreenWasCreated">
            <summary>
            The time using FlatRedBall.CurrentTime (time since the app started running) which is used
            to determine the screen time.
            </summary>
            <remarks>
            This value starts at 0 when a Screen is first created. This can be modified to restart screen timer, but
            it can cause unexpected side effects for systems which depend on timing, so this should not be changed in normal gameplay.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Screens.Screen.RestartVariableValues">
            <summary>
            Stores the names and values of variables which should be preserved on the next
            restart. These values are recorded prior to the screen being destroyed, then applied
            after the construction of the next screen. These values are used internally in the base
            screen class and should not be modified.
            </summary>
        </member>
        <member name="P:FlatRedBall.Screens.Screen.RestartVariables">
            <summary>
            A collection of variables to reset. This can be variables on the Screen itself or variables on objects within
            the screen, like this.PlayerInstance.X. Note that any objects which belong to the screen must begin with the name "this".
            </summary>
        </member>
        <member name="P:FlatRedBall.Screens.Screen.Instructions">
            <summary>
            The list of instructions owned 
            by this screen.
            </summary>
            <remarks>
            These instructions will be automatically
            executed based off of time.  Execution of
            these instructions is automatically handled 
            by the InstructionManager.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Screens.Screen.AccumulatedPauseTime">
            <summary>
            Returns how much time the Screen has spent paused
            </summary>
        </member>
        <member name="P:FlatRedBall.Screens.Screen.PauseAdjustedCurrentTime">
            <summary>
            Returns the number of seconds since the Screen was initialized, excluding paused time.
            This value begins at 0 when the Screen is first created and is reset when the screen restarts.
            </summary>
            <remarks>
            If a screen is never paused, then its PauseAdjustedCurrentTime value increases regularly.
            If a screen is never paused and it is the first screen in the game, then PauseAdjustedCurrentTime
            will equal TimeManager.CurrentTime.
            </remarks>
            <seealso cref="P:FlatRedBall.Screens.Screen.AccumulatedPauseTime"/>
        </member>
        <member name="P:FlatRedBall.Screens.Screen.ScreenDestroy">
            <summary>
            Action raised when this screen is destroyed. This can be used to create flow objects or for top-level
            debugging/game editors.
            </summary>
        </member>
        <member name="P:FlatRedBall.Screens.Screen.IsActivityFinished">
            <summary>
            Gets and sets whether the activity is finished for a particular screen. Setting this to 
            true will notify the Screen that it should destroy itself and move on to the next screen.
            </summary>
            <remarks>
            If activity is finished, then the ScreenManager or parent
            screen (if the screen is a popup) knows to destroy the screen
            and loads the NextScreen class.</remarks>
            <seealso cref="M:FlatRedBall.Screens.Screen.MoveToScreen(System.String)"/>
            <seealso cref="M:FlatRedBall.Screens.Screen.MoveToScreen(System.Type)"/>
        </member>
        <member name="P:FlatRedBall.Screens.Screen.NextScreen">
            <summary>
            The name of the Screen-inheriting to load next. This can be fully qualified "Namespace.Screens.ScreenName" or 
            just the screen name. If just a screen name is specified then current screen's namespace will be prepended.
            to link to.
            </summary>
            <remarks>
            This property is read by the ScreenManager when IsActivityFinished is
            set to true.  Therefore, this must always be set to some value before
            or in the same frame as when IsActivityFinished is set to true.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Screens.Screen.Destroy">
            <summary>
            Performs the unloading of content and destroys all contained objects. 
            Typically this method should not be called directly, but instead the IsActivityFinished 
            property is set to true, which internally calls Destroy.
            </summary>
        </member>
        <member name="M:FlatRedBall.Screens.Screen.PauseAdjustedSecondsSince(System.Double)">
            <summary>
            Returns the number of seconds since the argument time for the current screen, considering pausing.
            </summary>
            <remarks>
            Each screen has an internal timer which keeps track of how much time has passed since it has been constructed.
            This timer always begins at 0. Therefore, the following code will always tell you how long the screen has been alive:
            var timeScreenHasBeenAlive = ScreenInstance.PauseAdjustedSecondsSince(0);
            </remarks>
            <example>
            PauseAdjustedSecondsSince can be used to determine if some timed event has expired. For example:
            bool isCooldownFinished = PauseAdjustedSecondsSince(lastAbilityUse) >= CooldownTime;
            </example>
            <param name="time">The time from which to check how much time has passed.</param>
            <returns>How much time has passed since the parameter value.</returns>
        </member>
        <member name="M:FlatRedBall.Screens.Screen.RestartScreen(System.Boolean,System.Boolean)">
            <summary>
            Destroys and re-creates this screen.
            </summary>
            <remarks>
            This can be used to begin a level from the beginning or to reload a screen for debugging.
            </remarks>
            <param name="reloadContent">Whether the screen's content should be reloaded. 
            If true, then any content that belongs
            to this Screen's content manager will be reloaded. 
            Global content will not be reloaded.</param>
            <param name="applyRestartVariables">Whether to apply restart variables. If true, then any restart variables
            will be applied, which is useful when iterating on a game. This should be false if restarting
            due to gameplay events such as a player dying.</param>
        </member>
        <member name="M:FlatRedBall.Screens.Screen.ApplyVariable(System.String,System.Object,System.Object)">
            <summary>
            Applies a value to a variable like "this.Player.X". 
            </summary>
            <remarks>
            This can be used by scripting systems, but is also used internally by
            screens when restarting.
            </remarks>
            <param name="variableName">The variable name, where the name must start with "this." if it is on an instance on the screen.</param>
            <param name="value">The value, as an object.</param>
            <param name="container">The parent object, allowing variables like this.Object.Subobject, where Object is the parent.</param>
        </member>
        <member name="M:FlatRedBall.Screens.Screen.GetInstance(System.String,System.Object,System.String@,System.Object@)">
            <summary>
            Obtains the instance object represented after the dot using reflection. The variable
            should begin with "this" if it is an object on the screen. For example, passing "this.SpriteList"
            will return the SpriteList object.
            </summary>
            <param name="instanceName">The variable name with dots such as "this.SpriteList"</param>
            <param name="container">The container of the object. Should be null for objects contained in the screen.</param>
            <param name="afterDot">The variable after the instance has been returned, allowing for recursive calls. For example, passing Sprite.X will return X</param>
            <param name="instance">The instance on the variable before the first dot. </param>
        </member>
        <member name="M:FlatRedBall.Screens.Screen.MoveToScreen(System.String)">
            <summary>Tells the screen that it should destroy itself
            and move to the screen with the matching (fully qualified) name.
            This method is usually used to move between screens or levels.
            </summary>
            <param>Fully Qualified Type of the screen to move to</param>
        </member>
        <member name="M:FlatRedBall.Screens.Screen.MoveToState(System.Int32)">
            <param name="state">This should be a valid enum value of the concrete screen type.</param>
        </member>
        <member name="M:FlatRedBall.Screens.Screen.HandleBackNavigation">
            <summary>Default implementation tells the screen manager to finish this screen's activity and navigate
            to the previous screen on the backstack.</summary>
            <remarks>Override this method if you want to have custom behavior when the back button is pressed.</remarks>
        </member>
        <member name="P:FlatRedBall.Screens.ScreenManager.PersistentDrawableBatches">
            <summary>
            A list of IDrawableBatch instances which persist inbetween screens. Items in this list
            do not result in exceptions if they are not cleaned up inbetween screens.
            </summary>
        </member>
        <member name="E:FlatRedBall.Screens.ScreenManager.BeforeScreenCustomInitialize">
            <summary>
            Event raised before a screen's CustomInitialize is called, allowing systems (like the level editor) to
            run code before the user's custom code.
            </summary>
        </member>
        <member name="E:FlatRedBall.Screens.ScreenManager.AfterScreenDestroyed">
            <summary>
            Event raised after a screen's Destroy is called.
            </summary>
            <remarks>
            This is called before checking for leftover objects (such as Entities which haven't been destroyed).
            </remarks>
        </member>
        <member name="M:FlatRedBall.Screens.ScreenManager.Activity">
            <summary>
            Calls activity on the current screen and checks to see if screen
            activity is finished.  If activity is finished, the current Screen's
            NextScreen is loaded.
            </summary>
        </member>
        <member name="M:FlatRedBall.Screens.ScreenManager.MoveToScreen(System.Type,System.Action{FlatRedBall.Screens.Screen})">
            <summary>
            Ends the current screen and moves to the next screen.
            </summary>
            <param name="screenType">The screen to move to.</param>
            <param name="screenCreatedCallback">An event to call after the screen has been created.</param>
            <remarks>
            This method provides an alternative to the screen managing its own flow through its MoveMoveToScreen method.
            This method can be used by objects outside of screens managing flow.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Screens.ScreenManager.Start(System.Type)">
            <summary>
            Loads a screen.  Should only be called once during initialization.
            </summary>
            <param name="screenToStartWithType">Qualified name of the class to load.</param>
        </member>
        <member name="F:FlatRedBall.Sprite.mEmpty">
            <summary>
            Used by particles to flag a particular Sprite as empty.
            </summary>
            <remarks>
            The SpriteManager is responsible for particle recycling and uses this value to indicate
            whether a Sprite is currently used.  This should not be manually modified.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Sprite.AnimationSpeed">
            <summary>
            Gets or sets the speed multiplier when playing animations. A value of 1 makes animations play at normal speed.
            A value of 2 will play animations twice as fast.
            </summary>
        </member>
        <member name="P:FlatRedBall.Sprite.CurrentChain">
            <summary>
            Gets the current animationChain - retrieved through the CurrentChainIndex property. Setting this sets the CurrentChainName since rather than
            a direct reference. Therefore, this chain must be contained in the AnimationChains list.
            </summary>
        </member>
        <member name="P:FlatRedBall.Sprite.CurrentChainIndex">
            <summary>
            Gets and sets the index of the current AnimationChain in the Sprite's AnimationChains list.
            </summary>
        </member>
        <member name="P:FlatRedBall.Sprite.CurrentChainName">
            <summary>
            Gets or sets the name of the current animation chain on the sprite. Setting this value is the recommended way to switch between animations.
            Setting this value will search the Sprite's AnimationChains for an animation with a matching name. If the argument differs from the current
            animation, the animation is set and played from the beginning. If the current animation matches the assigned value, no logic is performed.
            </summary>
        </member>
        <member name="P:FlatRedBall.Sprite.CurrentFrame">
            <summary>
            The current AnimationFrame displayed by this Sprite, or null if no AnimationFrame is being displayed
            </summary>
        </member>
        <member name="P:FlatRedBall.Sprite.JustChangedFrame">
            <summary>
            Whether this Sprite just changed the AnimationFrame it is displaying due to internal animation activity this frame.
            </summary>
        </member>
        <member name="P:FlatRedBall.Sprite.JustCycled">
            <summary>
            Whether this Sprite just cycled its animation (set its CurrentFrameIndex to 0) due to internal animation activity this frame.
            </summary>
        </member>
        <member name="P:FlatRedBall.Sprite.ScaleX">
            <summary>
            The distance from the center of the Sprite to its edge, which is equal to Width / 2.
            </summary>
        </member>
        <member name="P:FlatRedBall.Sprite.ScaleY">
            <summary>
            The distance from the center of the Sprite to its edge, which is equal to Height / 2. 
            </summary>
        </member>
        <member name="P:FlatRedBall.Sprite.Left">
            <summary>
            Returns the left X of the Sprite, assuming no rotation.
            </summary>
            <remarks>
            If the sprite is rotated, this property will not return the correct value.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Sprite.Right">
            <summary>
            Returns the right X of the sprite, assuming no rotation.
            </summary>
            <remarks>
            If the sprite is rotated, this property will not return the correct value.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Sprite.Top">
            <summary>
            Returns the top Y of the sprite, assuming no rotation.
            </summary>
            <remarks>
            If the sprite is rotated, this property will not return the correct value.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Sprite.Bottom">
            <summary>
            Returns the bottom Y of the sprite, assuming no rotation.
            </summary>
            <remarks>
            If the sprite is rotated, this property will not return the correct value.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Sprite.RelativeLeft">
            <summary>
            Returns the left edge of the Sprite relative its Parent.  This value uses RelativeX and Width/2 to calculate this value.
            </summary>
        </member>
        <member name="P:FlatRedBall.Sprite.RelativeRight">
            <summary>
            Returns the right edge of the Sprite relative its Parent.  This value uses RelativeX and Width/2 to calculate this value.
            </summary>
        </member>
        <member name="P:FlatRedBall.Sprite.RelativeTop">
            <summary>
            Returns the top edge of the Sprite relative its Parent.  This value uses RelativeY and Height/2 to calculate this value.
            </summary>
        </member>
        <member name="P:FlatRedBall.Sprite.RelativeBottom">
            <summary>
            Returns the bottom edge of the Sprite relative its Parent.  This value uses RelativeY and Height/2 to calculate this value.
            </summary>
        </member>
        <member name="P:FlatRedBall.Sprite.Width">
            <summary>
            The Sprite's Width in absolute world coordinates. This value may be set according
            to the currently displayed texture and texture coordinates if TextureScale is greater than 0.
            </summary>
        </member>
        <member name="P:FlatRedBall.Sprite.Height">
            <summary>
            The Sprite's Height in absolute world coordinates. This value may be set according
            to the currently displayed texture and texture coordinates if TextureScale is greater than 0.
            </summary>
        </member>
        <member name="P:FlatRedBall.Sprite.TimeCreated">
            <summary>
            The time returned by the TimeManager when the Sprite was created.
            </summary>
            <remarks>
            This value is automatically set when the Sprite
            is added through the SpriteManager.  If a Sprite is created manually (either as a
            Sprite or a class inheriting from the Sprite class) this value should be set manually
            if it is to be used later.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Sprite.Visible">
            <summary>
            Controls the visibility of the Sprite
            </summary>
            <remarks>
            This variable controls the visiblity of the Sprite.  Sprites are visible
            by default.  Setting Visible to false will make the sprite invisible, but
            the Sprite will continue to behave regularly; custom behavior, movement, attachment,
            and animation are still executed, and collision is possible.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Sprite.AnimateSelf(System.Double)">
            <summary>
            Performs the every-frame logic for updating the current AnimationFrame index.  If the
            Sprite is part of the SpriteManager then this is automatically called.
            </summary>
            <param name="currentTime">The number of seconds that have passed since the game has started running.</param>
        </member>
        <member name="M:FlatRedBall.Sprite.ClearAnimationChains">
            <summary>
            Clears all references to AnimationChains and sets the Animate property to false.
            </summary>
        </member>
        <member name="M:FlatRedBall.Sprite.RemoveAnimationChain(FlatRedBall.Graphics.Animation.AnimationChain)">
            <summary>
            Removes the AnimationChain from the Sprite's internal AnimationChain List.
            </summary>
            <remarks>
            If the chainToRemove is also the CurrentChain, the animate field 
            is set to false.
            </remarks>
            <param name="chainToRemove">The AnimationChain to remove.</param>
        </member>
        <member name="M:FlatRedBall.Sprite.SetAnimationChain(FlatRedBall.Graphics.Animation.AnimationChain)">
            <summary>
            Sets the argument chainToSet as the animationChain. If the argument chainToSet is not
            part of the Sprite's internal list of AnimationChains, it is added.
            </summary>
            <remarks>
            This differs from FlatRedBall MDX - this method on FlatRedBall MDX does not add the argument
            AnimationChain to the Sprite's internal list.
            <para>
            This does not set any animation-related properties, but it does set the current
            texture to the current frame's texture.  Therefore, it is still necessary to set Animate to true.
            </para>
            </remarks>
            <param name="chainToSet">The AnimationChain to set as the current AnimationChain.  This is
            added to the internal AnimationChains property if it is not already there.</param>
        </member>
        <member name="M:FlatRedBall.Sprite.SetAnimationChain(System.String)">
            <summary>
            Sets the current AnimationChain by name and keeps the CurrentFrame the same.
            </summary>
            <remarks>
            This method assumes that the Sprite contains a reference to an AnimationChain with the name matching chainToSet.  Passing a
            name that is not found in the Sprite's AnimationChainArray will not cause any changes.
            
            <para>This method will keep the CurrentFrame property the same (unless it exceeds the bounds of the new AnimationChain).  In the 
            case that the CurrentFrame is greater than the bounds of the new AnimationChain, the animation will cycle back to the beginning.
            The animate field is not changed to true if it is false.</para>
            <seealso cref="!:FRB.Sprite.AnimationChains"/>
            </remarks>
            <param name="chainToSet">The name of the AnimationChain to set as current.</param>
        </member>
        <member name="M:FlatRedBall.Sprite.SetScaleYRatioToX">
            <summary>
            Sets the ScaleY so that the ScaleX/ScaleY ratio is the same as the source image used for the Sprite's texture.
            </summary>
        </member>
        <member name="M:FlatRedBall.Sprite.SetScaleXRatioToY">
            <summary>
            Sets the ScaleY so that the ScaleX/ScaleY ratio is the same as the source image used for the Sprite's texture.
            </summary>
        </member>
        <member name="M:FlatRedBall.Sprite.TimedActivity(System.Single,System.Double,System.Single)">
            <summary>
            Applies all velocities, rates, accelerations for real and relative values.
            If the Sprite is part of the SpriteManager (which is common) then this is automatically
            called.
            </summary>
            <param name="secondDifference">The number of seocnds that have passed since last frame.</param>
            <param name="secondDifferenceSquaredDividedByTwo">Precalculated (secondDifference * secondDifference)/2.0f for applying acceleration.</param>
            <param name="secondsPassedLastFrame">The number of seconds that passed last frame for calculating "real" values.</param>
        </member>
        <member name="P:FlatRedBall.Sprite.Alpha">
            <summary>
            Controls the Sprite's transparency.
            </summary>
            <remarks>
            Fade controls a Sprite's transparency.   A completely opaque Sprite has an
            Alpha of 1 while a completely transparent object has an Alpha of 0.
            
            Setting the AlphaRate of a completely opaque Sprite to -1 will 
            make the sprite disappear in one second.  Invisible Sprites continue
            to remain in memory and are managed by the SpriteManager.  The Alpha variable
            will automatically regulate itself if the value is set to something outside of the
            0 - 1 range.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Sprite.AlphaRate">
            <summary>
            Sets the rate at which the Alpha property changes.  This is in units per second.  A fully opaque
            Sprite (Alpha = 1) will disappear in 1 second if its AlphaRate is set to -1.
            </summary>
            <remarks>
            The AlphaRate changes Alpha as follows:
            <para>
            Alpha += AlphaRate * TimeManager.SecondDifference;
            </para>
            This is automatically applied if the Sprite is managed by the SpriteManager(usually the case).
            </remarks>
        </member>
        <member name="P:FlatRedBall.Sprite.Red">
            <summary>
            The red component of the color value to be used with the color operation. This value should be between 0 and 1.
            </summary>
        </member>
        <member name="P:FlatRedBall.Sprite.Green">
            <summary>
            The green component of the color value to be used with the color operation. This value should be between 0 and 1.
            </summary>
        </member>
        <member name="P:FlatRedBall.Sprite.Blue">
            <summary>
            The blue component of the color value to be used with the color operation. This value should be between 0 and 1.
            </summary>
        </member>
        <member name="P:FlatRedBall.Sprite.Texture">
            <summary>
            The texture to be displayed by the Sprite.
            </summary>
        </member>
        <member name="P:FlatRedBall.Sprite.TextureScale">
            <summary>
            The relationship between the displayed portion of the Sprite's texture and 
            its Width/Height. If this value is less than or equal to 0, then Width and Height
            values are not set according to the displayed portion of the Sprite's texture. Otherwise,
            the displayed portion of the texture are multiplied by this value to determine the Sprite's
            Width and Height.
            </summary>
        </member>
        <member name="P:FlatRedBall.Sprite.FlipHorizontal">
            <summary>
            Whether to flip the Sprite's texture on the y Axis (left and right switch).
            </summary>
            <remarks>
            This kind of texture rotation can be accomplished by simply rotating 
            a Sprite on its yAxis; however, there are times when this
            is inconvenient or impossible due to attachment relationships.  There 
            is no efficiency consequence for using either method.  If a Sprite
            is animated, this value will be overwritten by the AnimationChain being used.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Sprite.FlipVertical">
            <summary>
            Whether to flip the Sprite's texture on the x Axis (top and bottom switch).
            </summary>
            <remarks>
            This kind of texture rotation can be accomplished by simply rotating a 
            Sprite on its xAxis; however, there are times when this
            is inconvenient or impossible due to attachment relationships.  
            There is no efficiency consequence for using either method.  If a Sprite
            is animated, this value will be overwritten by the AnimationChain being used.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Sprite.TopTextureCoordinate">
            <summary>
            The top coordinate in texture coordinates on the sprite. Default is 0.
            This value is in texture coordinates, not pixels. A value of 1 represents the bottom-side of the texture.
            </summary>
        </member>
        <member name="P:FlatRedBall.Sprite.TopTexturePixel">
            <summary>
            The top pixel displayed on the sprite. Default is 0.
            This value is in pixel coordiantes, so it typically ranges from 0 to the height of the referenced texture.
            </summary>
        </member>
        <member name="P:FlatRedBall.Sprite.Vertices">
            <summary>
            These can be used to change Sprite appearance
            on individual vertices.
            </summary>
            <remarks>
            The index begins counting at the top left (index 0)
            and increases moving clockwise.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Sprite.VerticesForDrawing">
            <summary>
            Represents the four (4) vertices used to render the Sprite.  This value is set
            if the Sprite is either a manuall updated Sprite, or if the SpriteManager's ManualUpdate
            method is called on this.
            </summary>
        </member>
        <member name="M:FlatRedBall.Sprite.UpdateToCurrentAnimationFrame">
            <summary>
            Updates the sprite according to its current AnimationChain and AnimationFrame. Specifically this updates
             - Texture
             - Texture coordiantes
             - Flip Horizontal (if IgnoreAnimationChainTextureFlip is true)
             - Relative X and Y (if UseAnimationRelativePosition is true
             - Executes AnimationFrame instructions
             - Adjusts the size of the sprite if its TextureScale
            </summary>
            <remarks>
            This method is automatically called for sprites which are automatically updated (default) and which are using
            an AnimationChain. This can be manually called after assigning the AnimationFrame and AnimationChain.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Sprite.Clone">
            <summary>
            Returns a clone of this instance.
            </summary>
            <remarks>
            Attachments are not cloned.  The new clone
            will not have any parents or children.
            </remarks>
            <returns>The new clone.</returns>
        </member>
        <member name="T:FlatRedBall.SpriteCustomBehavior">
            <summary>
            Delegate for methods which can be assigned to the Sprite for every-frame
            custom logic or when a Sprite is removed.
            </summary>
            <remarks>
            <seealso cref="F:FlatRedBall.Sprite.CustomBehavior"/>
            <seealso cref="E:FlatRedBall.Sprite.Remove"/>
            </remarks>
            <param name="sprite">The Sprite on which the logic should execute.</param>
        </member>
        <member name="M:FlatRedBall.SpriteList.FindSpritesWithTexture(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Returns a one-way SpriteList containing all Sprites in this SpriteList which reference the texture argument.
            </summary>
            <param name="texture">The texture to match against.</param>
            <returns>SpriteList containing Sprites with matching textures.</returns>
        </member>
        <member name="M:FlatRedBall.SpriteList.SortTextureInsertion(System.Int32,System.Int32)">
            <summary>
            Sorts a sub-array of the SpriteArray by their Texture.
            </summary>
            <param name="firstSprite">Index of the first Sprite, inclusive.</param>
            <param name="lastSpriteExclusive">Index of the last Sprite, exclusive.</param>
        </member>
        <member name="T:FlatRedBall.Updater">
            <summary>
            Contains logic for updating objects.  This is used to separate 
            updates into different threads
            </summary>
        </member>
        <member name="T:FlatRedBall.SpriteManager">
            <summary>
            Static manager class which handles the management of Sprites, SpriteFrames, Cameras, and
            other PositionedObjects.
            </summary>
            <remarks>
            The SpriteManager is commonly used in FlatRedBall examples to create Sprites.  Perhaps the most
            common line of code is:
            
                Sprite sprite = SpriteManager.AddSprite("redball.bmp");
            
            Originally the SpriteManager was the only manager class.  For this reason it handled
            some of the functionality which may have normally belonged to classes unrelated to Sprites.
            For example, Cameras are added and managed through the SpriteManager although they are a general
            rendering class which might belong in the Renderer or FlatRedBallServices class.
            </remarks>
        </member>
        <member name="F:FlatRedBall.SpriteManager.mParticleSprites">
            <summary>
            SpriteList filled with valid Sprites at the start of execution.
            </summary>
            <remarks>
            Particle Sprites are defined as Sprites which have a short lifespan and
            are created frequently.  Common uses are smoke, bullets, and explosions.
            </remarks>
        </member>
        <member name="P:FlatRedBall.SpriteManager.AutomaticallyUpdatedSprites">
            <summary>
            A read-only collection of Sprites which are automatically managed
            every frame.
            </summary>
            <remarks>
            Sprites in this list have all of their behavioral properties
            applied automatically.  Examples of these properties include
            Velocity, Acceleration, rotational velocity, and color rates.
            This manage requires overhead which can become a significant portion
            of frame time, so moving Sprites to be manually updated can improve performance.
            
            Most methods which create Sprites will place the created Sprite in this list.
            
            <seealso cref="M:FlatRedBall.SpriteManager.ConvertToAutomaticallyUpdated(FlatRedBall.Sprite)"/>
            <seealso cref="M:FlatRedBall.SpriteManager.ConvertToManuallyUpdated(FlatRedBall.Sprite)"/>
            </remarks>
        </member>
        <member name="P:FlatRedBall.SpriteManager.Camera">
            <summary>
            Gets the default Camera.
            </summary>
            <remarks>
            If your application is only using one Camera, then this Camera can be
            used for all logic.  This Camera is automatically created by the engine,
            so single-camera applications do not need to instantiate their own Camera.
            </remarks>
        </member>
        <member name="P:FlatRedBall.SpriteManager.Cameras">
            <summary>
            The List of all Cameras used by FlatRedBall.  Any Camera in this List is managed and
            renders according to its settings.
            </summary>
            <remarks>
            Adding a Camera to this list will result in the Camera being managed by the engine and
            rendered.  There is no AddCamera method - simply adding the Camera to this list is sufficient
            for adding it to the engine.
            </remarks>
        </member>
        <member name="P:FlatRedBall.SpriteManager.DrawableBatches">
            <summary>
            A read-only collection of IDrawableBatches.
            </summary>
            <remarks>
            <seealso cref="M:FlatRedBall.SpriteManager.AddDrawableBatch(FlatRedBall.Graphics.IDrawableBatch)"/>
            <seealso cref="M:FlatRedBall.SpriteManager.RemoveDrawableBatch(FlatRedBall.Graphics.IDrawableBatch)"/>
            </remarks>
        </member>
        <member name="P:FlatRedBall.SpriteManager.AutoIncrementParticleCountValue">
            <summary>
            When not set to 0 and the number of particles on screen exceed what is available, then
            the MaxParticleCount will be incremented by this amount.  Otherwise, it will throw
            an out of particles exception.
            </summary>
        </member>
        <member name="P:FlatRedBall.SpriteManager.SpriteFrames">
            <summary>
            Read-only collection of SpriteFrames managed by the SpriteManager.
            </summary>
        </member>
        <member name="P:FlatRedBall.SpriteManager.Layers">
            <summary>
            A read-only, ordered list of layers. This does not contain camera-specific layers.
            Layers with a higher index will be drawn on top of layers with a lower index. Layers
            will appear in this list in the order that they are added.
            </summary>
            <seealso cref="M:FlatRedBall.SpriteManager.MoveLayerAboveLayer(FlatRedBall.Graphics.Layer,FlatRedBall.Graphics.Layer)"/>
            <seealso cref="M:FlatRedBall.SpriteManager.MoveToBack(FlatRedBall.Graphics.Layer)"/>
            <seealso cref="M:FlatRedBall.SpriteManager.MoveToFront(FlatRedBall.Graphics.Layer)"/>
        </member>
        <member name="P:FlatRedBall.SpriteManager.TopLayer">
            <summary>
            A layer which is drawn on top of all other layers. 
            This is drawn on every camera, obeying the camera's DestinationRectangle.
            </summary>
        </member>
        <member name="P:FlatRedBall.SpriteManager.UnderAllDrawnLayer">
            <summary>
            A layer which is drawn underneath all other layers, and under unlayered objects. 
            This is drawn on every camera, obeying the camera's DestinationRectangle.
            </summary>
        </member>
        <member name="P:FlatRedBall.SpriteManager.OrderedSortType">
            <summary>
            Gets and sets the sorting type used on Sprites, Text objects, and DrawableBatches
            in the world (not on layers). For sorting visual objects on layers, see the Layer's
            SortType property.
            </summary>
        </member>
        <member name="M:FlatRedBall.SpriteManager.#cctor">
            <summary>
            Creates a new SpriteManager.
            </summary>
        </member>
        <member name="M:FlatRedBall.SpriteManager.AddToLayer(FlatRedBall.Sprite,FlatRedBall.Graphics.Layer)">
            <summary>
            Adds the argument Sprite to the argument Layer. If the Sprite is not already
            managed by the SpriteManager, the Sprite will also be added to the internal list
            for management. This method can be called multiple times to add a single Sprite to
            multiple Layers.
            
            If the layerToAddTo argument is null then the Sprite is added as a regular un-layered Sprite.
            </summary>
            <param name="spriteToAdd">The Sprite to add.</param>
            <param name="layerToAddTo">The Layer to add to. If null, the Sprite will be added as an un-layered Sprite.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if this is not called on the primary thread.</exception>
        </member>
        <member name="M:FlatRedBall.SpriteManager.AddToLayer(FlatRedBall.Graphics.IDrawableBatch,FlatRedBall.Graphics.Layer)">
            <summary>
            Adds the argument batchToAdd to the argument layerToAddTo.
            If layerToAddTo is null, then this is the same as calling AddDrawableBatch(batchToAdd).
            If batchToAdd has already been added to the SpriteManager as an un-layered IDrawableBatch,
            this method will remove the IDrawableBatch from the unlayered list, and add it to the layer (so it draws only one time).
            Calling this method multiple times with multiple layers, however, will result in batchToAdd being part of multiple layers.
            </summary>
            <param name="batchToAdd">The IDrawableBatch to add.</param>
            <param name="layerToAddTo">The layer to add to, which can be null.</param>
        </member>
        <member name="M:FlatRedBall.SpriteManager.AddManualParticleSprite(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Returns a particle Sprite which is not managed internally by the engine. This is the most
            efficient type of Sprite in FlatRedBall because it is pooled and the engine does not internally
            update the sprite. 
            </summary>
            <param name="texture">The texture to assign to the sprite.</param>
            <returns>The sprite, which may be returned from a pool of sprites.</returns>
        </member>
        <member name="M:FlatRedBall.SpriteManager.AddDrawableBatch(FlatRedBall.Graphics.IDrawableBatch)">
            <summary>
            Adds the argument IDrawableBatch to the engine to be rendered in order of its Z value.
            </summary>
            <remarks>
            This method must be called on the main thread.
            </remarks>
            <param name="drawableBatch">The IDrawableBatch to draw</param>
        </member>
        <member name="M:FlatRedBall.SpriteManager.GetDuplicateMembership">
            <summary>
            Returns the first object which is added twice to the SpriteManager, or null if none are found.
            </summary>
            <returns>The first duplicate object or null.</returns>
        </member>
        <member name="M:FlatRedBall.SpriteManager.ConvertToManuallyUpdated(FlatRedBall.Sprite)">
            <summary>
            Converts the argument Sprite from an anutomatically updated Sprite to a manually updated Sprite.
            </summary>
            <param name="spriteToConvert"></param>
        </member>
        <member name="M:FlatRedBall.SpriteManager.ConvertToAutomaticallyUpdated(FlatRedBall.Sprite)">
            <summary>
            Converts the argument Sprite from a manually updated Sprite to an automatically updated Sprite.
            </summary>
            <param name="spriteToConvert">The sprite to convert.</param>
        </member>
        <member name="M:FlatRedBall.SpriteManager.IsManaging(FlatRedBall.Sprite)">
            <summary>
            Returns whether the SpriteManager is holding a reference to the argment sprite.
            </summary>
            <param name="sprite">The sprite to check references for.</param>
            <returns>Whether the argument Sprite is referenced by the SpriteManager.</returns>
        </member>
        <member name="M:FlatRedBall.SpriteManager.MoveToBack(FlatRedBall.Graphics.Layer)">
            <summary>
            Moves the argument layer to the back (to index 0), so that all other layers
            draw on top of the argument layer.
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:FlatRedBall.SpriteManager.MoveToFront(FlatRedBall.Graphics.Layer)">
            <summary>
            Moves the argument layer so it appears in front (drawn after) all other layers.
            </summary>
            <param name="layer">The layer to move.</param>
        </member>
        <member name="M:FlatRedBall.SpriteManager.MoveLayerAboveLayer(FlatRedBall.Graphics.Layer,FlatRedBall.Graphics.Layer)">
            <summary>
            Reorders the argument layerToMove so that it is drawn immediately after the relativeTo layer.
            </summary>
            <param name="layerToMove">Which layer to move.</param>
            <param name="relativeTo">The layer to move in front of.</param>
        </member>
        <member name="M:FlatRedBall.SpriteManager.RemoveSpriteOneWay(FlatRedBall.Sprite)">
            <summary>
            Removes the argument sprite from all SpriteManager lists and all
            layers, but keeps the Sprite attached to its parent objects
            (such as a Glue entity).
            </summary>
            <param name="spriteToRemove">The Sprite to remove</param>
        </member>
        <member name="M:FlatRedBall.SpriteManager.RemovePositionedObject(FlatRedBall.PositionedObject)">
            <summary>
            Removes the argument objectToRemove from all SpriteManager lists (for rendering and automatic updates) as well as
            from any two-way lists that the object may belong to (such as PositionedObjectLists in custom code and lists in Glue).
            </summary>
            <param name="objectToRemove">The object to remove.</param>
        </member>
        <member name="M:FlatRedBall.SpriteManager.RemoveDrawableBatch(FlatRedBall.Graphics.IDrawableBatch)">
            <summary>
            Removes the argument DrawableBatch from the internal list and calls its Destroy method.
            </summary>
            <param name="drawableBatch">The DrawableBatch to remove.</param>
        </member>
        <member name="M:FlatRedBall.SpriteManager.RemoveSpritePreserveRelationships(FlatRedBall.Sprite)">
            <summary>
            Removes the Sprite from the SpriteManager but preserves emitters, attachment and children references. 
            </summary>
            <remarks>
            Although the removed Sprite will preserve its parent and children, the parent will 
            no longer see this Sprite as its child, and the children will no longer see this 
            Sprite as their parent.  The preservation of relationships is not a functional one.  Usually
            this method is used to keep relationships alive on a removed Sprite for reattachment at
            a later time.
            </remarks>
            <param name="spriteToRemove">The Sprite to remove.</param>
        </member>
        <member name="M:FlatRedBall.SpriteManager.ReplaceTexture(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Finds all contained Sprites which reference the argument oldTexture and replaces
            the reference with newTexture.
            </summary>
            <remarks>
            This method will preserve all sizes of Sprites even if they use a non-zero PixelSize.
            </remarks>
            <param name="oldTexture">The old Texture2D to replace.</param>
            <param name="newTexture">The new Texture2D to use as a replacement.</param>
        </member>
        <member name="M:FlatRedBall.SpriteManager.UpdateDependencies">
            <summary>
            Updates the dependencies of all contained automatically updated Sprites, Cameras, and SpriteFrames.
            </summary>
        </member>
        <member name="M:FlatRedBall.SpriteManager.CreateParticleSprite(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Returns a new Sprite instance from the particle pool, but does not add it to the SpriteManager.
            </summary>
            <param name="texture">The texture to assign on the sprite.</param>
            <returns>The new sprite.</returns>
        </member>
        <member name="T:FlatRedBall.TimeMeasurementUnit">
            <summary>
            Represents the unit of time measurement.  This can be used in files that store timing information.
            </summary>
        </member>
        <member name="T:FlatRedBall.TimeManager">
            <summary>
            Class providing timing information for the current frame, absolute time since the game has started running, and for the current screen.
            </summary>
        </member>
        <member name="F:FlatRedBall.TimeManager.CurrentTime">
            <summary>
            The amount of time in seconds since the game started running. 
            This value is updated once-per-frame so it will 
            always be the same value until the next frame is called.
            This value does not consider pausing. To consider pausing, see CurrentScreenTime.
            </summary>
            <remarks>
            This value can be used to uniquely identify a frame.
            </remarks>
        </member>
        <member name="P:FlatRedBall.TimeManager.SecondDifference">
            <summary>
            The number of seconds (usually a fraction of a second) since
            the last frame.  This value can be used for time-based movement.
            This value is changed once per frame, and will remain constant within each frame.
            </summary>
        </member>
        <member name="P:FlatRedBall.TimeManager.TimeFactor">
            <summary>
            A multiplier for how fast time runs.  This is 1 by default.  Setting
            this value to 2 will make everything run twice as fast.
            </summary>
        </member>
        <member name="P:FlatRedBall.TimeManager.CurrentScreenTime">
            <summary>
            Returns the amount of time since the current screen started. This value does not 
            advance when the screen is paused.
            </summary>
            <remarks>
            This value is the same as 
            Screens.ScreenManager.CurrentScreen.PauseAdjustedCurrentTime
            </remarks>
        </member>
        <member name="M:FlatRedBall.TimeManager.Initialize">
            <summary>
            Allows the game component to perform any initialization it needs to before starting
            to run.  This is where it can query for any required services and load content.
            </summary>
        </member>
        <member name="M:FlatRedBall.TimeManager.StartSumTiming">
             <summary>
             Begins Sum Timing
             </summary>
             <remarks>
             <code>
             
             StartSumTiming();
             
             foreach(Sprite sprite in someSpriteArray)
             {
                 SumTimeRefresh();
                 PerformSomeFunction(sprite);
                 SumTimeSection("PerformSomeFunction time:");
             
             
                 SumTimeRefresh();
                 PerformSomeOtherFunction(sprite);
                 SumTimeSection("PerformSomeOtherFunction time:);
             
             }
             </code>
            
             </remarks>
        </member>
        <member name="M:FlatRedBall.TimeManager.TimeSection">
            <summary>
            Stores an unnamed timed section.
            </summary>
            <remarks>
            A timed section is the amount of time (in seconds) since the last time either Update
            or TimeSection has been called.  The sections are reset every time Update is called.
            The sections can be retrieved through the GetTimedSections method.
            <seealso cref="!:FRB.TimeManager.GetTimedSection"/>
            </remarks>
        </member>
        <member name="M:FlatRedBall.TimeManager.TimeSection(System.String)">
            <summary>
            Stores an named timed section.
            </summary>
            <remarks>
            A timed section is the amount of time (in seconds) since the last time either Update
            or TimeSection has been called.  The sections are reset every time Update is called.
            The sections can be retrieved through the GetTimedSections method.
            <seealso cref="!:FRB.TimeManager.GetTimedSection"/>
            </remarks>
            <param name="label">The label for the timed section.</param>
        </member>
        <member name="M:FlatRedBall.TimeManager.CurrentScreenSecondsSince(System.Double)">
            <summary>
            Returns the number of seconds that have passed since the arugment value. The
            return value will not increase when the screen is paused, so it can be used to 
            determine how much game time has passed for event swhich should occur on a timer.
            </summary>
            <param name="time">The time value, probably obtained earlier by calling CurrentScreenTime</param>
            <returns>The number of unpaused seconds that have passed since the argument time.</returns>
        </member>
        <member name="M:FlatRedBall.TimeManager.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Performs every-frame logic to update timing values such as CurrentTime and SecondDifference.  If this method is not called, CurrentTime will not advance.
            </summary>
            <param name="time">The GameTime value provided by the MonoGame Game class.</param>
        </member>
        <member name="T:FlatRedBall.Utilities.CustomBehaviorFunctions">
            <summary>
            Static class containing a collection of common methods used as CustomBehaviors.
            </summary>
        </member>
        <member name="M:FlatRedBall.Utilities.CustomBehaviorFunctions.RemoveWhenInvisible(FlatRedBall.Sprite)">
            <summary>
            Removes the argument Sprite when its Alpha equals 0.
            </summary>
            <param name="sprite">The Sprite to remove.</param>
        </member>
        <member name="M:FlatRedBall.Utilities.CustomBehaviorFunctions.RemoveWhenOutsideOfScreen(FlatRedBall.Sprite)">
            <summary>
            Removes the argument Sprite when it is outside of the default Camera's view (SpriteManager.Camera).
            </summary>
            <param name="sprite">The Sprite to remove.</param>
        </member>
        <member name="M:FlatRedBall.Utilities.CustomBehaviorFunctions.RemoveWhenJustCycled(FlatRedBall.Sprite)">
            <summary>
            Removes teh argument Sprite after it cycles its AnimationChain.  
            </summary>
            <param name="sprite">The Sprite to remove.</param>
        </member>
        <member name="M:FlatRedBall.Utilities.CustomBehaviorFunctions.RemoveWhenAlphaIs1(FlatRedBall.Sprite)">
            <summary>
            Removes the argument Sprite if it is opaque.
            </summary>
            <remarks>
            This method is commonly used with Sprites which have a 
            positive AlphaRate and which should be removed when completely visible.
            </remarks>
            <param name="si">Sprite to remove.</param>\
        </member>
        <member name="T:FlatRedBall.Utilities.ExportOrderAttribute">
            <summary>
            Represents the order that variables appear in Glue.
            </summary>
        </member>
        <member name="T:FlatRedBall.Utilities.GameRandom">
            <summary>
            Class deriving from Random providing additional random methods commonly used in games. Typically this is accessed
            through FlatRedBallServices.Random, but can also be instantiated manually.
            </summary>
        </member>
        <member name="M:FlatRedBall.Utilities.GameRandom.#ctor">
            <summary>
            Instantiates a new GameRandom creating a 
            </summary>
        </member>
        <member name="M:FlatRedBall.Utilities.GameRandom.#ctor(System.Int32)">
            <summary>
            Instantiates a new instance of the GameRandom class using the specified seed.
            </summary>
            <param name="seed">The seed used to initialize the random sequence of numbers.</param>
        </member>
        <member name="M:FlatRedBall.Utilities.GameRandom.In``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns a random element in a list.
            </summary>
            <typeparam name="T">The list type.</typeparam>
            <param name="list">The list to return an element from.</param>
            <returns>A random element, obtained by using the Next method to obtain a random index.</returns>
        </member>
        <member name="M:FlatRedBall.Utilities.GameRandom.MultipleIn``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Returns multiple instances from an argument list, guaranteeing
            no duplicates.
            </summary>
            <typeparam name="T">The type of the list.</typeparam>
            <param name="list">The list to pull from"</param>
            <param name="numberToReturn">The number of unique items to return, which must be less than the size of the argument list</param>
            <returns>A resulting collection of size numberToReturn</returns>
        </member>
        <member name="M:FlatRedBall.Utilities.GameRandom.Between(System.Single,System.Single)">
            <summary>
            Returns a random number within the specified range (inclusive).
            </summary>
            <param name="lowerBound">The inclusive lower bound.</param>
            <param name="upperBound">The inclusive upper bound</param>
            <returns>The random float between the bounds.</returns>
        </member>
        <member name="M:FlatRedBall.Utilities.GameRandom.Between(System.Int32,System.Int32)">
            <summary>
            Returns a random number within the specified range, where the lower bound is inclusive but the upper bound is exclusive.
            </summary>
            <param name="lowerInclusive">An inclusive lower bound - the number specified here can be returned.</param>
            <param name="upperExclusive">An exclusive upper bound - the number specified here will never be returned - the largest number possible is one less.</param>
            <returns>A random number inbetween the inclusive lower and exclusive upper bound.</returns>
        </member>
        <member name="M:FlatRedBall.Utilities.GameRandom.AngleRadians">
            <summary>
            Returns a random angle in radians (between 0 and 2*Pi).
            </summary>
            <returns>A random angle in radians.</returns>
        </member>
        <member name="M:FlatRedBall.Utilities.GameRandom.AngleDegrees">
            <summary>
            Returns a random angle in degrees (0 to 360)
            </summary>
            <returns>A random angle in degrees.</returns>
        </member>
        <member name="M:FlatRedBall.Utilities.GameRandom.RadialVector2(System.Single,System.Single)">
            <summary>
            Returns a 2-dimensional vector in a random direction with length within
            the specified range.
            </summary>
            <param name="minLength">The inclusive lower bound of the length.</param>
            <param name="maxLength">The inclusive upper bound of the length.</param>
            <returns>The resulting 2-dimensional vector.</returns>
        </member>
        <member name="M:FlatRedBall.Utilities.GameRandom.WedgeVector2Radians(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns a Vector2 of random length and angle between the argument values. 
            </summary>
            <param name="minLength">The minimum length of the returned vector.</param>
            <param name="maxLength">The maximum length of the returned vector.</param>
            <param name="minRadians">The minimum angle in radians of the returned vector.</param>
            <param name="maxRadians">The maximum angle in radians of the returned vector.</param>
            <returns>A random vector using the argument values.</returns>
        </member>
        <member name="M:FlatRedBall.Utilities.GameRandom.WedgeVector2Degrees(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns a Vector2 of random length and angle between the argument values.
            </summary>
            <param name="minLength">The minimum length of the returned vector.</param>
            <param name="maxLength">The maximum length of the returned vector.</param>
            <param name="minDegrees">The minimum angle in degrees of the returned vector.</param>
            <param name="maxDegrees">Teh maximum angle in degrees of the returned vector.</param>
            <returns>A random vector using the argument values.</returns>
        </member>
        <member name="T:FlatRedBall.Utilities.INameable">
            <summary>
            Defines that an object has a name.
            </summary>
            <remarks>
            Objects which are referenced by other objects in serializable classes
            should be INameable so that the in-memory reference can be coverted to
            a string and then re-created when the object is deserialized.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Utilities.INameable.Name">
            <summary>
            The name of the object.
            </summary>
        </member>
        <member name="T:FlatRedBall.Utilities.ITimed">
            <summary>
            Interface for an object which has a specified time.
            </summary>
        </member>
        <member name="P:FlatRedBall.Utilities.ITimed.Time">
            <summary>
            The time associated with the object.
            </summary>
        </member>
        <member name="T:FlatRedBall.Utilities.SpriteSelectionOptions">
            <summary>
            Contains information for simulating an expansion or contraction of a Sprite. 
            </summary>
            <remarks>
            This struct is used by a number of FlatRedball classes such as SpriteGrid and MathFunctions.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Utilities.StringBuilderExtensions.IndexOf(System.Text.StringBuilder,System.Char)">
            <summary>
            Get index of a char
            </summary>
            <param name="sb"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:FlatRedBall.Utilities.StringBuilderExtensions.IndexOf(System.Text.StringBuilder,System.Char,System.Int32)">
            <summary>
            Get index of a char starting from a given index
            </summary>
            <param name="sb"></param>
            <param name="c"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:FlatRedBall.Utilities.StringBuilderExtensions.IndexOf(System.Text.StringBuilder,System.String)">
            <summary>
            Get index of a string
            </summary>
            <param name="sb"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:FlatRedBall.Utilities.StringBuilderExtensions.IndexOf(System.Text.StringBuilder,System.String,System.Int32)">
            <summary>
            Get index of a string from a given index
            </summary>
            <param name="sb"></param>
            <param name="text"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:FlatRedBall.Utilities.StringBuilderExtensions.IndexOf(System.Text.StringBuilder,System.String,System.Boolean)">
            <summary>
            Get index of a string with case option
            </summary>
            <param name="sb"></param>
            <param name="text"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:FlatRedBall.Utilities.StringBuilderExtensions.IndexOf(System.Text.StringBuilder,System.String,System.Int32,System.Boolean)">
            <summary>
            Get index of a string from a given index with case option
            </summary>
            <param name="sb"></param>
            <param name="text"></param>
            <param name="startIndex"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="T:FlatRedBall.Utilities.StringFunctions">
            <summary>
            A class containing common string maniuplation methods.
            </summary>
        </member>
        <member name="M:FlatRedBall.Utilities.StringFunctions.CountOf(System.String,System.String)">
            <summary>
            Returns the number of times that the argument whatToFind is found in the calling string.
            </summary>
            <param name="instanceToSearchIn">The string to search within.</param>
            <param name="whatToFind">The string to search for.</param>
            <returns>The number of instances found</returns>
        </member>
        <member name="M:FlatRedBall.Utilities.StringFunctions.CharacterCountWithoutWhitespace(System.String)">
            <summary>
            Returns the number of non-whitespace characters in the argument stringInQuestion.
            </summary>
            <remarks>
            This method is used internally by the TextManager to determine the number of vertices needed to
            draw a Text object.
            </remarks>
            <param name="stringInQuestion">The string to have its non-witespace counted.</param>
            <returns>The number of non-whitespace characters counted.</returns>
        </member>
        <member name="M:FlatRedBall.Utilities.StringFunctions.FloatToString(System.Single,System.Int32)">
            <summary>
            Returns a string of the float with the argument decimalsAfterPoint digits of resolution after the point.
            </summary>
            <param name="floatToConvert">The float to convert.</param>
            <param name="decimalsAfterPoint">The number of decimals after the point.  For example, 3.14159 becomes "3.14" if the
            decimalsAfterPoint is 2.  This method will not append extra decimals to reach the argument decimalsAfterPoint.</param>
            <returns>The string representation of the argument float.</returns>
        </member>
        <member name="M:FlatRedBall.Utilities.StringFunctions.GetCharAfter(System.String,System.String)">
            <summary>
            Returns the character that can be found after a particular sequence of characters.
            </summary>
            <remarks>
            This will return the first character following a particular sequence of characters.  For example, 
            GetCharAfter("bcd", "abcdef") would return 'e'.
            </remarks>
            <param name="stringToSearchFor">The string to search for.</param>
            <param name="whereToSearch">The string to search in.</param>
            <returns>Returns the character found or the null character '\0' if the string is not found.</returns>
        </member>
        <member name="M:FlatRedBall.Utilities.StringFunctions.GetFloatAfter(System.String,System.String)">
            <summary>
            Returns the float that can be found after a particular sequence of characters.
            </summary>
            <remarks>
            This will return the float following a particular sequence of characters.  For example, 
            GetCharAfter("height = 6; width = 3; depth = 7;", "width = ") would return 3.0f. 
            </remarks>
            <param name="stringToSearchFor">The string to search for.</param>
            <param name="whereToSearch">The string to search in.</param>
            <returns>Returns the float value found or float.NaN if the string is not found.</returns>
        </member>
        <member name="M:FlatRedBall.Utilities.StringFunctions.GetIntAfter(System.String,System.String)">
            <summary>
            Returns the first integer found after the argument stringToSearchFor in whereToSearch.
            </summary>
            <remarks>
            This method is used to help simplify parsing of text files and data strings.
            If stringToSearchFor is "Y:" and whereToSearch is "X: 30, Y:32", then the value
            of 32 will be returned.
            </remarks>
            <param name="stringToSearchFor">The string pattern to search for.</param>
            <param name="whereToSearch">The string that will be searched.</param>
            <returns>The integer value found after the argument stringToSearchFor.</returns>
        </member>
        <member name="M:FlatRedBall.Utilities.StringFunctions.GetIntAfter(System.String,System.String,System.Int32)">
            <summary>
            Returns the first integer found after the argument stringToSearchFor.  The search begins
            at the argument startIndex.
            </summary>
            <param name="stringToSearchFor">The string pattern to search for.</param>
            <param name="whereToSearch">The string that will be searched.</param>
            <param name="startIndex">The index to begin searching at.  This method
            will ignore any instances of stringToSearchFor which begin at an index smaller
            than the argument startIndex.</param>
            <returns></returns>
        </member>
        <member name="M:FlatRedBall.Utilities.StringFunctions.GetLineCount(System.String)">
            <summary>
            Returns the number of lines in a given string.  Newlines '\n' increase the 
            line count.
            </summary>
            <param name="stringInQuestion">The string that will have its lines counted.</param>
            <returns>The number of lines in the argument.  "Hello" will return a value of 1, "Hello\nthere" will return a value of 2.</returns>
        </member>
        <member name="M:FlatRedBall.Utilities.StringFunctions.GetNumberAtEnd(System.String)">
            <summary>
            Returns the number found at the end of the argument stringToGetNumberFrom or throws an
            ArgumentException if no number is found.
            </summary>
            <remarks>
            A stringToGetNumberFrom of "sprite41" will result in the value of 41 returned.  A 
            stringToGetNumberFrom of "sprite" will result in an ArgumentException being thrown.
            </remarks>
            <exception cref="T:System.ArgumentException">Throws ArgumentException if no number is found at the end of the argument string.</exception>
            <param name="stringToGetNumberFrom">The number found at the end.</param>
            <returns>The integer value found at the end of the stringToGetNumberFrom.</returns>
        </member>
        <member name="M:FlatRedBall.Utilities.StringFunctions.IncrementNumberAtEnd(System.String)">
            <summary>
            Increments the number at the end of a string or adds a number if none exists.
            </summary>
            <remarks>
            This method begins looking at the end of a string for numbers and moves towards the beginning of the string
            until it encounters a character which is not a numerical digit or the beginning of the string.  "Sprite123" would return
            "Sprite124", and "MyString" would return "MyString1".
            </remarks>
            <param name="originalString">The string to "increment".</param>
            <returns>Returns a string with the number at the end incremented, or with a number added on the end if none existed before.</returns>
        </member>
        <member name="M:FlatRedBall.Utilities.StringFunctions.InsertSpacesInCamelCaseString(System.String)">
            <summary>
            Inserts spaces before every capital letter in a camel-case
            string.  Ignores the first letter.
            </summary>
            <remarks>
            For example "HelloThereIAmCamelCase" becomes
            "Hello There I Am Camel Case".
            </remarks>
            <param name="originalString">The string in which to insert spaces.</param>
            <returns>The string with spaces inserted.</returns>
        </member>
        <member name="M:FlatRedBall.Utilities.StringFunctions.MakeNameUnique``1(``0,System.Collections.Generic.IList{``0})">
            <summary>
            Renames the argument INameable to prevent duplicate names.  This method is extremely inefficent for large lists.
            </summary>
            <typeparam name="T">The type of INameable contained int he list.</typeparam>
            <param name="nameable">The INameable to rename if necessary.</param>
            <param name="list">The list containing the INameables to compare against.</param>
        </member>
        <member name="M:FlatRedBall.Utilities.StringFunctions.MakeNameUnique``2(``0,System.Collections.Generic.IList{``1})">
            <summary>
            Makes an INameable's name unique given a list of existing INameables.
            </summary>
            <typeparam name="T">The type of nameable.</typeparam>
            <typeparam name="U">The type of IList, where the type is an INameable</typeparam>
            <param name="nameable">The instance to modify if necessary.</param>
            <param name="list">The list of INameables</param>
        </member>
        <member name="M:FlatRedBall.Utilities.StringFunctions.RemoveNumberAtEnd(System.String)">
            <summary>
            Removes the number found at the end of the argument originalString and returns the resulting
            string, or returns the original string if no number is found.
            </summary>
            <param name="originalString">The string that will have the number at its end removed.</param>
            <returns>The string after the number has been removed.</returns>
        </member>
        <member name="M:FlatRedBall.Utilities.StringFunctions.RemoveWhitespace(System.String)">
            <summary>
            Removes all whitespace found in the argument stringToRemoveWhitespaceFrom.
            </summary>
            <param name="stringToRemoveWhitespaceFrom">The string that will have its whitespace removed.</param>
            <returns>The string resulting from removing whitespace from the argument string.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2ExtensionMethods.Angle(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Returns the angle in radians of the argument vector, where 0 is to the right, 
            and increasing the angle moves counterclockwise. 
            </summary>
            <param name="vector">The argument vector.</param>
            <returns>The angle in radians, or null if the Vector has X and Y values both equal to 0.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2ExtensionMethods.NormalizedOrZero(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Attempts to normalize the vector, or returns Vector2.Zero if the argument vector has a lenth of 0.
            </summary>
            <param name="vector">The vector to normalize.</param>
            <returns>A normalized vector (length 1) or Vector2.Zero if the argument vector has a length of 0.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2ExtensionMethods.Normalized(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Returns a normalized vector. Throws an exception if the argument vector has a length of 0.
            </summary>
            <param name="vector">The vector to normalize.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector2ExtensionMethods.AtLength(Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Returns a vector in the same direction as the argument vector, but of the length specified by the length argument.
            </summary>
            <param name="vector2">The vector specifying the direction.</param>
            <param name="length">The desired length.</param>
            <returns>The resulting vector in the same direction as the argument of the desired length, or a vector of 0 length if the argument has 0 length.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3ExtensionMethods.LengthSquared2D(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Returnes the length squared of the 2D distance. In other words, the Z component is ignored.
            </summary>
            <param name="vectorToMeasure">The vector to </param>
            <returns>The length squared, ignoring Z.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3ExtensionMethods.Length2D(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Reeturns the length of the vector ignoring the Z value. The returned value is the same as first setting Z to 0 and calling Length.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3ExtensionMethods.Angle(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Returns the angle in radians of the argument vector, where 0 is to the right, 
            and increasing the angle moves counterclockwise. 
            The Z value is ignored.
            </summary>
            <param name="vector">The argument vector.</param>
            <returns>The angle in radians, or null if the Vector has X and Y values both equal to 0.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3ExtensionMethods.ToVector2(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Converts this Vector3 to a Vector2 by copying the X and Y values.
            </summary>
            <param name="vector3">The Vector3 to convert</param>
            <returns>A Vector2 with the same X adn Y values</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3ExtensionMethods.Normalized(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Returns a new Vector3 of Length 0, or throws an InvalidOperationException if this Vector3 has a Length of 0.
            </summary>
            <param name="vector3">The Vector3 to normalize</param>
            <returns>The normalized vector.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the Vector3 has a Length of 0. </exception>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3ExtensionMethods.FromAngle(System.Single)">
            <summary>
            Returns a unit vector with a Z value of 0 pointing in the direction
            specified by the radians value.
            </summary>
            <param name="radians">The direction in radians, where 0 is to the right, and
            values increase counterclockwise.</param>
            <returns>A new Vector3 pointing in the desired direction.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Vector3ExtensionMethods.AtLength(Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Returns a vector in the same direction as the argument vector, but of the length specified by the length argument.
            This can safely be called on vectors with length 0, as the right direction will be used.
            </summary>
            <param name="vector3">The vector specifying the direction.</param>
            <param name="length">The desired length.</param>
            <returns>The resulting vector in the same direction as the argument of the desired length, or a vector of 0 length if the argument has 0 length.</returns>
        </member>
    </members>
</doc>
